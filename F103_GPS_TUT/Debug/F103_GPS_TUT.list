
F103_GPS_TUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  080083d8  080083d8  000093d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008840  08008840  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008848  08008848  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008850  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  200001dc  08008a2c  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000968  08008a2c  0000a968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbdb  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  00015de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00017fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000088b  00000000  00000000  00018ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018814  00000000  00000000  00019363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebc7  00000000  00000000  00031b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008709d  00000000  00000000  0004073e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c77db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d0  00000000  00000000  000c7820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000cb8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080083c0 	.word	0x080083c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080083c0 	.word	0x080083c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b2c:	b08c      	sub	sp, #48	@ 0x30
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000b34:	4b5b      	ldr	r3, [pc, #364]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000b3e:	e004      	b.n	8000b4a <decodeGGA+0x22>
 8000b40:	4b58      	ldr	r3, [pc, #352]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a57      	ldr	r2, [pc, #348]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b56      	ldr	r3, [pc, #344]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b58:	d1f2      	bne.n	8000b40 <decodeGGA+0x18>
	inx++;
 8000b5a:	4b52      	ldr	r3, [pc, #328]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a50      	ldr	r2, [pc, #320]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b62:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000b64:	e004      	b.n	8000b70 <decodeGGA+0x48>
 8000b66:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b4c      	ldr	r3, [pc, #304]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b2c      	cmp	r3, #44	@ 0x2c
 8000b7e:	d1f2      	bne.n	8000b66 <decodeGGA+0x3e>
	inx++;
 8000b80:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a47      	ldr	r2, [pc, #284]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b88:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000b8a:	e004      	b.n	8000b96 <decodeGGA+0x6e>
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a44      	ldr	r2, [pc, #272]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <decodeGGA+0x17c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ba4:	d1f2      	bne.n	8000b8c <decodeGGA+0x64>
	inx++;
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca4 <decodeGGA+0x17c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a3d      	ldr	r2, [pc, #244]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000bb0:	e004      	b.n	8000bbc <decodeGGA+0x94>
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b2c      	cmp	r3, #44	@ 0x2c
 8000bca:	d1f2      	bne.n	8000bb2 <decodeGGA+0x8a>
	inx++;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000bd6:	e004      	b.n	8000be2 <decodeGGA+0xba>
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <decodeGGA+0x17c>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b30      	ldr	r3, [pc, #192]	@ (8000ca4 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b2c      	cmp	r3, #44	@ 0x2c
 8000bf0:	d1f2      	bne.n	8000bd8 <decodeGGA+0xb0>
	inx++;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <decodeGGA+0x17c>)
 8000bfa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000bfc:	e004      	b.n	8000c08 <decodeGGA+0xe0>
 8000bfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a27      	ldr	r2, [pc, #156]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c16:	d1f2      	bne.n	8000bfe <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c20:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000c22:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b31      	cmp	r3, #49	@ 0x31
 8000c30:	d00f      	beq.n	8000c52 <decodeGGA+0x12a>
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b32      	cmp	r3, #50	@ 0x32
 8000c40:	d007      	beq.n	8000c52 <decodeGGA+0x12a>
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b36      	cmp	r3, #54	@ 0x36
 8000c50:	d106      	bne.n	8000c60 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c5e:	e009      	b.n	8000c74 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000c66:	2301      	movs	r3, #1
 8000c68:	e2f2      	b.n	8001250 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2c      	cmp	r3, #44	@ 0x2c
 8000c82:	d1f2      	bne.n	8000c6a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a06      	ldr	r2, [pc, #24]	@ (8000ca4 <decodeGGA+0x17c>)
 8000c8c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	220c      	movs	r2, #12
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 fbad 	bl	80053f6 <memset>
	i=0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000ca0:	e016      	b.n	8000cd0 <decodeGGA+0x1a8>
 8000ca2:	bf00      	nop
 8000ca4:	200001f8 	.word	0x200001f8
	{
		buffer[i] = GGAbuffer[inx];
 8000ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8000f48 <decodeGGA+0x420>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	7819      	ldrb	r1, [r3, #0]
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cba:	4413      	add	r3, r2
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
		i++;
 8000cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000cc6:	4ba0      	ldr	r3, [pc, #640]	@ (8000f48 <decodeGGA+0x420>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a9e      	ldr	r2, [pc, #632]	@ (8000f48 <decodeGGA+0x420>)
 8000cce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8000f48 <decodeGGA+0x420>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b2c      	cmp	r3, #44	@ 0x2c
 8000cde:	d1e3      	bne.n	8000ca8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fd7d 	bl	80047e4 <atoi>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a97      	ldr	r2, [pc, #604]	@ (8000f4c <decodeGGA+0x424>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1312      	asrs	r2, r2, #12
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	@ (8000f50 <decodeGGA+0x428>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4995      	ldr	r1, [pc, #596]	@ (8000f54 <decodeGGA+0x42c>)
 8000cfe:	fb81 0103 	smull	r0, r1, r1, r3
 8000d02:	1149      	asrs	r1, r1, #5
 8000d04:	17db      	asrs	r3, r3, #31
 8000d06:	1acb      	subs	r3, r1, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a93      	ldr	r2, [pc, #588]	@ (8000f58 <decodeGGA+0x430>)
 8000d0c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 fd66 	bl	80047e4 <atoi>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a8e      	ldr	r2, [pc, #568]	@ (8000f54 <decodeGGA+0x42c>)
 8000d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d20:	1152      	asrs	r2, r2, #5
 8000d22:	17db      	asrs	r3, r3, #31
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	4a8b      	ldr	r2, [pc, #556]	@ (8000f54 <decodeGGA+0x42c>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1151      	asrs	r1, r2, #5
 8000d2e:	17da      	asrs	r2, r3, #31
 8000d30:	1a8a      	subs	r2, r1, r2
 8000d32:	2164      	movs	r1, #100	@ 0x64
 8000d34:	fb01 f202 	mul.w	r2, r1, r2
 8000d38:	1a9a      	subs	r2, r3, r2
 8000d3a:	4b85      	ldr	r3, [pc, #532]	@ (8000f50 <decodeGGA+0x428>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	4b85      	ldr	r3, [pc, #532]	@ (8000f54 <decodeGGA+0x42c>)
 8000d40:	fb83 0301 	smull	r0, r3, r3, r1
 8000d44:	1158      	asrs	r0, r3, #5
 8000d46:	17cb      	asrs	r3, r1, #31
 8000d48:	1ac3      	subs	r3, r0, r3
 8000d4a:	2064      	movs	r0, #100	@ 0x64
 8000d4c:	fb00 f303 	mul.w	r3, r0, r3
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	4a81      	ldr	r2, [pc, #516]	@ (8000f5c <decodeGGA+0x434>)
 8000d56:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000d58:	4b80      	ldr	r3, [pc, #512]	@ (8000f5c <decodeGGA+0x434>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d5e:	dd09      	ble.n	8000d74 <decodeGGA+0x24c>
	{
		min = min-60;
 8000d60:	4b7e      	ldr	r3, [pc, #504]	@ (8000f5c <decodeGGA+0x434>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b3c      	subs	r3, #60	@ 0x3c
 8000d66:	4a7d      	ldr	r2, [pc, #500]	@ (8000f5c <decodeGGA+0x434>)
 8000d68:	6013      	str	r3, [r2, #0]
		hr++;
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f58 <decodeGGA+0x430>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a79      	ldr	r2, [pc, #484]	@ (8000f58 <decodeGGA+0x430>)
 8000d72:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000d74:	4b78      	ldr	r3, [pc, #480]	@ (8000f58 <decodeGGA+0x430>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da09      	bge.n	8000d90 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000d7c:	4b76      	ldr	r3, [pc, #472]	@ (8000f58 <decodeGGA+0x430>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3318      	adds	r3, #24
 8000d82:	4a75      	ldr	r2, [pc, #468]	@ (8000f58 <decodeGGA+0x430>)
 8000d84:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d86:	4b76      	ldr	r3, [pc, #472]	@ (8000f60 <decodeGGA+0x438>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a74      	ldr	r2, [pc, #464]	@ (8000f60 <decodeGGA+0x438>)
 8000d8e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000d90:	4b71      	ldr	r3, [pc, #452]	@ (8000f58 <decodeGGA+0x430>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b17      	cmp	r3, #23
 8000d96:	dd09      	ble.n	8000dac <decodeGGA+0x284>
	{
		hr=hr-24;
 8000d98:	4b6f      	ldr	r3, [pc, #444]	@ (8000f58 <decodeGGA+0x430>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3b18      	subs	r3, #24
 8000d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8000f58 <decodeGGA+0x430>)
 8000da0:	6013      	str	r3, [r2, #0]
		daychange++;
 8000da2:	4b6f      	ldr	r3, [pc, #444]	@ (8000f60 <decodeGGA+0x438>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a6d      	ldr	r2, [pc, #436]	@ (8000f60 <decodeGGA+0x438>)
 8000daa:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000dac:	4b6a      	ldr	r3, [pc, #424]	@ (8000f58 <decodeGGA+0x430>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000db4:	4b69      	ldr	r3, [pc, #420]	@ (8000f5c <decodeGGA+0x434>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fd0f 	bl	80047e4 <atoi>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <decodeGGA+0x42c>)
 8000dca:	fb83 1302 	smull	r1, r3, r3, r2
 8000dce:	1159      	asrs	r1, r3, #5
 8000dd0:	17d3      	asrs	r3, r2, #31
 8000dd2:	1acb      	subs	r3, r1, r3
 8000dd4:	2164      	movs	r1, #100	@ 0x64
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000de0:	4b59      	ldr	r3, [pc, #356]	@ (8000f48 <decodeGGA+0x420>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a58      	ldr	r2, [pc, #352]	@ (8000f48 <decodeGGA+0x420>)
 8000de8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	220c      	movs	r2, #12
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 faff 	bl	80053f6 <memset>
	i=0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dfc:	e013      	b.n	8000e26 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000dfe:	4b52      	ldr	r3, [pc, #328]	@ (8000f48 <decodeGGA+0x420>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	7819      	ldrb	r1, [r3, #0]
 8000e0a:	f107 020c 	add.w	r2, r7, #12
 8000e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e10:	4413      	add	r3, r2
 8000e12:	460a      	mov	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
		i++;
 8000e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <decodeGGA+0x420>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a49      	ldr	r2, [pc, #292]	@ (8000f48 <decodeGGA+0x420>)
 8000e24:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000e26:	4b48      	ldr	r3, [pc, #288]	@ (8000f48 <decodeGGA+0x420>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e34:	d1e3      	bne.n	8000dfe <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f988 	bl	8000150 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d801      	bhi.n	8000e4a <decodeGGA+0x322>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e202      	b.n	8001250 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 fcc8 	bl	80047e4 <atoi>
 8000e54:	4603      	mov	r3, r0
 8000e56:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e5c:	e002      	b.n	8000e64 <decodeGGA+0x33c>
 8000e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e60:	3301      	adds	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e70:	d1f5      	bne.n	8000e5e <decodeGGA+0x336>
	j++;
 8000e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e74:	3301      	adds	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f967 	bl	8000150 <strlen>
 8000e82:	4602      	mov	r2, r0
 8000e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e8c:	f107 020c 	add.w	r2, r7, #12
 8000e90:	4413      	add	r3, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fca6 	bl	80047e4 <atoi>
 8000e98:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000e9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fab0 	bl	8000404 <__aeabi_i2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <decodeGGA+0x43c>)
 8000eaa:	f7ff fc3f 	bl	800072c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	69f8      	ldr	r0, [r7, #28]
 8000eb8:	f7ff faa4 	bl	8000404 <__aeabi_i2d>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	460d      	mov	r5, r1
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa9d 	bl	8000404 <__aeabi_i2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4925      	ldr	r1, [pc, #148]	@ (8000f68 <decodeGGA+0x440>)
 8000ed4:	f006 fb68 	bl	80075a8 <pow>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff fc24 	bl	800072c <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4640      	mov	r0, r8
 8000eea:	4649      	mov	r1, r9
 8000eec:	f7ff f93e 	bl	800016c <__adddf3>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fdc6 	bl	8000a88 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	601a      	str	r2, [r3, #0]
	inx++;  
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <decodeGGA+0x420>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <decodeGGA+0x420>)
 8000f0e:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000f10:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <decodeGGA+0x420>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000f20:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <decodeGGA+0x420>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <decodeGGA+0x420>)
 8000f28:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <decodeGGA+0x420>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <decodeGGA+0x420>)
 8000f32:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	220c      	movs	r2, #12
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fa5a 	bl	80053f6 <memset>
	i=0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f46:	e025      	b.n	8000f94 <decodeGGA+0x46c>
 8000f48:	200001f8 	.word	0x200001f8
 8000f4c:	68db8bad 	.word	0x68db8bad
 8000f50:	20000000 	.word	0x20000000
 8000f54:	51eb851f 	.word	0x51eb851f
 8000f58:	200001fc 	.word	0x200001fc
 8000f5c:	20000200 	.word	0x20000200
 8000f60:	20000210 	.word	0x20000210
 8000f64:	40590000 	.word	0x40590000
 8000f68:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8000f6c:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <decodeGGA+0x668>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	7819      	ldrb	r1, [r3, #0]
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
		i++;
 8000f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f86:	3301      	adds	r3, #1
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8000f8a:	4b81      	ldr	r3, [pc, #516]	@ (8001190 <decodeGGA+0x668>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a7f      	ldr	r2, [pc, #508]	@ (8001190 <decodeGGA+0x668>)
 8000f92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f94:	4b7e      	ldr	r3, [pc, #504]	@ (8001190 <decodeGGA+0x668>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b2c      	cmp	r3, #44	@ 0x2c
 8000fa2:	d1e3      	bne.n	8000f6c <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fc1b 	bl	80047e4 <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000fb6:	e002      	b.n	8000fbe <decodeGGA+0x496>
 8000fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fba:	3301      	adds	r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000fca:	d1f5      	bne.n	8000fb8 <decodeGGA+0x490>
	j++;
 8000fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fce:	3301      	adds	r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8ba 	bl	8000150 <strlen>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	4413      	add	r3, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fbf9 	bl	80047e4 <atoi>
 8000ff2:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000ff4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa03 	bl	8000404 <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b64      	ldr	r3, [pc, #400]	@ (8001194 <decodeGGA+0x66c>)
 8001004:	f7ff fb92 	bl	800072c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4690      	mov	r8, r2
 800100e:	4699      	mov	r9, r3
 8001010:	69f8      	ldr	r0, [r7, #28]
 8001012:	f7ff f9f7 	bl	8000404 <__aeabi_i2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	3302      	adds	r3, #2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f9f0 	bl	8000404 <__aeabi_i2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	495a      	ldr	r1, [pc, #360]	@ (8001198 <decodeGGA+0x670>)
 800102e:	f006 fabb 	bl	80075a8 <pow>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff fb77 	bl	800072c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f7ff f891 	bl	800016c <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd19 	bl	8000a88 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	609a      	str	r2, [r3, #8]
	inx++;
 8001060:	4b4b      	ldr	r3, [pc, #300]	@ (8001190 <decodeGGA+0x668>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a4a      	ldr	r2, [pc, #296]	@ (8001190 <decodeGGA+0x668>)
 8001068:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800106a:	4b49      	ldr	r3, [pc, #292]	@ (8001190 <decodeGGA+0x668>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800107a:	4b45      	ldr	r3, [pc, #276]	@ (8001190 <decodeGGA+0x668>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a43      	ldr	r2, [pc, #268]	@ (8001190 <decodeGGA+0x668>)
 8001082:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001084:	4b42      	ldr	r3, [pc, #264]	@ (8001190 <decodeGGA+0x668>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a41      	ldr	r2, [pc, #260]	@ (8001190 <decodeGGA+0x668>)
 800108c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <decodeGGA+0x668>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a3e      	ldr	r2, [pc, #248]	@ (8001190 <decodeGGA+0x668>)
 8001096:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001098:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <decodeGGA+0x668>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a3c      	ldr	r2, [pc, #240]	@ (8001190 <decodeGGA+0x668>)
 80010a0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	220c      	movs	r2, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f9a3 	bl	80053f6 <memset>
	i=0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80010b4:	e013      	b.n	80010de <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <decodeGGA+0x668>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	7819      	ldrb	r1, [r3, #0]
 80010c2:	f107 020c 	add.w	r2, r7, #12
 80010c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c8:	4413      	add	r3, r2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
		i++;
 80010ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d0:	3301      	adds	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <decodeGGA+0x668>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a2d      	ldr	r2, [pc, #180]	@ (8001190 <decodeGGA+0x668>)
 80010dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <decodeGGA+0x668>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b2c      	cmp	r3, #44	@ 0x2c
 80010ec:	d1e3      	bne.n	80010b6 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fb76 	bl	80047e4 <atoi>
 80010f8:	4602      	mov	r2, r0
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <decodeGGA+0x668>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <decodeGGA+0x668>)
 8001106:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001108:	e004      	b.n	8001114 <decodeGGA+0x5ec>
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <decodeGGA+0x668>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <decodeGGA+0x668>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <decodeGGA+0x668>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b2c      	cmp	r3, #44	@ 0x2c
 8001122:	d1f2      	bne.n	800110a <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <decodeGGA+0x668>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <decodeGGA+0x668>)
 800112c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	220c      	movs	r2, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f004 f95d 	bl	80053f6 <memset>
	i=0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 8001140:	e013      	b.n	800116a <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <decodeGGA+0x668>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	f107 020c 	add.w	r2, r7, #12
 8001152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001154:	4413      	add	r3, r2
 8001156:	460a      	mov	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
		i++;
 800115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115c:	3301      	adds	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <decodeGGA+0x668>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <decodeGGA+0x668>)
 8001168:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <decodeGGA+0x668>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b2c      	cmp	r3, #44	@ 0x2c
 8001178:	d1e3      	bne.n	8001142 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fb30 	bl	80047e4 <atoi>
 8001184:	4603      	mov	r3, r0
 8001186:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 800118c:	e009      	b.n	80011a2 <decodeGGA+0x67a>
 800118e:	bf00      	nop
 8001190:	200001f8 	.word	0x200001f8
 8001194:	40590000 	.word	0x40590000
 8001198:	40240000 	.word	0x40240000
 800119c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119e:	3301      	adds	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80011ae:	d1f5      	bne.n	800119c <decodeGGA+0x674>
	j++;
 80011b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7fe ffc8 	bl	8000150 <strlen>
 80011c0:	4602      	mov	r2, r0
 80011c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fb07 	bl	80047e4 <atoi>
 80011d6:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80011d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f911 	bl	8000404 <__aeabi_i2d>
 80011e2:	4604      	mov	r4, r0
 80011e4:	460d      	mov	r5, r1
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f7ff f90c 	bl	8000404 <__aeabi_i2d>
 80011ec:	4680      	mov	r8, r0
 80011ee:	4689      	mov	r9, r1
 80011f0:	6a38      	ldr	r0, [r7, #32]
 80011f2:	f7ff f907 	bl	8000404 <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4917      	ldr	r1, [pc, #92]	@ (800125c <decodeGGA+0x734>)
 8001200:	f006 f9d2 	bl	80075a8 <pow>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4640      	mov	r0, r8
 800120a:	4649      	mov	r1, r9
 800120c:	f7ff fa8e 	bl	800072c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7fe ffa8 	bl	800016c <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	621a      	str	r2, [r3, #32]

	inx++;
 8001232:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <decodeGGA+0x738>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <decodeGGA+0x738>)
 800123a:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <decodeGGA+0x738>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	return 0;
 800124e:	2300      	movs	r3, #0

}
 8001250:	4618      	mov	r0, r3
 8001252:	3730      	adds	r7, #48	@ 0x30
 8001254:	46bd      	mov	sp, r7
 8001256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800125a:	bf00      	nop
 800125c:	40240000 	.word	0x40240000
 8001260:	200001f8 	.word	0x200001f8

08001264 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b090      	sub	sp, #64	@ 0x40
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001270:	4b92      	ldr	r3, [pc, #584]	@ (80014bc <decodeRMC+0x258>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800127a:	e004      	b.n	8001286 <decodeRMC+0x22>
 800127c:	4b8f      	ldr	r3, [pc, #572]	@ (80014bc <decodeRMC+0x258>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a8e      	ldr	r2, [pc, #568]	@ (80014bc <decodeRMC+0x258>)
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b8d      	ldr	r3, [pc, #564]	@ (80014bc <decodeRMC+0x258>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b2c      	cmp	r3, #44	@ 0x2c
 8001294:	d1f2      	bne.n	800127c <decodeRMC+0x18>
	inx++;
 8001296:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <decodeRMC+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a87      	ldr	r2, [pc, #540]	@ (80014bc <decodeRMC+0x258>)
 800129e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80012a0:	e004      	b.n	80012ac <decodeRMC+0x48>
 80012a2:	4b86      	ldr	r3, [pc, #536]	@ (80014bc <decodeRMC+0x258>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a84      	ldr	r2, [pc, #528]	@ (80014bc <decodeRMC+0x258>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b83      	ldr	r3, [pc, #524]	@ (80014bc <decodeRMC+0x258>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b2c      	cmp	r3, #44	@ 0x2c
 80012ba:	d1f2      	bne.n	80012a2 <decodeRMC+0x3e>
	inx++;
 80012bc:	4b7f      	ldr	r3, [pc, #508]	@ (80014bc <decodeRMC+0x258>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a7e      	ldr	r2, [pc, #504]	@ (80014bc <decodeRMC+0x258>)
 80012c4:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80012c6:	4b7d      	ldr	r3, [pc, #500]	@ (80014bc <decodeRMC+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b41      	cmp	r3, #65	@ 0x41
 80012d4:	d10d      	bne.n	80012f2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80012dc:	4b77      	ldr	r3, [pc, #476]	@ (80014bc <decodeRMC+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a76      	ldr	r2, [pc, #472]	@ (80014bc <decodeRMC+0x258>)
 80012e4:	6013      	str	r3, [r2, #0]
	inx++;
 80012e6:	4b75      	ldr	r3, [pc, #468]	@ (80014bc <decodeRMC+0x258>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a73      	ldr	r2, [pc, #460]	@ (80014bc <decodeRMC+0x258>)
 80012ee:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012f0:	e009      	b.n	8001306 <decodeRMC+0xa2>
		rmc->isValid =0;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
		return 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e1d5      	b.n	80016a8 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012fc:	4b6f      	ldr	r3, [pc, #444]	@ (80014bc <decodeRMC+0x258>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a6e      	ldr	r2, [pc, #440]	@ (80014bc <decodeRMC+0x258>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b6d      	ldr	r3, [pc, #436]	@ (80014bc <decodeRMC+0x258>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b2c      	cmp	r3, #44	@ 0x2c
 8001314:	d1f2      	bne.n	80012fc <decodeRMC+0x98>
	inx++;
 8001316:	4b69      	ldr	r3, [pc, #420]	@ (80014bc <decodeRMC+0x258>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a67      	ldr	r2, [pc, #412]	@ (80014bc <decodeRMC+0x258>)
 800131e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001320:	e004      	b.n	800132c <decodeRMC+0xc8>
 8001322:	4b66      	ldr	r3, [pc, #408]	@ (80014bc <decodeRMC+0x258>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a64      	ldr	r2, [pc, #400]	@ (80014bc <decodeRMC+0x258>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b63      	ldr	r3, [pc, #396]	@ (80014bc <decodeRMC+0x258>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b2c      	cmp	r3, #44	@ 0x2c
 800133a:	d1f2      	bne.n	8001322 <decodeRMC+0xbe>
	inx++;
 800133c:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <decodeRMC+0x258>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a5e      	ldr	r2, [pc, #376]	@ (80014bc <decodeRMC+0x258>)
 8001344:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001346:	e004      	b.n	8001352 <decodeRMC+0xee>
 8001348:	4b5c      	ldr	r3, [pc, #368]	@ (80014bc <decodeRMC+0x258>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a5b      	ldr	r2, [pc, #364]	@ (80014bc <decodeRMC+0x258>)
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b5a      	ldr	r3, [pc, #360]	@ (80014bc <decodeRMC+0x258>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001360:	d1f2      	bne.n	8001348 <decodeRMC+0xe4>
	inx++;
 8001362:	4b56      	ldr	r3, [pc, #344]	@ (80014bc <decodeRMC+0x258>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a54      	ldr	r2, [pc, #336]	@ (80014bc <decodeRMC+0x258>)
 800136a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800136c:	e004      	b.n	8001378 <decodeRMC+0x114>
 800136e:	4b53      	ldr	r3, [pc, #332]	@ (80014bc <decodeRMC+0x258>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a51      	ldr	r2, [pc, #324]	@ (80014bc <decodeRMC+0x258>)
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b50      	ldr	r3, [pc, #320]	@ (80014bc <decodeRMC+0x258>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b2c      	cmp	r3, #44	@ 0x2c
 8001386:	d1f2      	bne.n	800136e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001388:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <decodeRMC+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a4b      	ldr	r2, [pc, #300]	@ (80014bc <decodeRMC+0x258>)
 8001390:	6013      	str	r3, [r2, #0]
	i=0;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	220c      	movs	r2, #12
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f829 	bl	80053f6 <memset>
	while (RMCbuffer[inx] != ',')
 80013a4:	e013      	b.n	80013ce <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80013a6:	4b45      	ldr	r3, [pc, #276]	@ (80014bc <decodeRMC+0x258>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	7819      	ldrb	r1, [r3, #0]
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
		i++;
 80013be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80013c0:	3301      	adds	r3, #1
 80013c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80013c4:	4b3d      	ldr	r3, [pc, #244]	@ (80014bc <decodeRMC+0x258>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a3c      	ldr	r2, [pc, #240]	@ (80014bc <decodeRMC+0x258>)
 80013cc:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <decodeRMC+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b2c      	cmp	r3, #44	@ 0x2c
 80013dc:	d1e3      	bne.n	80013a6 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d055      	beq.n	8001494 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 f9f9 	bl	80047e4 <atoi>
 80013f2:	4603      	mov	r3, r0
 80013f4:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.') j++;   // same as above
 80013fa:	e002      	b.n	8001402 <decodeRMC+0x19e>
 80013fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013fe:	3301      	adds	r3, #1
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b2e      	cmp	r3, #46	@ 0x2e
 800140e:	d1f5      	bne.n	80013fc <decodeRMC+0x198>
		j++;
 8001410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001412:	3301      	adds	r3, #1
 8001414:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer))-j;
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fe98 	bl	8000150 <strlen>
 8001420:	4602      	mov	r2, r0
 8001422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi ((char *) buffer+j);
 8001428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800142a:	f107 0208 	add.w	r2, r7, #8
 800142e:	4413      	add	r3, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f003 f9d7 	bl	80047e4 <atoi>
 8001436:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001438:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001448:	f7fe ffdc 	bl	8000404 <__aeabi_i2d>
 800144c:	4680      	mov	r8, r0
 800144e:	4689      	mov	r9, r1
 8001450:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001452:	f7fe ffd7 	bl	8000404 <__aeabi_i2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	4918      	ldr	r1, [pc, #96]	@ (80014c0 <decodeRMC+0x25c>)
 8001460:	f006 f8a2 	bl	80075a8 <pow>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7ff f95e 	bl	800072c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe fe78 	bl	800016c <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb00 	bl	8000a88 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e003      	b.n	800149c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <decodeRMC+0x258>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <decodeRMC+0x258>)
 80014a4:	6013      	str	r3, [r2, #0]
	i=0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	220c      	movs	r2, #12
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 ff9f 	bl	80053f6 <memset>
	while (RMCbuffer[inx] != ',')
 80014b8:	e018      	b.n	80014ec <decodeRMC+0x288>
 80014ba:	bf00      	nop
 80014bc:	200001f8 	.word	0x200001f8
 80014c0:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80014c4:	4b7b      	ldr	r3, [pc, #492]	@ (80016b4 <decodeRMC+0x450>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	7819      	ldrb	r1, [r3, #0]
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
		i++;
 80014dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014de:	3301      	adds	r3, #1
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80014e2:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <decodeRMC+0x450>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a72      	ldr	r2, [pc, #456]	@ (80016b4 <decodeRMC+0x450>)
 80014ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80014ec:	4b71      	ldr	r3, [pc, #452]	@ (80016b4 <decodeRMC+0x450>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b2c      	cmp	r3, #44	@ 0x2c
 80014fa:	d1e3      	bne.n	80014c4 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d055      	beq.n	80015b2 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f96a 	bl	80047e4 <atoi>
 8001510:	4603      	mov	r3, r0
 8001512:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001518:	e002      	b.n	8001520 <decodeRMC+0x2bc>
 800151a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800151c:	3301      	adds	r3, #1
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b2e      	cmp	r3, #46	@ 0x2e
 800152c:	d1f5      	bne.n	800151a <decodeRMC+0x2b6>
		j++;
 800152e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001530:	3301      	adds	r3, #1
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer))-j;
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe09 	bl	8000150 <strlen>
 800153e:	4602      	mov	r2, r0
 8001540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001548:	f107 0208 	add.w	r2, r7, #8
 800154c:	4413      	add	r3, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 f948 	bl	80047e4 <atoi>
 8001554:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001556:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff52 	bl	8000404 <__aeabi_i2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	69b8      	ldr	r0, [r7, #24]
 8001566:	f7fe ff4d 	bl	8000404 <__aeabi_i2d>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
 800156e:	69f8      	ldr	r0, [r7, #28]
 8001570:	f7fe ff48 	bl	8000404 <__aeabi_i2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	494e      	ldr	r1, [pc, #312]	@ (80016b8 <decodeRMC+0x454>)
 800157e:	f006 f813 	bl	80075a8 <pow>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4640      	mov	r0, r8
 8001588:	4649      	mov	r1, r9
 800158a:	f7ff f8cf 	bl	800072c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fde9 	bl	800016c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa71 	bl	8000a88 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	e003      	b.n	80015ba <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80015ba:	4b3e      	ldr	r3, [pc, #248]	@ (80016b4 <decodeRMC+0x450>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a3c      	ldr	r2, [pc, #240]	@ (80016b4 <decodeRMC+0x450>)
 80015c2:	6013      	str	r3, [r2, #0]
	i=0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	220c      	movs	r2, #12
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 ff10 	bl	80053f6 <memset>
	while (RMCbuffer[inx] != ',')
 80015d6:	e013      	b.n	8001600 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 80015d8:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <decodeRMC+0x450>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	7819      	ldrb	r1, [r3, #0]
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
		i++;
 80015f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f2:	3301      	adds	r3, #1
 80015f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	@ (80016b4 <decodeRMC+0x450>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a2d      	ldr	r2, [pc, #180]	@ (80016b4 <decodeRMC+0x450>)
 80015fe:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001600:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <decodeRMC+0x450>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b2c      	cmp	r3, #44	@ 0x2c
 800160e:	d1e3      	bne.n	80015d8 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f8e5 	bl	80047e4 <atoi>
 800161a:	4603      	mov	r3, r0
 800161c:	4a27      	ldr	r2, [pc, #156]	@ (80016bc <decodeRMC+0x458>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	1312      	asrs	r2, r2, #12
 8001624:	17db      	asrs	r3, r3, #31
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4a25      	ldr	r2, [pc, #148]	@ (80016c0 <decodeRMC+0x45c>)
 800162a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f003 f8d7 	bl	80047e4 <atoi>
 8001636:	4603      	mov	r3, r0
 8001638:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <decodeRMC+0x460>)
 800163a:	fb82 1203 	smull	r1, r2, r2, r3
 800163e:	1152      	asrs	r2, r2, #5
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <decodeRMC+0x460>)
 8001646:	fb83 1302 	smull	r1, r3, r3, r2
 800164a:	1159      	asrs	r1, r3, #5
 800164c:	17d3      	asrs	r3, r2, #31
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	2164      	movs	r1, #100	@ 0x64
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <decodeRMC+0x464>)
 800165a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f8bf 	bl	80047e4 <atoi>
 8001666:	4602      	mov	r2, r0
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <decodeRMC+0x460>)
 800166a:	fb83 1302 	smull	r1, r3, r3, r2
 800166e:	1159      	asrs	r1, r3, #5
 8001670:	17d3      	asrs	r3, r2, #31
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	2164      	movs	r1, #100	@ 0x64
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <decodeRMC+0x468>)
 800167e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <decodeRMC+0x45c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <decodeRMC+0x46c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <decodeRMC+0x45c>)
 800168c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <decodeRMC+0x45c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <decodeRMC+0x464>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <decodeRMC+0x468>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	609a      	str	r2, [r3, #8]

	return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3740      	adds	r7, #64	@ 0x40
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016b2:	bf00      	nop
 80016b4:	200001f8 	.word	0x200001f8
 80016b8:	40240000 	.word	0x40240000
 80016bc:	68db8bad 	.word	0x68db8bad
 80016c0:	20000204 	.word	0x20000204
 80016c4:	51eb851f 	.word	0x51eb851f
 80016c8:	20000208 	.word	0x20000208
 80016cc:	2000020c 	.word	0x2000020c
 80016d0:	20000210 	.word	0x20000210

080016d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f043 030c 	orr.w	r3, r3, #12
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	f043 030c 	orr.w	r3, r3, #12
 8001706:	b2db      	uxtb	r3, r3
 8001708:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	2364      	movs	r3, #100	@ 0x64
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2304      	movs	r3, #4
 800171e:	214e      	movs	r1, #78	@ 0x4e
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <lcd_send_cmd+0x5c>)
 8001722:	f001 fbc5 	bl	8002eb0 <HAL_I2C_Master_Transmit>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000214 	.word	0x20000214

08001734 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f023 030f 	bic.w	r3, r3, #15
 8001744:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	f043 030d 	orr.w	r3, r3, #13
 8001752:	b2db      	uxtb	r3, r3
 8001754:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	f043 0309 	orr.w	r3, r3, #9
 800175c:	b2db      	uxtb	r3, r3
 800175e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	f043 030d 	orr.w	r3, r3, #13
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	f043 0309 	orr.w	r3, r3, #9
 8001770:	b2db      	uxtb	r3, r3
 8001772:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2364      	movs	r3, #100	@ 0x64
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2304      	movs	r3, #4
 800177e:	214e      	movs	r1, #78	@ 0x4e
 8001780:	4803      	ldr	r0, [pc, #12]	@ (8001790 <lcd_send_data+0x5c>)
 8001782:	f001 fb95 	bl	8002eb0 <HAL_I2C_Master_Transmit>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000214 	.word	0x20000214

08001794 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    switch (row)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <lcd_put_cur+0x18>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <lcd_put_cur+0x22>
 80017aa:	e009      	b.n	80017c0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b2:	603b      	str	r3, [r7, #0]
            break;
 80017b4:	e004      	b.n	80017c0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017bc:	603b      	str	r3, [r7, #0]
            break;
 80017be:	bf00      	nop
    }

    lcd_send_cmd (col);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff85 	bl	80016d4 <lcd_send_cmd>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <lcd_init>:


void lcd_init (void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80017d6:	2032      	movs	r0, #50	@ 0x32
 80017d8:	f000 febe 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017dc:	2030      	movs	r0, #48	@ 0x30
 80017de:	f7ff ff79 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80017e2:	2005      	movs	r0, #5
 80017e4:	f000 feb8 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017e8:	2030      	movs	r0, #48	@ 0x30
 80017ea:	f7ff ff73 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 feb2 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017f4:	2030      	movs	r0, #48	@ 0x30
 80017f6:	f7ff ff6d 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(10);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f000 feac 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001800:	2020      	movs	r0, #32
 8001802:	f7ff ff67 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(10);
 8001806:	200a      	movs	r0, #10
 8001808:	f000 fea6 	bl	8002558 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800180c:	2028      	movs	r0, #40	@ 0x28
 800180e:	f7ff ff61 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fea0 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001818:	2008      	movs	r0, #8
 800181a:	f7ff ff5b 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 fe9a 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff ff55 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 fe94 	bl	8002558 <HAL_Delay>
	HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fe91 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001836:	2006      	movs	r0, #6
 8001838:	f7ff ff4c 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fe8b 	bl	8002558 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001842:	200c      	movs	r0, #12
 8001844:	f7ff ff46 	bl	80016d4 <lcd_send_cmd>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001854:	e006      	b.n	8001864 <lcd_send_string+0x18>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff68 	bl	8001734 <lcd_send_data>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f4      	bne.n	8001856 <lcd_send_string+0xa>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b087      	sub	sp, #28
 800187c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187e:	f000 fe09 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001882:	f000 f901 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001886:	f000 f99d 	bl	8001bc4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800188a:	f000 f971 	bl	8001b70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800188e:	f000 f941 	bl	8001b14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8001892:	f7ff ff9e 	bl	80017d2 <lcd_init>

  Ringbuf_init();
 8001896:	f000 fbc7 	bl	8002028 <Ringbuf_init>
  HAL_Delay (500);
 800189a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800189e:	f000 fe5b 	bl	8002558 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (Wait_for("GGA") == 1)
 80018a2:	4868      	ldr	r0, [pc, #416]	@ (8001a44 <main+0x1cc>)
 80018a4:	f000 fcea 	bl	800227c <Wait_for>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d115      	bne.n	80018da <main+0x62>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 80018ae:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <main+0x1d0>)
 80018b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b4:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", GGA);
 80018b6:	4965      	ldr	r1, [pc, #404]	@ (8001a4c <main+0x1d4>)
 80018b8:	4865      	ldr	r0, [pc, #404]	@ (8001a50 <main+0x1d8>)
 80018ba:	f000 fc5f 	bl	800217c <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 80018be:	4965      	ldr	r1, [pc, #404]	@ (8001a54 <main+0x1dc>)
 80018c0:	4862      	ldr	r0, [pc, #392]	@ (8001a4c <main+0x1d4>)
 80018c2:	f7ff f931 	bl	8000b28 <decodeGGA>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <main+0x5c>
 80018cc:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <main+0x1e0>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e002      	b.n	80018da <main+0x62>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 80018d4:	4b60      	ldr	r3, [pc, #384]	@ (8001a58 <main+0x1e0>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
	  }

	  if (Wait_for("RMC") == 1)
 80018da:	4860      	ldr	r0, [pc, #384]	@ (8001a5c <main+0x1e4>)
 80018dc:	f000 fcce 	bl	800227c <Wait_for>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d115      	bne.n	8001912 <main+0x9a>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 80018e6:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <main+0x1d0>)
 80018e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ec:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", RMC);
 80018ee:	495c      	ldr	r1, [pc, #368]	@ (8001a60 <main+0x1e8>)
 80018f0:	4857      	ldr	r0, [pc, #348]	@ (8001a50 <main+0x1d8>)
 80018f2:	f000 fc43 	bl	800217c <Copy_upto>
		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 80018f6:	495b      	ldr	r1, [pc, #364]	@ (8001a64 <main+0x1ec>)
 80018f8:	4859      	ldr	r0, [pc, #356]	@ (8001a60 <main+0x1e8>)
 80018fa:	f7ff fcb3 	bl	8001264 <decodeRMC>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <main+0x94>
 8001904:	4b58      	ldr	r3, [pc, #352]	@ (8001a68 <main+0x1f0>)
 8001906:	2202      	movs	r2, #2
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e002      	b.n	8001912 <main+0x9a>
		  else flagRMC = 1;  // 1 indicates the data is invalid
 800190c:	4b56      	ldr	r3, [pc, #344]	@ (8001a68 <main+0x1f0>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 8001912:	4b51      	ldr	r3, [pc, #324]	@ (8001a58 <main+0x1e0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b51      	ldr	r3, [pc, #324]	@ (8001a68 <main+0x1f0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d046      	beq.n	80019c4 <main+0x14c>
	  {
		  lcd_put_cur(0, 0);
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff2b 	bl	8001794 <lcd_put_cur>
		  sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 800193e:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <main+0x1dc>)
 8001940:	691c      	ldr	r4, [r3, #16]
 8001942:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <main+0x1dc>)
 8001944:	695d      	ldr	r5, [r3, #20]
 8001946:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <main+0x1dc>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a42      	ldr	r2, [pc, #264]	@ (8001a54 <main+0x1dc>)
 800194c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194e:	4941      	ldr	r1, [pc, #260]	@ (8001a54 <main+0x1dc>)
 8001950:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8001952:	4840      	ldr	r0, [pc, #256]	@ (8001a54 <main+0x1dc>)
 8001954:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8001956:	9003      	str	r0, [sp, #12]
 8001958:	9102      	str	r1, [sp, #8]
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	462b      	mov	r3, r5
 8001960:	4622      	mov	r2, r4
 8001962:	4942      	ldr	r1, [pc, #264]	@ (8001a6c <main+0x1f4>)
 8001964:	4842      	ldr	r0, [pc, #264]	@ (8001a70 <main+0x1f8>)
 8001966:	f003 fce1 	bl	800532c <siprintf>
				  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
				  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
		  lcd_send_string(lcdBuffer);
 800196a:	4841      	ldr	r0, [pc, #260]	@ (8001a70 <main+0x1f8>)
 800196c:	f7ff ff6e 	bl	800184c <lcd_send_string>
		  memset(lcdBuffer, '\0', 50);
 8001970:	2232      	movs	r2, #50	@ 0x32
 8001972:	2100      	movs	r1, #0
 8001974:	483e      	ldr	r0, [pc, #248]	@ (8001a70 <main+0x1f8>)
 8001976:	f003 fd3e 	bl	80053f6 <memset>
		  lcd_put_cur(1, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff ff09 	bl	8001794 <lcd_put_cur>
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001982:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <main+0x1dc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd4e 	bl	8000428 <__aeabi_f2d>
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <main+0x1dc>)
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <main+0x1dc>)
 8001998:	689b      	ldr	r3, [r3, #8]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fd44 	bl	8000428 <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80019a4:	492b      	ldr	r1, [pc, #172]	@ (8001a54 <main+0x1dc>)
 80019a6:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80019a8:	9104      	str	r1, [sp, #16]
 80019aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019ae:	9600      	str	r6, [sp, #0]
 80019b0:	4622      	mov	r2, r4
 80019b2:	462b      	mov	r3, r5
 80019b4:	492f      	ldr	r1, [pc, #188]	@ (8001a74 <main+0x1fc>)
 80019b6:	482e      	ldr	r0, [pc, #184]	@ (8001a70 <main+0x1f8>)
 80019b8:	f003 fcb8 	bl	800532c <siprintf>
		  lcd_send_string(lcdBuffer);
 80019bc:	482c      	ldr	r0, [pc, #176]	@ (8001a70 <main+0x1f8>)
 80019be:	f7ff ff45 	bl	800184c <lcd_send_string>
 80019c2:	e01f      	b.n	8001a04 <main+0x18c>
	  }

	  else if ((flagGGA == 1) | (flagRMC == 1))
 80019c4:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <main+0x1e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <main+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00d      	beq.n	8001a04 <main+0x18c>
	  {
		  // Instead of clearing the display, it's better if we print spaces.
		  // This will avoid the "refreshing" part
		  lcd_put_cur(0, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fed2 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("   NO FIX YET   ");
 80019f0:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <main+0x200>)
 80019f2:	f7ff ff2b 	bl	800184c <lcd_send_string>
		  lcd_put_cur(1, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fecb 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("   Please wait  ");
 80019fe:	481f      	ldr	r0, [pc, #124]	@ (8001a7c <main+0x204>)
 8001a00:	f7ff ff24 	bl	800184c <lcd_send_string>
	  }

	  if (VCCTimeout <= 0)
 8001a04:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <main+0x1d0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f73f af4a 	bgt.w	80018a2 <main+0x2a>
	  {
		  VCCTimeout = 5000;  // Reset the timeout
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <main+0x1d0>)
 8001a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a14:	601a      	str	r2, [r3, #0]

		  //reset flags
		  flagGGA =flagRMC =0;
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <main+0x1f0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <main+0x1f0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <main+0x1e0>)
 8001a22:	6013      	str	r3, [r2, #0]

		  // You are here means the VCC is less, or maybe there is some connection issue
		  // Check the VCC, also you can try connecting to the external 5V

		  lcd_put_cur(0, 0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff feb4 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("    VCC Issue   ");
 8001a2c:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <main+0x208>)
 8001a2e:	f7ff ff0d 	bl	800184c <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fead 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("Check Connection");
 8001a3a:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <main+0x20c>)
 8001a3c:	f7ff ff06 	bl	800184c <lcd_send_string>
	  if (Wait_for("GGA") == 1)
 8001a40:	e72f      	b.n	80018a2 <main+0x2a>
 8001a42:	bf00      	nop
 8001a44:	080083d8 	.word	0x080083d8
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	200002b0 	.word	0x200002b0
 8001a50:	080083dc 	.word	0x080083dc
 8001a54:	20000378 	.word	0x20000378
 8001a58:	200003bc 	.word	0x200003bc
 8001a5c:	080083e0 	.word	0x080083e0
 8001a60:	20000314 	.word	0x20000314
 8001a64:	200003a4 	.word	0x200003a4
 8001a68:	200003c0 	.word	0x200003c0
 8001a6c:	080083e4 	.word	0x080083e4
 8001a70:	200003c4 	.word	0x200003c4
 8001a74:	08008404 	.word	0x08008404
 8001a78:	08008418 	.word	0x08008418
 8001a7c:	0800842c 	.word	0x0800842c
 8001a80:	08008440 	.word	0x08008440
 8001a84:	08008454 	.word	0x08008454

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	@ 0x40
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2228      	movs	r2, #40	@ 0x28
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fcad 	bl	80053f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ac6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fd45 	bl	8003560 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 f8a0 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 ffb2 	bl	8003a64 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b06:	f000 f88b 	bl	8001c20 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	@ 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f001 f869 	bl	8002c28 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 f860 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000214 	.word	0x20000214
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <MX_USART1_UART_Init+0x50>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b09      	ldr	r3, [pc, #36]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001ba8:	f002 f8ea 	bl	8003d80 <HAL_UART_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bb2:	f000 f835 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000268 	.word	0x20000268
 8001bc0:	40013800 	.word	0x40013800

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a07      	ldr	r2, [pc, #28]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <MX_GPIO_Init+0x58>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <Error_Handler+0x8>

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6193      	str	r3, [r2, #24]
 8001c3e:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_MspInit+0x5c>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_MspInit+0x60>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_MspInit+0x60>)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000

08001c90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d20 <HAL_I2C_MspInit+0x90>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d132      	bne.n	8001d16 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4812      	ldr	r0, [pc, #72]	@ (8001d28 <HAL_I2C_MspInit+0x98>)
 8001cde:	f000 fe1f 	bl	8002920 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_I2C_MspInit+0x9c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d2c <HAL_I2C_MspInit+0x9c>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a08      	ldr	r2, [pc, #32]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	@ 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40010000 	.word	0x40010000

08001d30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a26      	ldr	r2, [pc, #152]	@ (8001de4 <HAL_UART_MspInit+0xb4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d145      	bne.n	8001ddc <HAL_UART_MspInit+0xac>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a24      	ldr	r2, [pc, #144]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b22      	ldr	r3, [pc, #136]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d80:	2340      	movs	r3, #64	@ 0x40
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4816      	ldr	r0, [pc, #88]	@ (8001dec <HAL_UART_MspInit+0xbc>)
 8001d94:	f000 fdc4 	bl	8002920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4810      	ldr	r0, [pc, #64]	@ (8001dec <HAL_UART_MspInit+0xbc>)
 8001dac:	f000 fdb8 	bl	8002920 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_UART_MspInit+0xc0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <HAL_UART_MspInit+0xc0>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2025      	movs	r0, #37	@ 0x25
 8001dd2:	f000 fcbc 	bl	800274e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd6:	2025      	movs	r0, #37	@ 0x25
 8001dd8:	f000 fcd5 	bl	8002786 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010000 	.word	0x40010000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <NMI_Handler+0x4>

08001dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <SysTick_Handler+0x38>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <SysTick_Handler+0x1c>
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <SysTick_Handler+0x38>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <SysTick_Handler+0x38>)
 8001e5a:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <SysTick_Handler+0x3c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	dd04      	ble.n	8001e6e <SysTick_Handler+0x2e>
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <SysTick_Handler+0x3c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <SysTick_Handler+0x3c>)
 8001e6c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6e:	f000 fb57 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200003fc 	.word	0x200003fc
 8001e7c:	20000004 	.word	0x20000004

08001e80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <USART1_IRQHandler+0x14>)
 8001e86:	f000 fa81 	bl	800238c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e8a:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <USART1_IRQHandler+0x14>)
 8001e8c:	f001 ffc8 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000268 	.word	0x20000268

08001e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
	return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <_kill>:

int _kill(int pid, int sig)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eb0:	f003 faf4 	bl	800549c <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2216      	movs	r2, #22
 8001eb8:	601a      	str	r2, [r3, #0]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_exit>:

void _exit (int status)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffe7 	bl	8001ea6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <_exit+0x12>

08001edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e00a      	b.n	8001f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eee:	f3af 8000 	nop.w
 8001ef2:	4601      	mov	r1, r0
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	b2ca      	uxtb	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf0      	blt.n	8001eee <_read+0x12>
	}

return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e009      	b.n	8001f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf1      	blt.n	8001f28 <_write+0x12>
	}
	return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_close>:

int _close(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	return -1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f74:	605a      	str	r2, [r3, #4]
	return 0;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <_isatty>:

int _isatty(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return 1;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
	return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb8:	4a14      	ldr	r2, [pc, #80]	@ (800200c <_sbrk+0x5c>)
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <_sbrk+0x60>)
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc4:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <_sbrk+0x64>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <_sbrk+0x68>)
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d207      	bcs.n	8001ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe0:	f003 fa5c 	bl	800549c <__errno>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	e009      	b.n	8002004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <_sbrk+0x64>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <_sbrk+0x64>)
 8002000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20005000 	.word	0x20005000
 8002010:	00000400 	.word	0x00000400
 8002014:	200003f8 	.word	0x200003f8
 8002018:	20000968 	.word	0x20000968

0800201c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <Ringbuf_init+0x38>)
 800202e:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <Ringbuf_init+0x3c>)
 8002030:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <Ringbuf_init+0x40>)
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <Ringbuf_init+0x44>)
 8002036:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002038:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <Ringbuf_init+0x48>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <Ringbuf_init+0x48>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <Ringbuf_init+0x48>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <Ringbuf_init+0x48>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0220 	orr.w	r2, r2, #32
 8002056:	60da      	str	r2, [r3, #12]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000810 	.word	0x20000810
 8002064:	20000400 	.word	0x20000400
 8002068:	20000814 	.word	0x20000814
 800206c:	20000608 	.word	0x20000608
 8002070:	20000268 	.word	0x20000268

08002074 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	429a      	cmp	r2, r3
 8002098:	d009      	beq.n	80020ae <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	79f9      	ldrb	r1, [r7, #7]
 80020a4:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <Uart_read+0x54>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <Uart_read+0x54>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d102      	bne.n	80020d8 <Uart_read+0x20>
  {
    return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e013      	b.n	8002100 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <Uart_read+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <Uart_read+0x54>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <Uart_read+0x54>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <Uart_read+0x54>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 80020fe:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000810 	.word	0x20000810

08002110 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <IsDataAvailable+0x30>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <IsDataAvailable+0x30>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002126:	b29b      	uxth	r3, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b29b      	uxth	r3, r3
 800212c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002130:	b29b      	uxth	r3, r3
 8002132:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000810 	.word	0x20000810

08002144 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <Uart_peek+0x34>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002150:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <Uart_peek+0x34>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002158:	429a      	cmp	r2, r3
 800215a:	d102      	bne.n	8002162 <Uart_peek+0x1e>
  {
    return -1;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	e006      	b.n	8002170 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <Uart_peek+0x34>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <Uart_peek+0x34>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800216e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr
 8002178:	20000810 	.word	0x20000810

0800217c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fd ffe0 	bl	8000150 <strlen>
 8002190:	4603      	mov	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002198:	e01e      	b.n	80021d8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800219a:	4b36      	ldr	r3, [pc, #216]	@ (8002274 <Copy_upto+0xf8>)
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <Copy_upto+0xf8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	4403      	add	r3, r0
 80021ac:	5c8a      	ldrb	r2, [r1, r2]
 80021ae:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <Copy_upto+0xf8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <Copy_upto+0xf8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	3301      	adds	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80021cc:	bf00      	nop
 80021ce:	f7ff ff9f 	bl	8002110 <IsDataAvailable>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0fa      	beq.n	80021ce <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80021d8:	f7ff ffb4 	bl	8002144 <Uart_peek>
 80021dc:	4601      	mov	r1, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4299      	cmp	r1, r3
 80021e8:	d1d7      	bne.n	800219a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80021ea:	e027      	b.n	800223c <Copy_upto+0xc0>
	{
		so_far++;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80021f2:	f7ff ff61 	bl	80020b8 <Uart_read>
 80021f6:	4601      	mov	r1, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	613a      	str	r2, [r7, #16]
 80021fe:	461a      	mov	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	b2ca      	uxtb	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d101      	bne.n	8002214 <Copy_upto+0x98>
 8002210:	2301      	movs	r3, #1
 8002212:	e02a      	b.n	800226a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <Copy_upto+0xfc>)
 8002216:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800221a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800221c:	bf00      	nop
 800221e:	f7ff ff77 	bl	8002110 <IsDataAvailable>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <Copy_upto+0xb4>
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <Copy_upto+0xfc>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f6      	bne.n	800221e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <Copy_upto+0xfc>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <Copy_upto+0xc0>
 8002238:	2300      	movs	r3, #0
 800223a:	e016      	b.n	800226a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800223c:	f7ff ff82 	bl	8002144 <Uart_peek>
 8002240:	4601      	mov	r1, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4299      	cmp	r1, r3
 800224c:	d0ce      	beq.n	80021ec <Copy_upto+0x70>
	}

	if (so_far != len)
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	429a      	cmp	r2, r3
 8002254:	d002      	beq.n	800225c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
		goto again;
 800225a:	e79d      	b.n	8002198 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d101      	bne.n	8002268 <Copy_upto+0xec>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <Copy_upto+0xee>
	else return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000810 	.word	0x20000810
 8002278:	200003fc 	.word	0x200003fc

0800227c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fd ff61 	bl	8000150 <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <Wait_for+0x108>)
 8002294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002298:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800229a:	bf00      	nop
 800229c:	f7ff ff38 	bl	8002110 <IsDataAvailable>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <Wait_for+0x32>
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <Wait_for+0x108>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f6      	bne.n	800229c <Wait_for+0x20>
	if (timeout == 0) return 0;
 80022ae:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <Wait_for+0x108>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d119      	bne.n	80022ea <Wait_for+0x6e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	e060      	b.n	800237c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80022ba:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <Wait_for+0x10c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022c2:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <Wait_for+0x10c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d00b      	beq.n	80022e6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80022ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <Wait_for+0x10c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <Wait_for+0x10c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80022e4:	e001      	b.n	80022ea <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e048      	b.n	800237c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80022ea:	f7ff ff2b 	bl	8002144 <Uart_peek>
 80022ee:	4601      	mov	r1, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4299      	cmp	r1, r3
 80022fa:	d1de      	bne.n	80022ba <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80022fc:	e027      	b.n	800234e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8002304:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <Wait_for+0x10c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <Wait_for+0x10c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002316:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d101      	bne.n	8002326 <Wait_for+0xaa>
 8002322:	2301      	movs	r3, #1
 8002324:	e02a      	b.n	800237c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002326:	4b17      	ldr	r3, [pc, #92]	@ (8002384 <Wait_for+0x108>)
 8002328:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800232c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800232e:	bf00      	nop
 8002330:	f7ff feee 	bl	8002110 <IsDataAvailable>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <Wait_for+0xc6>
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <Wait_for+0x108>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f6      	bne.n	8002330 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <Wait_for+0x108>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <Wait_for+0xd2>
 800234a:	2300      	movs	r3, #0
 800234c:	e016      	b.n	800237c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800234e:	f7ff fef9 	bl	8002144 <Uart_peek>
 8002352:	4601      	mov	r1, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4299      	cmp	r1, r3
 800235e:	d0ce      	beq.n	80022fe <Wait_for+0x82>
	}

	if (so_far != len)
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d002      	beq.n	800236e <Wait_for+0xf2>
	{
		so_far = 0;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
		goto again;
 800236c:	e791      	b.n	8002292 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d101      	bne.n	800237a <Wait_for+0xfe>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <Wait_for+0x100>
	else return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200003fc 	.word	0x200003fc
 8002388:	20000810 	.word	0x20000810

0800238c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d013      	beq.n	80023d6 <Uart_isr+0x4a>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <Uart_isr+0xb4>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fe50 	bl	8002074 <store_char>
        return;
 80023d4:	e031      	b.n	800243a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02c      	beq.n	800243a <Uart_isr+0xae>
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d027      	beq.n	800243a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <Uart_isr+0xb8>)
 80023ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <Uart_isr+0xb8>)
 80023f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d108      	bne.n	800240c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002408:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800240a:	e015      	b.n	8002438 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <Uart_isr+0xb8>)
 800240e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002412:	4a0c      	ldr	r2, [pc, #48]	@ (8002444 <Uart_isr+0xb8>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <Uart_isr+0xb8>)
 800241a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <Uart_isr+0xb8>)
 8002426:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	7bba      	ldrb	r2, [r7, #14]
 8002436:	605a      	str	r2, [r3, #4]
    	return;
 8002438:	bf00      	nop
    }
}
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000810 	.word	0x20000810
 8002444:	20000608 	.word	0x20000608

08002448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	@ (800247c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	@ (8002480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	@ (8002488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	@ (800248c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800246e:	f7ff fdd5 	bl	800201c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f003 f819 	bl	80054a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002476:	f7ff f9ff 	bl	8001878 <main>
  bx lr
 800247a:	4770      	bx	lr
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002484:	08008850 	.word	0x08008850
  ldr r2, =_sbss
 8002488:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800248c:	20000968 	.word	0x20000968

08002490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC1_2_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_Init+0x28>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_Init+0x28>)
 800249e:	f043 0310 	orr.w	r3, r3, #16
 80024a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 f947 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	200f      	movs	r0, #15
 80024ac:	f000 f808 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b0:	f7ff fbbc 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f95f 	bl	80027a2 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 f927 	bl	800274e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	@ (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000008 	.word	0x20000008
 8002518:	20000010 	.word	0x20000010
 800251c:	2000000c 	.word	0x2000000c

08002520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_IncTick+0x1c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_IncTick+0x20>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a03      	ldr	r2, [pc, #12]	@ (8002540 <HAL_IncTick+0x20>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000010 	.word	0x20000010
 8002540:	20000818 	.word	0x20000818

08002544 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b02      	ldr	r3, [pc, #8]	@ (8002554 <HAL_GetTick+0x10>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000818 	.word	0x20000818

08002558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f7ff fff0 	bl	8002544 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d005      	beq.n	800257e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_Delay+0x44>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800257e:	bf00      	nop
 8002580:	f7ff ffe0 	bl	8002544 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d8f7      	bhi.n	8002580 <HAL_Delay+0x28>
  {
  }
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000010 	.word	0x20000010

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	@ (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4906      	ldr	r1, [pc, #24]	@ (8002638 <__NVIC_EnableIRQ+0x34>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	@ (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	@ (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	@ 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff90 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff2d 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff42 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff90 	bl	8002690 <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5f 	bl	800263c <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff35 	bl	8002604 <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d008      	beq.n	80027e4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e020      	b.n	8002826 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 020e 	bic.w	r2, r2, #14
 80027f2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d005      	beq.n	8002854 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2204      	movs	r2, #4
 800284c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e051      	b.n	80028f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 020e 	bic.w	r2, r2, #14
 8002862:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <HAL_DMA_Abort_IT+0xd4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d029      	beq.n	80028d2 <HAL_DMA_Abort_IT+0xa2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a21      	ldr	r2, [pc, #132]	@ (8002908 <HAL_DMA_Abort_IT+0xd8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMA_Abort_IT+0x9e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1f      	ldr	r2, [pc, #124]	@ (800290c <HAL_DMA_Abort_IT+0xdc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01a      	beq.n	80028c8 <HAL_DMA_Abort_IT+0x98>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1e      	ldr	r2, [pc, #120]	@ (8002910 <HAL_DMA_Abort_IT+0xe0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d012      	beq.n	80028c2 <HAL_DMA_Abort_IT+0x92>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_DMA_Abort_IT+0xe4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00a      	beq.n	80028bc <HAL_DMA_Abort_IT+0x8c>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <HAL_DMA_Abort_IT+0xe8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_DMA_Abort_IT+0x86>
 80028b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028b4:	e00e      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028ba:	e00b      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028c0:	e008      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c6:	e005      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028cc:	e002      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028ce:	2310      	movs	r3, #16
 80028d0:	e000      	b.n	80028d4 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	2301      	movs	r3, #1
 80028d4:	4a11      	ldr	r2, [pc, #68]	@ (800291c <HAL_DMA_Abort_IT+0xec>)
 80028d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	4798      	blx	r3
    } 
  }
  return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40020008 	.word	0x40020008
 8002908:	4002001c 	.word	0x4002001c
 800290c:	40020030 	.word	0x40020030
 8002910:	40020044 	.word	0x40020044
 8002914:	40020058 	.word	0x40020058
 8002918:	4002006c 	.word	0x4002006c
 800291c:	40020000 	.word	0x40020000

08002920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002920:	b480      	push	{r7}
 8002922:	b08b      	sub	sp, #44	@ 0x2c
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002932:	e169      	b.n	8002c08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002934:	2201      	movs	r2, #1
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 8158 	bne.w	8002c02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a9a      	ldr	r2, [pc, #616]	@ (8002bc0 <HAL_GPIO_Init+0x2a0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d05e      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
 800295c:	4a98      	ldr	r2, [pc, #608]	@ (8002bc0 <HAL_GPIO_Init+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d875      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 8002962:	4a98      	ldr	r2, [pc, #608]	@ (8002bc4 <HAL_GPIO_Init+0x2a4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d058      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
 8002968:	4a96      	ldr	r2, [pc, #600]	@ (8002bc4 <HAL_GPIO_Init+0x2a4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d86f      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 800296e:	4a96      	ldr	r2, [pc, #600]	@ (8002bc8 <HAL_GPIO_Init+0x2a8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d052      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
 8002974:	4a94      	ldr	r2, [pc, #592]	@ (8002bc8 <HAL_GPIO_Init+0x2a8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d869      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 800297a:	4a94      	ldr	r2, [pc, #592]	@ (8002bcc <HAL_GPIO_Init+0x2ac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d04c      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
 8002980:	4a92      	ldr	r2, [pc, #584]	@ (8002bcc <HAL_GPIO_Init+0x2ac>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d863      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 8002986:	4a92      	ldr	r2, [pc, #584]	@ (8002bd0 <HAL_GPIO_Init+0x2b0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d046      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
 800298c:	4a90      	ldr	r2, [pc, #576]	@ (8002bd0 <HAL_GPIO_Init+0x2b0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d85d      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 8002992:	2b12      	cmp	r3, #18
 8002994:	d82a      	bhi.n	80029ec <HAL_GPIO_Init+0xcc>
 8002996:	2b12      	cmp	r3, #18
 8002998:	d859      	bhi.n	8002a4e <HAL_GPIO_Init+0x12e>
 800299a:	a201      	add	r2, pc, #4	@ (adr r2, 80029a0 <HAL_GPIO_Init+0x80>)
 800299c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a0:	08002a1b 	.word	0x08002a1b
 80029a4:	080029f5 	.word	0x080029f5
 80029a8:	08002a07 	.word	0x08002a07
 80029ac:	08002a49 	.word	0x08002a49
 80029b0:	08002a4f 	.word	0x08002a4f
 80029b4:	08002a4f 	.word	0x08002a4f
 80029b8:	08002a4f 	.word	0x08002a4f
 80029bc:	08002a4f 	.word	0x08002a4f
 80029c0:	08002a4f 	.word	0x08002a4f
 80029c4:	08002a4f 	.word	0x08002a4f
 80029c8:	08002a4f 	.word	0x08002a4f
 80029cc:	08002a4f 	.word	0x08002a4f
 80029d0:	08002a4f 	.word	0x08002a4f
 80029d4:	08002a4f 	.word	0x08002a4f
 80029d8:	08002a4f 	.word	0x08002a4f
 80029dc:	08002a4f 	.word	0x08002a4f
 80029e0:	08002a4f 	.word	0x08002a4f
 80029e4:	080029fd 	.word	0x080029fd
 80029e8:	08002a11 	.word	0x08002a11
 80029ec:	4a79      	ldr	r2, [pc, #484]	@ (8002bd4 <HAL_GPIO_Init+0x2b4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029f2:	e02c      	b.n	8002a4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	623b      	str	r3, [r7, #32]
          break;
 80029fa:	e029      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	3304      	adds	r3, #4
 8002a02:	623b      	str	r3, [r7, #32]
          break;
 8002a04:	e024      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	623b      	str	r3, [r7, #32]
          break;
 8002a0e:	e01f      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	330c      	adds	r3, #12
 8002a16:	623b      	str	r3, [r7, #32]
          break;
 8002a18:	e01a      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a22:	2304      	movs	r3, #4
 8002a24:	623b      	str	r3, [r7, #32]
          break;
 8002a26:	e013      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d105      	bne.n	8002a3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a30:	2308      	movs	r3, #8
 8002a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	611a      	str	r2, [r3, #16]
          break;
 8002a3a:	e009      	b.n	8002a50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69fa      	ldr	r2, [r7, #28]
 8002a44:	615a      	str	r2, [r3, #20]
          break;
 8002a46:	e003      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
          break;
 8002a4c:	e000      	b.n	8002a50 <HAL_GPIO_Init+0x130>
          break;
 8002a4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2bff      	cmp	r3, #255	@ 0xff
 8002a54:	d801      	bhi.n	8002a5a <HAL_GPIO_Init+0x13a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e001      	b.n	8002a5e <HAL_GPIO_Init+0x13e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2bff      	cmp	r3, #255	@ 0xff
 8002a64:	d802      	bhi.n	8002a6c <HAL_GPIO_Init+0x14c>
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x152>
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	3b08      	subs	r3, #8
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	210f      	movs	r1, #15
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	401a      	ands	r2, r3
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80b1 	beq.w	8002c02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd8 <HAL_GPIO_Init+0x2b8>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ab8:	4a48      	ldr	r2, [pc, #288]	@ (8002bdc <HAL_GPIO_Init+0x2bc>)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	220f      	movs	r2, #15
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a40      	ldr	r2, [pc, #256]	@ (8002be0 <HAL_GPIO_Init+0x2c0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_GPIO_Init+0x1ec>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8002be4 <HAL_GPIO_Init+0x2c4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00d      	beq.n	8002b08 <HAL_GPIO_Init+0x1e8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3e      	ldr	r2, [pc, #248]	@ (8002be8 <HAL_GPIO_Init+0x2c8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_GPIO_Init+0x1e4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3d      	ldr	r2, [pc, #244]	@ (8002bec <HAL_GPIO_Init+0x2cc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_GPIO_Init+0x1e0>
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e004      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e002      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_GPIO_Init+0x1ee>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b10:	f002 0203 	and.w	r2, r2, #3
 8002b14:	0092      	lsls	r2, r2, #2
 8002b16:	4093      	lsls	r3, r2
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b1e:	492f      	ldr	r1, [pc, #188]	@ (8002bdc <HAL_GPIO_Init+0x2bc>)
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b38:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	492c      	ldr	r1, [pc, #176]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b46:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4928      	ldr	r1, [pc, #160]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b60:	4b23      	ldr	r3, [pc, #140]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4922      	ldr	r1, [pc, #136]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60cb      	str	r3, [r1, #12]
 8002b6c:	e006      	b.n	8002b7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b6e:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	491e      	ldr	r1, [pc, #120]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d006      	beq.n	8002b96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b88:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4918      	ldr	r1, [pc, #96]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4914      	ldr	r1, [pc, #80]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d021      	beq.n	8002bf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	490e      	ldr	r1, [pc, #56]	@ (8002bf0 <HAL_GPIO_Init+0x2d0>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e021      	b.n	8002c02 <HAL_GPIO_Init+0x2e2>
 8002bbe:	bf00      	nop
 8002bc0:	10320000 	.word	0x10320000
 8002bc4:	10310000 	.word	0x10310000
 8002bc8:	10220000 	.word	0x10220000
 8002bcc:	10210000 	.word	0x10210000
 8002bd0:	10120000 	.word	0x10120000
 8002bd4:	10110000 	.word	0x10110000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40010800 	.word	0x40010800
 8002be4:	40010c00 	.word	0x40010c00
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_GPIO_Init+0x304>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	4909      	ldr	r1, [pc, #36]	@ (8002c24 <HAL_GPIO_Init+0x304>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	3301      	adds	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f47f ae8e 	bne.w	8002934 <HAL_GPIO_Init+0x14>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	372c      	adds	r7, #44	@ 0x2c
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40010400 	.word	0x40010400

08002c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e12b      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f81e 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	@ 0x24
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c8c:	f001 f832 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4a81      	ldr	r2, [pc, #516]	@ (8002e9c <HAL_I2C_Init+0x274>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d807      	bhi.n	8002cac <HAL_I2C_Init+0x84>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a80      	ldr	r2, [pc, #512]	@ (8002ea0 <HAL_I2C_Init+0x278>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	bf94      	ite	ls
 8002ca4:	2301      	movls	r3, #1
 8002ca6:	2300      	movhi	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e006      	b.n	8002cba <HAL_I2C_Init+0x92>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea4 <HAL_I2C_Init+0x27c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0e7      	b.n	8002e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a78      	ldr	r2, [pc, #480]	@ (8002ea8 <HAL_I2C_Init+0x280>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0c9b      	lsrs	r3, r3, #18
 8002ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e9c <HAL_I2C_Init+0x274>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d802      	bhi.n	8002cfc <HAL_I2C_Init+0xd4>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	e009      	b.n	8002d10 <HAL_I2C_Init+0xe8>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d02:	fb02 f303 	mul.w	r3, r2, r3
 8002d06:	4a69      	ldr	r2, [pc, #420]	@ (8002eac <HAL_I2C_Init+0x284>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	3301      	adds	r3, #1
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	495c      	ldr	r1, [pc, #368]	@ (8002e9c <HAL_I2C_Init+0x274>)
 8002d2c:	428b      	cmp	r3, r1
 8002d2e:	d819      	bhi.n	8002d64 <HAL_I2C_Init+0x13c>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e59      	subs	r1, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3e:	1c59      	adds	r1, r3, #1
 8002d40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d44:	400b      	ands	r3, r1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_I2C_Init+0x138>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e59      	subs	r1, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	e051      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d60:	2304      	movs	r3, #4
 8002d62:	e04f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_I2C_Init+0x168>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1e58      	subs	r0, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6859      	ldr	r1, [r3, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e012      	b.n	8002db6 <HAL_I2C_Init+0x18e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x196>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_I2C_Init+0x1bc>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e58      	subs	r0, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	440b      	add	r3, r1
 8002dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Init+0x1dc>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e58      	subs	r0, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	0099      	lsls	r1, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	6809      	ldr	r1, [r1, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6911      	ldr	r1, [r2, #16]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	000186a0 	.word	0x000186a0
 8002ea0:	001e847f 	.word	0x001e847f
 8002ea4:	003d08ff 	.word	0x003d08ff
 8002ea8:	431bde83 	.word	0x431bde83
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff fb3e 	bl	8002544 <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	f040 80e0 	bne.w	8003098 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2319      	movs	r3, #25
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4970      	ldr	r1, [pc, #448]	@ (80030a4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f964 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0d3      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_I2C_Master_Transmit+0x50>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0cc      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d007      	beq.n	8002f26 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f34:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2221      	movs	r2, #33	@ 0x21
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2210      	movs	r2, #16
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	893a      	ldrh	r2, [r7, #8]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a50      	ldr	r2, [pc, #320]	@ (80030a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f89c 	bl	80030ac <I2C_MasterRequestWrite>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e08d      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f94:	e066      	b.n	8003064 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa22 	bl	80033e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06b      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11b      	bne.n	8003038 <HAL_I2C_Master_Transmit+0x188>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d017      	beq.n	8003038 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	781a      	ldrb	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6a39      	ldr	r1, [r7, #32]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fa19 	bl	8003474 <I2C_WaitOnBTFFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	2b04      	cmp	r3, #4
 800304e:	d107      	bne.n	8003060 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e01a      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d194      	bne.n	8002f96 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	00100002 	.word	0x00100002
 80030a8:	ffff0000 	.word	0xffff0000

080030ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	460b      	mov	r3, r1
 80030ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d006      	beq.n	80030d6 <I2C_MasterRequestWrite+0x2a>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d003      	beq.n	80030d6 <I2C_MasterRequestWrite+0x2a>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d4:	d108      	bne.n	80030e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00b      	b.n	8003100 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d107      	bne.n	8003100 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f84f 	bl	80031b0 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003126:	d103      	bne.n	8003130 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e035      	b.n	80031a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313c:	d108      	bne.n	8003150 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800314c:	611a      	str	r2, [r3, #16]
 800314e:	e01b      	b.n	8003188 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003150:	897b      	ldrh	r3, [r7, #10]
 8003152:	11db      	asrs	r3, r3, #7
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f003 0306 	and.w	r3, r3, #6
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f063 030f 	orn	r3, r3, #15
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	490e      	ldr	r1, [pc, #56]	@ (80031a8 <I2C_MasterRequestWrite+0xfc>)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f898 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e010      	b.n	80031a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4907      	ldr	r1, [pc, #28]	@ (80031ac <I2C_MasterRequestWrite+0x100>)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f888 	bl	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	00010008 	.word	0x00010008
 80031ac:	00010002 	.word	0x00010002

080031b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c0:	e048      	b.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d044      	beq.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7ff f9bb 	bl	8002544 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d139      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	e00c      	b.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	43da      	mvns	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4013      	ands	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	79fb      	ldrb	r3, [r7, #7]
 8003222:	429a      	cmp	r2, r3
 8003224:	d116      	bne.n	8003254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e023      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0c1b      	lsrs	r3, r3, #16
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10d      	bne.n	800327a <I2C_WaitOnFlagUntilTimeout+0xca>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	43da      	mvns	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	b29b      	uxth	r3, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	e00c      	b.n	8003294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	43da      	mvns	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	d093      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b2:	e071      	b.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c2:	d123      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e067      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003312:	d041      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003314:	f7ff f916 	bl	8002544 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d136      	bne.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10c      	bne.n	800334e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e00b      	b.n	8003366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e021      	b.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10c      	bne.n	80033bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	43da      	mvns	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e00b      	b.n	80033d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f af6d 	bne.w	80032b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f0:	e034      	b.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f886 	bl	8003504 <I2C_IsAcknowledgeFailed>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e034      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d028      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7ff f89b 	bl	8002544 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342a:	2b80      	cmp	r3, #128	@ 0x80
 800342c:	d016      	beq.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f043 0220 	orr.w	r2, r3, #32
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e007      	b.n	800346c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d1c3      	bne.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003480:	e034      	b.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f83e 	bl	8003504 <I2C_IsAcknowledgeFailed>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e034      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d028      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7ff f853 	bl	8002544 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11d      	bne.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d016      	beq.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e007      	b.n	80034fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d1c3      	bne.n	8003482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800351a:	d11b      	bne.n	8003554 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003524:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0204 	orr.w	r2, r3, #4
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e272      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4b92      	ldr	r3, [pc, #584]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4b8f      	ldr	r3, [pc, #572]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d112      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
 8003598:	4b8c      	ldr	r3, [pc, #560]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035a4:	d10b      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <HAL_RCC_OscConfig+0x12c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e24c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x76>
 80035c8:	4b80      	ldr	r3, [pc, #512]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7f      	ldr	r2, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e02e      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b7b      	ldr	r3, [pc, #492]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7a      	ldr	r2, [pc, #488]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b78      	ldr	r3, [pc, #480]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a77      	ldr	r2, [pc, #476]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xbc>
 8003602:	4b72      	ldr	r3, [pc, #456]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a71      	ldr	r2, [pc, #452]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6f      	ldr	r3, [pc, #444]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 800361c:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a67      	ldr	r2, [pc, #412]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe ff82 	bl	8002544 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe ff7e 	bl	8002544 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	@ 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e200      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5d      	ldr	r3, [pc, #372]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xe4>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe ff6e 	bl	8002544 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe ff6a 	bl	8002544 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1ec      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b53      	ldr	r3, [pc, #332]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x10c>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	4b4c      	ldr	r3, [pc, #304]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036a6:	4b49      	ldr	r3, [pc, #292]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
 80036b2:	4b46      	ldr	r3, [pc, #280]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b43      	ldr	r3, [pc, #268]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c0      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4939      	ldr	r1, [pc, #228]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe ff23 	bl	8002544 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe ff1f 	bl	8002544 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4927      	ldr	r1, [pc, #156]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe ff02 	bl	8002544 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe fefe 	bl	8002544 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e180      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d019      	beq.n	80037aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b17      	ldr	r3, [pc, #92]	@ (80037d4 <HAL_RCC_OscConfig+0x274>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fee2 	bl	8002544 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fede 	bl	8002544 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e160      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 face 	bl	8003d44 <RCC_Delay>
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7fe fec8 	bl	8002544 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe fec4 	bl	8002544 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d908      	bls.n	80037d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e146      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	42420000 	.word	0x42420000
 80037d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b92      	ldr	r3, [pc, #584]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e9      	bne.n	80037b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a6 	beq.w	800393e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4a87      	ldr	r2, [pc, #540]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380c:	61d3      	str	r3, [r2, #28]
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b82      	ldr	r3, [pc, #520]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fe85 	bl	8002544 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fe81 	bl	8002544 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	@ 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e103      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x312>
 8003864:	4b6f      	ldr	r3, [pc, #444]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6e      	ldr	r2, [pc, #440]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e02d      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x334>
 800387a:	4b6a      	ldr	r3, [pc, #424]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a69      	ldr	r2, [pc, #420]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b67      	ldr	r3, [pc, #412]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a66      	ldr	r2, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	e01c      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x356>
 800389c:	4b61      	ldr	r3, [pc, #388]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a60      	ldr	r2, [pc, #384]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 80038b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	4b58      	ldr	r3, [pc, #352]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a57      	ldr	r2, [pc, #348]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fe fe35 	bl	8002544 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fe31 	bl	8002544 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ee      	beq.n	80038de <HAL_RCC_OscConfig+0x37e>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fe fe1f 	bl	8002544 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe fe1b 	bl	8002544 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b40      	ldr	r3, [pc, #256]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ee      	bne.n	800390a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b3c      	ldr	r3, [pc, #240]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a3b      	ldr	r2, [pc, #236]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b36      	ldr	r3, [pc, #216]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d061      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d146      	bne.n	80039ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b33      	ldr	r3, [pc, #204]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fe fdef 	bl	8002544 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe fdeb 	bl	8002544 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e06d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397c:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003992:	4b24      	ldr	r3, [pc, #144]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4921      	ldr	r1, [pc, #132]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a19      	ldr	r1, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	491b      	ldr	r1, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fdbf 	bl	8002544 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe fdbb 	bl	8002544 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x46a>
 80039e8:	e035      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fda8 	bl	8002544 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe fda4 	bl	8002544 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e026      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x498>
 8003a16:	e01e      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e019      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_OscConfig+0x500>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0d0      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b67      	ldr	r3, [pc, #412]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	4965      	ldr	r1, [pc, #404]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d040      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e073      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3d      	ldr	r3, [pc, #244]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4936      	ldr	r1, [pc, #216]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fe fcf6 	bl	8002544 <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fe fcf2 	bl	8002544 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e053      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2d      	ldr	r3, [pc, #180]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b27      	ldr	r3, [pc, #156]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d210      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	4922      	ldr	r1, [pc, #136]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bde:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	@ (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	@ (8003c30 <HAL_RCC_ClockConfig+0x1cc>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	@ (8003c34 <HAL_RCC_ClockConfig+0x1d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fc54 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08008468 	.word	0x08008468
 8003c30:	20000008 	.word	0x20000008
 8003c34:	2000000c 	.word	0x2000000c

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x30>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x36>
 8003c66:	e027      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	e027      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c86:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	4a11      	ldr	r2, [pc, #68]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9a:	fb03 f202 	mul.w	r2, r3, r2
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	613b      	str	r3, [r7, #16]
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	693b      	ldr	r3, [r7, #16]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	007a1200 	.word	0x007a1200
 8003cd4:	08008480 	.word	0x08008480
 8003cd8:	08008490 	.word	0x08008490
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	20000008 	.word	0x20000008

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff2 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08008478 	.word	0x08008478

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffde 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08008478 	.word	0x08008478

08003d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <RCC_Delay+0x34>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <RCC_Delay+0x38>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a5b      	lsrs	r3, r3, #9
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d60:	bf00      	nop
  }
  while (Delay --);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	60fa      	str	r2, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f9      	bne.n	8003d60 <RCC_Delay+0x1c>
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000008 	.word	0x20000008
 8003d7c:	10624dd3 	.word	0x10624dd3

08003d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e042      	b.n	8003e18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd ffc2 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	@ 0x24
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fc7f 	bl	80046c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b0ba      	sub	sp, #232	@ 0xe8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fb63 	bl	800454a <UART_Receive_IT>
      return;
 8003e84:	e25b      	b.n	800433e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80de 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
 8003e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80d1 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
 8003eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d011      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	f043 0208 	orr.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 81f2 	beq.w	8004334 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 faee 	bl	800454a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_UART_IRQHandler+0x17a>
 8003f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04f      	beq.n	800403a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f9f8 	bl	8004390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d041      	beq.n	8004032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1d9      	bne.n	8003fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d013      	beq.n	800402a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	4a7e      	ldr	r2, [pc, #504]	@ (8004200 <HAL_UART_IRQHandler+0x3e0>)
 8004008:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fc0e 	bl	8002830 <HAL_DMA_Abort_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004024:	4610      	mov	r0, r2
 8004026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00e      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f99c 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e00a      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f998 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	e006      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f994 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004046:	e175      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	bf00      	nop
    return;
 800404a:	e173      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 814f 	bne.w	80042f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8148 	beq.w	80042f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8141 	beq.w	80042f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80b6 	beq.w	8004204 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8145 	beq.w	8004338 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f080 813e 	bcs.w	8004338 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	f000 8088 	beq.w	80041e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004108:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1d9      	bne.n	80040d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800412c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004140:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004144:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004148:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e1      	bne.n	800411c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800416a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800416e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800417c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800417e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004182:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800418a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e3      	bne.n	8004158 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b0:	f023 0310 	bic.w	r3, r3, #16
 80041b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe faed 	bl	80027ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f8bf 	bl	800437a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041fc:	e09c      	b.n	8004338 <HAL_UART_IRQHandler+0x518>
 80041fe:	bf00      	nop
 8004200:	08004455 	.word	0x08004455
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 808e 	beq.w	800433c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8089 	beq.w	800433c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800423a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800424e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004250:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004256:	e841 2300 	strex	r3, r2, [r1]
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800425c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e3      	bne.n	800422a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	623b      	str	r3, [r7, #32]
   return(result);
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004286:	633a      	str	r2, [r7, #48]	@ 0x30
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800428c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042cc:	61fa      	str	r2, [r7, #28]
 80042ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	617b      	str	r3, [r7, #20]
   return(result);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f844 	bl	800437a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042f2:	e023      	b.n	800433c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d009      	beq.n	8004314 <HAL_UART_IRQHandler+0x4f4>
 8004300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8b5 	bl	800447c <UART_Transmit_IT>
    return;
 8004312:	e014      	b.n	800433e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00e      	beq.n	800433e <HAL_UART_IRQHandler+0x51e>
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f8f4 	bl	800451a <UART_EndTransmit_IT>
    return;
 8004332:	e004      	b.n	800433e <HAL_UART_IRQHandler+0x51e>
    return;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_UART_IRQHandler+0x51e>
      return;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_UART_IRQHandler+0x51e>
      return;
 800433c:	bf00      	nop
  }
}
 800433e:	37e8      	adds	r7, #232	@ 0xe8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr

08004356 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b095      	sub	sp, #84	@ 0x54
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80043ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3314      	adds	r3, #20
 80043d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	61fb      	str	r3, [r7, #28]
   return(result);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	2b01      	cmp	r3, #1
 8004406:	d119      	bne.n	800443c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	60bb      	str	r3, [r7, #8]
   return(result);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0310 	bic.w	r3, r3, #16
 800441e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004428:	61ba      	str	r2, [r7, #24]
 800442a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	613b      	str	r3, [r7, #16]
   return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800444a:	bf00      	nop
 800444c:	3754      	adds	r7, #84	@ 0x54
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f7ff ff7a 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b21      	cmp	r3, #33	@ 0x21
 800448e:	d13e      	bne.n	800450e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004498:	d114      	bne.n	80044c4 <UART_Transmit_IT+0x48>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d110      	bne.n	80044c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	1c9a      	adds	r2, r3, #2
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	621a      	str	r2, [r3, #32]
 80044c2:	e008      	b.n	80044d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6211      	str	r1, [r2, #32]
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	4619      	mov	r1, r3
 80044e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b082      	sub	sp, #8
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff02 	bl	8004344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b08c      	sub	sp, #48	@ 0x30
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b22      	cmp	r3, #34	@ 0x22
 800455c:	f040 80ae 	bne.w	80046bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004568:	d117      	bne.n	800459a <UART_Receive_IT+0x50>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d113      	bne.n	800459a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	b29b      	uxth	r3, r3
 8004584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004588:	b29a      	uxth	r2, r3
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	@ 0x28
 8004598:	e026      	b.n	80045e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ac:	d007      	beq.n	80045be <UART_Receive_IT+0x74>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <UART_Receive_IT+0x82>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e008      	b.n	80045de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d15d      	bne.n	80046b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0220 	bic.w	r2, r2, #32
 800460a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800461a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	2b01      	cmp	r3, #1
 8004640:	d135      	bne.n	80046ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 0310 	bic.w	r3, r3, #16
 800465e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004668:	623a      	str	r2, [r7, #32]
 800466a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	61bb      	str	r3, [r7, #24]
   return(result);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b10      	cmp	r3, #16
 8004688:	d10a      	bne.n	80046a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fe67 	bl	800437a <HAL_UARTEx_RxEventCallback>
 80046ac:	e002      	b.n	80046b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe51 	bl	8004356 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e002      	b.n	80046be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3730      	adds	r7, #48	@ 0x30
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004702:	f023 030c 	bic.w	r3, r3, #12
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	430b      	orrs	r3, r1
 800470e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2c      	ldr	r2, [pc, #176]	@ (80047dc <UART_SetConfig+0x114>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004730:	f7ff faf4 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	e002      	b.n	800473e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004738:	f7ff fadc 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 800473c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009a      	lsls	r2, r3, #2
 8004748:	441a      	add	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <UART_SetConfig+0x118>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	0119      	lsls	r1, r3, #4
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fbb2 f2f3 	udiv	r2, r2, r3
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <UART_SetConfig+0x118>)
 8004776:	fba3 0302 	umull	r0, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2064      	movs	r0, #100	@ 0x64
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	3332      	adds	r3, #50	@ 0x32
 8004788:	4a15      	ldr	r2, [pc, #84]	@ (80047e0 <UART_SetConfig+0x118>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004794:	4419      	add	r1, r3
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009a      	lsls	r2, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ac:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <UART_SetConfig+0x118>)
 80047ae:	fba3 0302 	umull	r0, r3, r3, r2
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	2064      	movs	r0, #100	@ 0x64
 80047b6:	fb00 f303 	mul.w	r3, r0, r3
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	3332      	adds	r3, #50	@ 0x32
 80047c0:	4a07      	ldr	r2, [pc, #28]	@ (80047e0 <UART_SetConfig+0x118>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	f003 020f 	and.w	r2, r3, #15
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	440a      	add	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40013800 	.word	0x40013800
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <atoi>:
 80047e4:	220a      	movs	r2, #10
 80047e6:	2100      	movs	r1, #0
 80047e8:	f000 b87a 	b.w	80048e0 <strtol>

080047ec <_strtol_l.isra.0>:
 80047ec:	2b24      	cmp	r3, #36	@ 0x24
 80047ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f2:	4686      	mov	lr, r0
 80047f4:	4690      	mov	r8, r2
 80047f6:	d801      	bhi.n	80047fc <_strtol_l.isra.0+0x10>
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d106      	bne.n	800480a <_strtol_l.isra.0+0x1e>
 80047fc:	f000 fe4e 	bl	800549c <__errno>
 8004800:	2316      	movs	r3, #22
 8004802:	6003      	str	r3, [r0, #0]
 8004804:	2000      	movs	r0, #0
 8004806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480a:	460d      	mov	r5, r1
 800480c:	4833      	ldr	r0, [pc, #204]	@ (80048dc <_strtol_l.isra.0+0xf0>)
 800480e:	462a      	mov	r2, r5
 8004810:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004814:	5d06      	ldrb	r6, [r0, r4]
 8004816:	f016 0608 	ands.w	r6, r6, #8
 800481a:	d1f8      	bne.n	800480e <_strtol_l.isra.0+0x22>
 800481c:	2c2d      	cmp	r4, #45	@ 0x2d
 800481e:	d110      	bne.n	8004842 <_strtol_l.isra.0+0x56>
 8004820:	2601      	movs	r6, #1
 8004822:	782c      	ldrb	r4, [r5, #0]
 8004824:	1c95      	adds	r5, r2, #2
 8004826:	f033 0210 	bics.w	r2, r3, #16
 800482a:	d115      	bne.n	8004858 <_strtol_l.isra.0+0x6c>
 800482c:	2c30      	cmp	r4, #48	@ 0x30
 800482e:	d10d      	bne.n	800484c <_strtol_l.isra.0+0x60>
 8004830:	782a      	ldrb	r2, [r5, #0]
 8004832:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004836:	2a58      	cmp	r2, #88	@ 0x58
 8004838:	d108      	bne.n	800484c <_strtol_l.isra.0+0x60>
 800483a:	786c      	ldrb	r4, [r5, #1]
 800483c:	3502      	adds	r5, #2
 800483e:	2310      	movs	r3, #16
 8004840:	e00a      	b.n	8004858 <_strtol_l.isra.0+0x6c>
 8004842:	2c2b      	cmp	r4, #43	@ 0x2b
 8004844:	bf04      	itt	eq
 8004846:	782c      	ldrbeq	r4, [r5, #0]
 8004848:	1c95      	addeq	r5, r2, #2
 800484a:	e7ec      	b.n	8004826 <_strtol_l.isra.0+0x3a>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f6      	bne.n	800483e <_strtol_l.isra.0+0x52>
 8004850:	2c30      	cmp	r4, #48	@ 0x30
 8004852:	bf14      	ite	ne
 8004854:	230a      	movne	r3, #10
 8004856:	2308      	moveq	r3, #8
 8004858:	2200      	movs	r2, #0
 800485a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800485e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004862:	fbbc f9f3 	udiv	r9, ip, r3
 8004866:	4610      	mov	r0, r2
 8004868:	fb03 ca19 	mls	sl, r3, r9, ip
 800486c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004870:	2f09      	cmp	r7, #9
 8004872:	d80f      	bhi.n	8004894 <_strtol_l.isra.0+0xa8>
 8004874:	463c      	mov	r4, r7
 8004876:	42a3      	cmp	r3, r4
 8004878:	dd1b      	ble.n	80048b2 <_strtol_l.isra.0+0xc6>
 800487a:	1c57      	adds	r7, r2, #1
 800487c:	d007      	beq.n	800488e <_strtol_l.isra.0+0xa2>
 800487e:	4581      	cmp	r9, r0
 8004880:	d314      	bcc.n	80048ac <_strtol_l.isra.0+0xc0>
 8004882:	d101      	bne.n	8004888 <_strtol_l.isra.0+0x9c>
 8004884:	45a2      	cmp	sl, r4
 8004886:	db11      	blt.n	80048ac <_strtol_l.isra.0+0xc0>
 8004888:	2201      	movs	r2, #1
 800488a:	fb00 4003 	mla	r0, r0, r3, r4
 800488e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004892:	e7eb      	b.n	800486c <_strtol_l.isra.0+0x80>
 8004894:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004898:	2f19      	cmp	r7, #25
 800489a:	d801      	bhi.n	80048a0 <_strtol_l.isra.0+0xb4>
 800489c:	3c37      	subs	r4, #55	@ 0x37
 800489e:	e7ea      	b.n	8004876 <_strtol_l.isra.0+0x8a>
 80048a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80048a4:	2f19      	cmp	r7, #25
 80048a6:	d804      	bhi.n	80048b2 <_strtol_l.isra.0+0xc6>
 80048a8:	3c57      	subs	r4, #87	@ 0x57
 80048aa:	e7e4      	b.n	8004876 <_strtol_l.isra.0+0x8a>
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	e7ed      	b.n	800488e <_strtol_l.isra.0+0xa2>
 80048b2:	1c53      	adds	r3, r2, #1
 80048b4:	d108      	bne.n	80048c8 <_strtol_l.isra.0+0xdc>
 80048b6:	2322      	movs	r3, #34	@ 0x22
 80048b8:	4660      	mov	r0, ip
 80048ba:	f8ce 3000 	str.w	r3, [lr]
 80048be:	f1b8 0f00 	cmp.w	r8, #0
 80048c2:	d0a0      	beq.n	8004806 <_strtol_l.isra.0+0x1a>
 80048c4:	1e69      	subs	r1, r5, #1
 80048c6:	e006      	b.n	80048d6 <_strtol_l.isra.0+0xea>
 80048c8:	b106      	cbz	r6, 80048cc <_strtol_l.isra.0+0xe0>
 80048ca:	4240      	negs	r0, r0
 80048cc:	f1b8 0f00 	cmp.w	r8, #0
 80048d0:	d099      	beq.n	8004806 <_strtol_l.isra.0+0x1a>
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	d1f6      	bne.n	80048c4 <_strtol_l.isra.0+0xd8>
 80048d6:	f8c8 1000 	str.w	r1, [r8]
 80048da:	e794      	b.n	8004806 <_strtol_l.isra.0+0x1a>
 80048dc:	08008493 	.word	0x08008493

080048e0 <strtol>:
 80048e0:	4613      	mov	r3, r2
 80048e2:	460a      	mov	r2, r1
 80048e4:	4601      	mov	r1, r0
 80048e6:	4802      	ldr	r0, [pc, #8]	@ (80048f0 <strtol+0x10>)
 80048e8:	6800      	ldr	r0, [r0, #0]
 80048ea:	f7ff bf7f 	b.w	80047ec <_strtol_l.isra.0>
 80048ee:	bf00      	nop
 80048f0:	20000020 	.word	0x20000020

080048f4 <__cvt>:
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fa:	461d      	mov	r5, r3
 80048fc:	bfbb      	ittet	lt
 80048fe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004902:	461d      	movlt	r5, r3
 8004904:	2300      	movge	r3, #0
 8004906:	232d      	movlt	r3, #45	@ 0x2d
 8004908:	b088      	sub	sp, #32
 800490a:	4614      	mov	r4, r2
 800490c:	bfb8      	it	lt
 800490e:	4614      	movlt	r4, r2
 8004910:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004912:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004914:	7013      	strb	r3, [r2, #0]
 8004916:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004918:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800491c:	f023 0820 	bic.w	r8, r3, #32
 8004920:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004924:	d005      	beq.n	8004932 <__cvt+0x3e>
 8004926:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800492a:	d100      	bne.n	800492e <__cvt+0x3a>
 800492c:	3601      	adds	r6, #1
 800492e:	2302      	movs	r3, #2
 8004930:	e000      	b.n	8004934 <__cvt+0x40>
 8004932:	2303      	movs	r3, #3
 8004934:	aa07      	add	r2, sp, #28
 8004936:	9204      	str	r2, [sp, #16]
 8004938:	aa06      	add	r2, sp, #24
 800493a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800493e:	e9cd 3600 	strd	r3, r6, [sp]
 8004942:	4622      	mov	r2, r4
 8004944:	462b      	mov	r3, r5
 8004946:	f000 fe6f 	bl	8005628 <_dtoa_r>
 800494a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800494e:	4607      	mov	r7, r0
 8004950:	d119      	bne.n	8004986 <__cvt+0x92>
 8004952:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004954:	07db      	lsls	r3, r3, #31
 8004956:	d50e      	bpl.n	8004976 <__cvt+0x82>
 8004958:	eb00 0906 	add.w	r9, r0, r6
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	4620      	mov	r0, r4
 8004962:	4629      	mov	r1, r5
 8004964:	f7fc f820 	bl	80009a8 <__aeabi_dcmpeq>
 8004968:	b108      	cbz	r0, 800496e <__cvt+0x7a>
 800496a:	f8cd 901c 	str.w	r9, [sp, #28]
 800496e:	2230      	movs	r2, #48	@ 0x30
 8004970:	9b07      	ldr	r3, [sp, #28]
 8004972:	454b      	cmp	r3, r9
 8004974:	d31e      	bcc.n	80049b4 <__cvt+0xc0>
 8004976:	4638      	mov	r0, r7
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800497c:	1bdb      	subs	r3, r3, r7
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	b008      	add	sp, #32
 8004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004986:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800498a:	eb00 0906 	add.w	r9, r0, r6
 800498e:	d1e5      	bne.n	800495c <__cvt+0x68>
 8004990:	7803      	ldrb	r3, [r0, #0]
 8004992:	2b30      	cmp	r3, #48	@ 0x30
 8004994:	d10a      	bne.n	80049ac <__cvt+0xb8>
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fc f803 	bl	80009a8 <__aeabi_dcmpeq>
 80049a2:	b918      	cbnz	r0, 80049ac <__cvt+0xb8>
 80049a4:	f1c6 0601 	rsb	r6, r6, #1
 80049a8:	f8ca 6000 	str.w	r6, [sl]
 80049ac:	f8da 3000 	ldr.w	r3, [sl]
 80049b0:	4499      	add	r9, r3
 80049b2:	e7d3      	b.n	800495c <__cvt+0x68>
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	9107      	str	r1, [sp, #28]
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e7d9      	b.n	8004970 <__cvt+0x7c>

080049bc <__exponent>:
 80049bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049be:	2900      	cmp	r1, #0
 80049c0:	bfb6      	itet	lt
 80049c2:	232d      	movlt	r3, #45	@ 0x2d
 80049c4:	232b      	movge	r3, #43	@ 0x2b
 80049c6:	4249      	neglt	r1, r1
 80049c8:	2909      	cmp	r1, #9
 80049ca:	7002      	strb	r2, [r0, #0]
 80049cc:	7043      	strb	r3, [r0, #1]
 80049ce:	dd29      	ble.n	8004a24 <__exponent+0x68>
 80049d0:	f10d 0307 	add.w	r3, sp, #7
 80049d4:	461d      	mov	r5, r3
 80049d6:	270a      	movs	r7, #10
 80049d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80049dc:	461a      	mov	r2, r3
 80049de:	fb07 1416 	mls	r4, r7, r6, r1
 80049e2:	3430      	adds	r4, #48	@ 0x30
 80049e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049e8:	460c      	mov	r4, r1
 80049ea:	2c63      	cmp	r4, #99	@ 0x63
 80049ec:	4631      	mov	r1, r6
 80049ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80049f2:	dcf1      	bgt.n	80049d8 <__exponent+0x1c>
 80049f4:	3130      	adds	r1, #48	@ 0x30
 80049f6:	1e94      	subs	r4, r2, #2
 80049f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049fc:	4623      	mov	r3, r4
 80049fe:	1c41      	adds	r1, r0, #1
 8004a00:	42ab      	cmp	r3, r5
 8004a02:	d30a      	bcc.n	8004a1a <__exponent+0x5e>
 8004a04:	f10d 0309 	add.w	r3, sp, #9
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	42ac      	cmp	r4, r5
 8004a0c:	bf88      	it	hi
 8004a0e:	2300      	movhi	r3, #0
 8004a10:	3302      	adds	r3, #2
 8004a12:	4403      	add	r3, r0
 8004a14:	1a18      	subs	r0, r3, r0
 8004a16:	b003      	add	sp, #12
 8004a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a1e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a22:	e7ed      	b.n	8004a00 <__exponent+0x44>
 8004a24:	2330      	movs	r3, #48	@ 0x30
 8004a26:	3130      	adds	r1, #48	@ 0x30
 8004a28:	7083      	strb	r3, [r0, #2]
 8004a2a:	70c1      	strb	r1, [r0, #3]
 8004a2c:	1d03      	adds	r3, r0, #4
 8004a2e:	e7f1      	b.n	8004a14 <__exponent+0x58>

08004a30 <_printf_float>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	b091      	sub	sp, #68	@ 0x44
 8004a36:	460c      	mov	r4, r1
 8004a38:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	461f      	mov	r7, r3
 8004a40:	4605      	mov	r5, r0
 8004a42:	f000 fce1 	bl	8005408 <_localeconv_r>
 8004a46:	6803      	ldr	r3, [r0, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	9308      	str	r3, [sp, #32]
 8004a4c:	f7fb fb80 	bl	8000150 <strlen>
 8004a50:	2300      	movs	r3, #0
 8004a52:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a54:	f8d8 3000 	ldr.w	r3, [r8]
 8004a58:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a5a:	3307      	adds	r3, #7
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	f103 0208 	add.w	r2, r3, #8
 8004a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a68:	f8d4 b000 	ldr.w	fp, [r4]
 8004a6c:	f8c8 2000 	str.w	r2, [r8]
 8004a70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a7a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cfc <_printf_float+0x2cc>)
 8004a8c:	f7fb ffbe 	bl	8000a0c <__aeabi_dcmpun>
 8004a90:	bb70      	cbnz	r0, 8004af0 <_printf_float+0xc0>
 8004a92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	4b98      	ldr	r3, [pc, #608]	@ (8004cfc <_printf_float+0x2cc>)
 8004a9c:	f7fb ff98 	bl	80009d0 <__aeabi_dcmple>
 8004aa0:	bb30      	cbnz	r0, 8004af0 <_printf_float+0xc0>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	f7fb ff87 	bl	80009bc <__aeabi_dcmplt>
 8004aae:	b110      	cbz	r0, 8004ab6 <_printf_float+0x86>
 8004ab0:	232d      	movs	r3, #45	@ 0x2d
 8004ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ab6:	4a92      	ldr	r2, [pc, #584]	@ (8004d00 <_printf_float+0x2d0>)
 8004ab8:	4b92      	ldr	r3, [pc, #584]	@ (8004d04 <_printf_float+0x2d4>)
 8004aba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004abe:	bf8c      	ite	hi
 8004ac0:	4690      	movhi	r8, r2
 8004ac2:	4698      	movls	r8, r3
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f04f 0900 	mov.w	r9, #0
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	f02b 0304 	bic.w	r3, fp, #4
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	9700      	str	r7, [sp, #0]
 8004ada:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004adc:	f000 f9d4 	bl	8004e88 <_printf_common>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	f040 8090 	bne.w	8004c06 <_printf_float+0x1d6>
 8004ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aea:	b011      	add	sp, #68	@ 0x44
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	4649      	mov	r1, r9
 8004af8:	f7fb ff88 	bl	8000a0c <__aeabi_dcmpun>
 8004afc:	b148      	cbz	r0, 8004b12 <_printf_float+0xe2>
 8004afe:	464b      	mov	r3, r9
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	232d      	movlt	r3, #45	@ 0x2d
 8004b06:	4a80      	ldr	r2, [pc, #512]	@ (8004d08 <_printf_float+0x2d8>)
 8004b08:	bfb8      	it	lt
 8004b0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8004d0c <_printf_float+0x2dc>)
 8004b10:	e7d3      	b.n	8004aba <_printf_float+0x8a>
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	d13f      	bne.n	8004b9c <_printf_float+0x16c>
 8004b1c:	2306      	movs	r3, #6
 8004b1e:	6063      	str	r3, [r4, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	9206      	str	r2, [sp, #24]
 8004b2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004b2c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004b30:	aa0d      	add	r2, sp, #52	@ 0x34
 8004b32:	9203      	str	r2, [sp, #12]
 8004b34:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004b38:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b3c:	6863      	ldr	r3, [r4, #4]
 8004b3e:	4642      	mov	r2, r8
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4628      	mov	r0, r5
 8004b44:	464b      	mov	r3, r9
 8004b46:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b48:	f7ff fed4 	bl	80048f4 <__cvt>
 8004b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b4e:	4680      	mov	r8, r0
 8004b50:	2947      	cmp	r1, #71	@ 0x47
 8004b52:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b54:	d128      	bne.n	8004ba8 <_printf_float+0x178>
 8004b56:	1cc8      	adds	r0, r1, #3
 8004b58:	db02      	blt.n	8004b60 <_printf_float+0x130>
 8004b5a:	6863      	ldr	r3, [r4, #4]
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	dd40      	ble.n	8004be2 <_printf_float+0x1b2>
 8004b60:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b64:	fa5f fa8a 	uxtb.w	sl, sl
 8004b68:	4652      	mov	r2, sl
 8004b6a:	3901      	subs	r1, #1
 8004b6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b70:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b72:	f7ff ff23 	bl	80049bc <__exponent>
 8004b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b78:	4681      	mov	r9, r0
 8004b7a:	1813      	adds	r3, r2, r0
 8004b7c:	2a01      	cmp	r2, #1
 8004b7e:	6123      	str	r3, [r4, #16]
 8004b80:	dc02      	bgt.n	8004b88 <_printf_float+0x158>
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	07d2      	lsls	r2, r2, #31
 8004b86:	d501      	bpl.n	8004b8c <_printf_float+0x15c>
 8004b88:	3301      	adds	r3, #1
 8004b8a:	6123      	str	r3, [r4, #16]
 8004b8c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d09e      	beq.n	8004ad2 <_printf_float+0xa2>
 8004b94:	232d      	movs	r3, #45	@ 0x2d
 8004b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b9a:	e79a      	b.n	8004ad2 <_printf_float+0xa2>
 8004b9c:	2947      	cmp	r1, #71	@ 0x47
 8004b9e:	d1bf      	bne.n	8004b20 <_printf_float+0xf0>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1bd      	bne.n	8004b20 <_printf_float+0xf0>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e7ba      	b.n	8004b1e <_printf_float+0xee>
 8004ba8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bac:	d9dc      	bls.n	8004b68 <_printf_float+0x138>
 8004bae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bb2:	d118      	bne.n	8004be6 <_printf_float+0x1b6>
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	dd0b      	ble.n	8004bd2 <_printf_float+0x1a2>
 8004bba:	6121      	str	r1, [r4, #16]
 8004bbc:	b913      	cbnz	r3, 8004bc4 <_printf_float+0x194>
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	07d0      	lsls	r0, r2, #31
 8004bc2:	d502      	bpl.n	8004bca <_printf_float+0x19a>
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	440b      	add	r3, r1
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	f04f 0900 	mov.w	r9, #0
 8004bce:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bd0:	e7dc      	b.n	8004b8c <_printf_float+0x15c>
 8004bd2:	b913      	cbnz	r3, 8004bda <_printf_float+0x1aa>
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	07d2      	lsls	r2, r2, #31
 8004bd8:	d501      	bpl.n	8004bde <_printf_float+0x1ae>
 8004bda:	3302      	adds	r3, #2
 8004bdc:	e7f4      	b.n	8004bc8 <_printf_float+0x198>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e7f2      	b.n	8004bc8 <_printf_float+0x198>
 8004be2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004be8:	4299      	cmp	r1, r3
 8004bea:	db05      	blt.n	8004bf8 <_printf_float+0x1c8>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	6121      	str	r1, [r4, #16]
 8004bf0:	07d8      	lsls	r0, r3, #31
 8004bf2:	d5ea      	bpl.n	8004bca <_printf_float+0x19a>
 8004bf4:	1c4b      	adds	r3, r1, #1
 8004bf6:	e7e7      	b.n	8004bc8 <_printf_float+0x198>
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	bfcc      	ite	gt
 8004bfc:	2201      	movgt	r2, #1
 8004bfe:	f1c1 0202 	rsble	r2, r1, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	e7e0      	b.n	8004bc8 <_printf_float+0x198>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	055a      	lsls	r2, r3, #21
 8004c0a:	d407      	bmi.n	8004c1c <_printf_float+0x1ec>
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	4642      	mov	r2, r8
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	d12b      	bne.n	8004c72 <_printf_float+0x242>
 8004c1a:	e764      	b.n	8004ae6 <_printf_float+0xb6>
 8004c1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c20:	f240 80dc 	bls.w	8004ddc <_printf_float+0x3ac>
 8004c24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f7fb febc 	bl	80009a8 <__aeabi_dcmpeq>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	d033      	beq.n	8004c9c <_printf_float+0x26c>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4631      	mov	r1, r6
 8004c38:	4628      	mov	r0, r5
 8004c3a:	4a35      	ldr	r2, [pc, #212]	@ (8004d10 <_printf_float+0x2e0>)
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f af51 	beq.w	8004ae6 <_printf_float+0xb6>
 8004c44:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	db02      	blt.n	8004c52 <_printf_float+0x222>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07d8      	lsls	r0, r3, #31
 8004c50:	d50f      	bpl.n	8004c72 <_printf_float+0x242>
 8004c52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c56:	4631      	mov	r1, r6
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f af42 	beq.w	8004ae6 <_printf_float+0xb6>
 8004c62:	f04f 0900 	mov.w	r9, #0
 8004c66:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c6a:	f104 0a1a 	add.w	sl, r4, #26
 8004c6e:	45c8      	cmp	r8, r9
 8004c70:	dc09      	bgt.n	8004c86 <_printf_float+0x256>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	079b      	lsls	r3, r3, #30
 8004c76:	f100 8102 	bmi.w	8004e7e <_printf_float+0x44e>
 8004c7a:	68e0      	ldr	r0, [r4, #12]
 8004c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c7e:	4298      	cmp	r0, r3
 8004c80:	bfb8      	it	lt
 8004c82:	4618      	movlt	r0, r3
 8004c84:	e731      	b.n	8004aea <_printf_float+0xba>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	47b8      	blx	r7
 8004c90:	3001      	adds	r0, #1
 8004c92:	f43f af28 	beq.w	8004ae6 <_printf_float+0xb6>
 8004c96:	f109 0901 	add.w	r9, r9, #1
 8004c9a:	e7e8      	b.n	8004c6e <_printf_float+0x23e>
 8004c9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	dc38      	bgt.n	8004d14 <_printf_float+0x2e4>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <_printf_float+0x2e0>)
 8004caa:	47b8      	blx	r7
 8004cac:	3001      	adds	r0, #1
 8004cae:	f43f af1a 	beq.w	8004ae6 <_printf_float+0xb6>
 8004cb2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004cb6:	ea59 0303 	orrs.w	r3, r9, r3
 8004cba:	d102      	bne.n	8004cc2 <_printf_float+0x292>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	07d9      	lsls	r1, r3, #31
 8004cc0:	d5d7      	bpl.n	8004c72 <_printf_float+0x242>
 8004cc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f af0a 	beq.w	8004ae6 <_printf_float+0xb6>
 8004cd2:	f04f 0a00 	mov.w	sl, #0
 8004cd6:	f104 0b1a 	add.w	fp, r4, #26
 8004cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cdc:	425b      	negs	r3, r3
 8004cde:	4553      	cmp	r3, sl
 8004ce0:	dc01      	bgt.n	8004ce6 <_printf_float+0x2b6>
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	e793      	b.n	8004c0e <_printf_float+0x1de>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	465a      	mov	r2, fp
 8004cea:	4631      	mov	r1, r6
 8004cec:	4628      	mov	r0, r5
 8004cee:	47b8      	blx	r7
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	f43f aef8 	beq.w	8004ae6 <_printf_float+0xb6>
 8004cf6:	f10a 0a01 	add.w	sl, sl, #1
 8004cfa:	e7ee      	b.n	8004cda <_printf_float+0x2aa>
 8004cfc:	7fefffff 	.word	0x7fefffff
 8004d00:	08008597 	.word	0x08008597
 8004d04:	08008593 	.word	0x08008593
 8004d08:	0800859f 	.word	0x0800859f
 8004d0c:	0800859b 	.word	0x0800859b
 8004d10:	080085a3 	.word	0x080085a3
 8004d14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d16:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d1a:	4553      	cmp	r3, sl
 8004d1c:	bfa8      	it	ge
 8004d1e:	4653      	movge	r3, sl
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	4699      	mov	r9, r3
 8004d24:	dc36      	bgt.n	8004d94 <_printf_float+0x364>
 8004d26:	f04f 0b00 	mov.w	fp, #0
 8004d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d2e:	f104 021a 	add.w	r2, r4, #26
 8004d32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d36:	eba3 0309 	sub.w	r3, r3, r9
 8004d3a:	455b      	cmp	r3, fp
 8004d3c:	dc31      	bgt.n	8004da2 <_printf_float+0x372>
 8004d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d40:	459a      	cmp	sl, r3
 8004d42:	dc3a      	bgt.n	8004dba <_printf_float+0x38a>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07da      	lsls	r2, r3, #31
 8004d48:	d437      	bmi.n	8004dba <_printf_float+0x38a>
 8004d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d4c:	ebaa 0903 	sub.w	r9, sl, r3
 8004d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d52:	ebaa 0303 	sub.w	r3, sl, r3
 8004d56:	4599      	cmp	r9, r3
 8004d58:	bfa8      	it	ge
 8004d5a:	4699      	movge	r9, r3
 8004d5c:	f1b9 0f00 	cmp.w	r9, #0
 8004d60:	dc33      	bgt.n	8004dca <_printf_float+0x39a>
 8004d62:	f04f 0800 	mov.w	r8, #0
 8004d66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d6a:	f104 0b1a 	add.w	fp, r4, #26
 8004d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d70:	ebaa 0303 	sub.w	r3, sl, r3
 8004d74:	eba3 0309 	sub.w	r3, r3, r9
 8004d78:	4543      	cmp	r3, r8
 8004d7a:	f77f af7a 	ble.w	8004c72 <_printf_float+0x242>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	465a      	mov	r2, fp
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f aeac 	beq.w	8004ae6 <_printf_float+0xb6>
 8004d8e:	f108 0801 	add.w	r8, r8, #1
 8004d92:	e7ec      	b.n	8004d6e <_printf_float+0x33e>
 8004d94:	4642      	mov	r2, r8
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d1c2      	bne.n	8004d26 <_printf_float+0x2f6>
 8004da0:	e6a1      	b.n	8004ae6 <_printf_float+0xb6>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4631      	mov	r1, r6
 8004da6:	4628      	mov	r0, r5
 8004da8:	920a      	str	r2, [sp, #40]	@ 0x28
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f ae9a 	beq.w	8004ae6 <_printf_float+0xb6>
 8004db2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004db4:	f10b 0b01 	add.w	fp, fp, #1
 8004db8:	e7bb      	b.n	8004d32 <_printf_float+0x302>
 8004dba:	4631      	mov	r1, r6
 8004dbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	47b8      	blx	r7
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d1c0      	bne.n	8004d4a <_printf_float+0x31a>
 8004dc8:	e68d      	b.n	8004ae6 <_printf_float+0xb6>
 8004dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dcc:	464b      	mov	r3, r9
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	4442      	add	r2, r8
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d1c3      	bne.n	8004d62 <_printf_float+0x332>
 8004dda:	e684      	b.n	8004ae6 <_printf_float+0xb6>
 8004ddc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004de0:	f1ba 0f01 	cmp.w	sl, #1
 8004de4:	dc01      	bgt.n	8004dea <_printf_float+0x3ba>
 8004de6:	07db      	lsls	r3, r3, #31
 8004de8:	d536      	bpl.n	8004e58 <_printf_float+0x428>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4642      	mov	r2, r8
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	47b8      	blx	r7
 8004df4:	3001      	adds	r0, #1
 8004df6:	f43f ae76 	beq.w	8004ae6 <_printf_float+0xb6>
 8004dfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae6e 	beq.w	8004ae6 <_printf_float+0xb6>
 8004e0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2300      	movs	r3, #0
 8004e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e16:	f7fb fdc7 	bl	80009a8 <__aeabi_dcmpeq>
 8004e1a:	b9c0      	cbnz	r0, 8004e4e <_printf_float+0x41e>
 8004e1c:	4653      	mov	r3, sl
 8004e1e:	f108 0201 	add.w	r2, r8, #1
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b8      	blx	r7
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d10c      	bne.n	8004e46 <_printf_float+0x416>
 8004e2c:	e65b      	b.n	8004ae6 <_printf_float+0xb6>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	465a      	mov	r2, fp
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b8      	blx	r7
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae54 	beq.w	8004ae6 <_printf_float+0xb6>
 8004e3e:	f108 0801 	add.w	r8, r8, #1
 8004e42:	45d0      	cmp	r8, sl
 8004e44:	dbf3      	blt.n	8004e2e <_printf_float+0x3fe>
 8004e46:	464b      	mov	r3, r9
 8004e48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e4c:	e6e0      	b.n	8004c10 <_printf_float+0x1e0>
 8004e4e:	f04f 0800 	mov.w	r8, #0
 8004e52:	f104 0b1a 	add.w	fp, r4, #26
 8004e56:	e7f4      	b.n	8004e42 <_printf_float+0x412>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4642      	mov	r2, r8
 8004e5c:	e7e1      	b.n	8004e22 <_printf_float+0x3f2>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	464a      	mov	r2, r9
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f ae3c 	beq.w	8004ae6 <_printf_float+0xb6>
 8004e6e:	f108 0801 	add.w	r8, r8, #1
 8004e72:	68e3      	ldr	r3, [r4, #12]
 8004e74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e76:	1a5b      	subs	r3, r3, r1
 8004e78:	4543      	cmp	r3, r8
 8004e7a:	dcf0      	bgt.n	8004e5e <_printf_float+0x42e>
 8004e7c:	e6fd      	b.n	8004c7a <_printf_float+0x24a>
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	f104 0919 	add.w	r9, r4, #25
 8004e86:	e7f4      	b.n	8004e72 <_printf_float+0x442>

08004e88 <_printf_common>:
 8004e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	4698      	mov	r8, r3
 8004e90:	688a      	ldr	r2, [r1, #8]
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	4607      	mov	r7, r0
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bfb8      	it	lt
 8004e9a:	4613      	movlt	r3, r2
 8004e9c:	6033      	str	r3, [r6, #0]
 8004e9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ea8:	b10a      	cbz	r2, 8004eae <_printf_common+0x26>
 8004eaa:	3301      	adds	r3, #1
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	0699      	lsls	r1, r3, #26
 8004eb2:	bf42      	ittt	mi
 8004eb4:	6833      	ldrmi	r3, [r6, #0]
 8004eb6:	3302      	addmi	r3, #2
 8004eb8:	6033      	strmi	r3, [r6, #0]
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	f015 0506 	ands.w	r5, r5, #6
 8004ec0:	d106      	bne.n	8004ed0 <_printf_common+0x48>
 8004ec2:	f104 0a19 	add.w	sl, r4, #25
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	6832      	ldr	r2, [r6, #0]
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	42ab      	cmp	r3, r5
 8004ece:	dc2b      	bgt.n	8004f28 <_printf_common+0xa0>
 8004ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ed4:	6822      	ldr	r2, [r4, #0]
 8004ed6:	3b00      	subs	r3, #0
 8004ed8:	bf18      	it	ne
 8004eda:	2301      	movne	r3, #1
 8004edc:	0692      	lsls	r2, r2, #26
 8004ede:	d430      	bmi.n	8004f42 <_printf_common+0xba>
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ee8:	47c8      	blx	r9
 8004eea:	3001      	adds	r0, #1
 8004eec:	d023      	beq.n	8004f36 <_printf_common+0xae>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	6922      	ldr	r2, [r4, #16]
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	bf14      	ite	ne
 8004efa:	2500      	movne	r5, #0
 8004efc:	6833      	ldreq	r3, [r6, #0]
 8004efe:	f04f 0600 	mov.w	r6, #0
 8004f02:	bf08      	it	eq
 8004f04:	68e5      	ldreq	r5, [r4, #12]
 8004f06:	f104 041a 	add.w	r4, r4, #26
 8004f0a:	bf08      	it	eq
 8004f0c:	1aed      	subeq	r5, r5, r3
 8004f0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f12:	bf08      	it	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bfc4      	itt	gt
 8004f1c:	1a9b      	subgt	r3, r3, r2
 8004f1e:	18ed      	addgt	r5, r5, r3
 8004f20:	42b5      	cmp	r5, r6
 8004f22:	d11a      	bne.n	8004f5a <_printf_common+0xd2>
 8004f24:	2000      	movs	r0, #0
 8004f26:	e008      	b.n	8004f3a <_printf_common+0xb2>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4652      	mov	r2, sl
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	4638      	mov	r0, r7
 8004f30:	47c8      	blx	r9
 8004f32:	3001      	adds	r0, #1
 8004f34:	d103      	bne.n	8004f3e <_printf_common+0xb6>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3e:	3501      	adds	r5, #1
 8004f40:	e7c1      	b.n	8004ec6 <_printf_common+0x3e>
 8004f42:	2030      	movs	r0, #48	@ 0x30
 8004f44:	18e1      	adds	r1, r4, r3
 8004f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f50:	4422      	add	r2, r4
 8004f52:	3302      	adds	r3, #2
 8004f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f58:	e7c2      	b.n	8004ee0 <_printf_common+0x58>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	4641      	mov	r1, r8
 8004f60:	4638      	mov	r0, r7
 8004f62:	47c8      	blx	r9
 8004f64:	3001      	adds	r0, #1
 8004f66:	d0e6      	beq.n	8004f36 <_printf_common+0xae>
 8004f68:	3601      	adds	r6, #1
 8004f6a:	e7d9      	b.n	8004f20 <_printf_common+0x98>

08004f6c <_printf_i>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	7e0f      	ldrb	r7, [r1, #24]
 8004f72:	4691      	mov	r9, r2
 8004f74:	2f78      	cmp	r7, #120	@ 0x78
 8004f76:	4680      	mov	r8, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	469a      	mov	sl, r3
 8004f7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f82:	d807      	bhi.n	8004f94 <_printf_i+0x28>
 8004f84:	2f62      	cmp	r7, #98	@ 0x62
 8004f86:	d80a      	bhi.n	8004f9e <_printf_i+0x32>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	f000 80d1 	beq.w	8005130 <_printf_i+0x1c4>
 8004f8e:	2f58      	cmp	r7, #88	@ 0x58
 8004f90:	f000 80b8 	beq.w	8005104 <_printf_i+0x198>
 8004f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f9c:	e03a      	b.n	8005014 <_printf_i+0xa8>
 8004f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fa2:	2b15      	cmp	r3, #21
 8004fa4:	d8f6      	bhi.n	8004f94 <_printf_i+0x28>
 8004fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8004fac <_printf_i+0x40>)
 8004fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005019 	.word	0x08005019
 8004fb4:	08004f95 	.word	0x08004f95
 8004fb8:	08004f95 	.word	0x08004f95
 8004fbc:	08004f95 	.word	0x08004f95
 8004fc0:	08004f95 	.word	0x08004f95
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f95 	.word	0x08004f95
 8004fcc:	08004f95 	.word	0x08004f95
 8004fd0:	08004f95 	.word	0x08004f95
 8004fd4:	08004f95 	.word	0x08004f95
 8004fd8:	08005117 	.word	0x08005117
 8004fdc:	08005043 	.word	0x08005043
 8004fe0:	080050d1 	.word	0x080050d1
 8004fe4:	08004f95 	.word	0x08004f95
 8004fe8:	08004f95 	.word	0x08004f95
 8004fec:	08005139 	.word	0x08005139
 8004ff0:	08004f95 	.word	0x08004f95
 8004ff4:	08005043 	.word	0x08005043
 8004ff8:	08004f95 	.word	0x08004f95
 8004ffc:	08004f95 	.word	0x08004f95
 8005000:	080050d9 	.word	0x080050d9
 8005004:	6833      	ldr	r3, [r6, #0]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6032      	str	r2, [r6, #0]
 800500c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e09c      	b.n	8005152 <_printf_i+0x1e6>
 8005018:	6833      	ldr	r3, [r6, #0]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1d19      	adds	r1, r3, #4
 800501e:	6031      	str	r1, [r6, #0]
 8005020:	0606      	lsls	r6, r0, #24
 8005022:	d501      	bpl.n	8005028 <_printf_i+0xbc>
 8005024:	681d      	ldr	r5, [r3, #0]
 8005026:	e003      	b.n	8005030 <_printf_i+0xc4>
 8005028:	0645      	lsls	r5, r0, #25
 800502a:	d5fb      	bpl.n	8005024 <_printf_i+0xb8>
 800502c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005030:	2d00      	cmp	r5, #0
 8005032:	da03      	bge.n	800503c <_printf_i+0xd0>
 8005034:	232d      	movs	r3, #45	@ 0x2d
 8005036:	426d      	negs	r5, r5
 8005038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800503c:	230a      	movs	r3, #10
 800503e:	4858      	ldr	r0, [pc, #352]	@ (80051a0 <_printf_i+0x234>)
 8005040:	e011      	b.n	8005066 <_printf_i+0xfa>
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	6833      	ldr	r3, [r6, #0]
 8005046:	0608      	lsls	r0, r1, #24
 8005048:	f853 5b04 	ldr.w	r5, [r3], #4
 800504c:	d402      	bmi.n	8005054 <_printf_i+0xe8>
 800504e:	0649      	lsls	r1, r1, #25
 8005050:	bf48      	it	mi
 8005052:	b2ad      	uxthmi	r5, r5
 8005054:	2f6f      	cmp	r7, #111	@ 0x6f
 8005056:	6033      	str	r3, [r6, #0]
 8005058:	bf14      	ite	ne
 800505a:	230a      	movne	r3, #10
 800505c:	2308      	moveq	r3, #8
 800505e:	4850      	ldr	r0, [pc, #320]	@ (80051a0 <_printf_i+0x234>)
 8005060:	2100      	movs	r1, #0
 8005062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005066:	6866      	ldr	r6, [r4, #4]
 8005068:	2e00      	cmp	r6, #0
 800506a:	60a6      	str	r6, [r4, #8]
 800506c:	db05      	blt.n	800507a <_printf_i+0x10e>
 800506e:	6821      	ldr	r1, [r4, #0]
 8005070:	432e      	orrs	r6, r5
 8005072:	f021 0104 	bic.w	r1, r1, #4
 8005076:	6021      	str	r1, [r4, #0]
 8005078:	d04b      	beq.n	8005112 <_printf_i+0x1a6>
 800507a:	4616      	mov	r6, r2
 800507c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005080:	fb03 5711 	mls	r7, r3, r1, r5
 8005084:	5dc7      	ldrb	r7, [r0, r7]
 8005086:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800508a:	462f      	mov	r7, r5
 800508c:	42bb      	cmp	r3, r7
 800508e:	460d      	mov	r5, r1
 8005090:	d9f4      	bls.n	800507c <_printf_i+0x110>
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10b      	bne.n	80050ae <_printf_i+0x142>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07df      	lsls	r7, r3, #31
 800509a:	d508      	bpl.n	80050ae <_printf_i+0x142>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	6861      	ldr	r1, [r4, #4]
 80050a0:	4299      	cmp	r1, r3
 80050a2:	bfde      	ittt	le
 80050a4:	2330      	movle	r3, #48	@ 0x30
 80050a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ae:	1b92      	subs	r2, r2, r6
 80050b0:	6122      	str	r2, [r4, #16]
 80050b2:	464b      	mov	r3, r9
 80050b4:	4621      	mov	r1, r4
 80050b6:	4640      	mov	r0, r8
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	aa03      	add	r2, sp, #12
 80050be:	f7ff fee3 	bl	8004e88 <_printf_common>
 80050c2:	3001      	adds	r0, #1
 80050c4:	d14a      	bne.n	800515c <_printf_i+0x1f0>
 80050c6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ca:	b004      	add	sp, #16
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	2778      	movs	r7, #120	@ 0x78
 80050da:	4832      	ldr	r0, [pc, #200]	@ (80051a4 <_printf_i+0x238>)
 80050dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	6831      	ldr	r1, [r6, #0]
 80050e4:	061f      	lsls	r7, r3, #24
 80050e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80050ea:	d402      	bmi.n	80050f2 <_printf_i+0x186>
 80050ec:	065f      	lsls	r7, r3, #25
 80050ee:	bf48      	it	mi
 80050f0:	b2ad      	uxthmi	r5, r5
 80050f2:	6031      	str	r1, [r6, #0]
 80050f4:	07d9      	lsls	r1, r3, #31
 80050f6:	bf44      	itt	mi
 80050f8:	f043 0320 	orrmi.w	r3, r3, #32
 80050fc:	6023      	strmi	r3, [r4, #0]
 80050fe:	b11d      	cbz	r5, 8005108 <_printf_i+0x19c>
 8005100:	2310      	movs	r3, #16
 8005102:	e7ad      	b.n	8005060 <_printf_i+0xf4>
 8005104:	4826      	ldr	r0, [pc, #152]	@ (80051a0 <_printf_i+0x234>)
 8005106:	e7e9      	b.n	80050dc <_printf_i+0x170>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f023 0320 	bic.w	r3, r3, #32
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	e7f6      	b.n	8005100 <_printf_i+0x194>
 8005112:	4616      	mov	r6, r2
 8005114:	e7bd      	b.n	8005092 <_printf_i+0x126>
 8005116:	6833      	ldr	r3, [r6, #0]
 8005118:	6825      	ldr	r5, [r4, #0]
 800511a:	1d18      	adds	r0, r3, #4
 800511c:	6961      	ldr	r1, [r4, #20]
 800511e:	6030      	str	r0, [r6, #0]
 8005120:	062e      	lsls	r6, r5, #24
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	d501      	bpl.n	800512a <_printf_i+0x1be>
 8005126:	6019      	str	r1, [r3, #0]
 8005128:	e002      	b.n	8005130 <_printf_i+0x1c4>
 800512a:	0668      	lsls	r0, r5, #25
 800512c:	d5fb      	bpl.n	8005126 <_printf_i+0x1ba>
 800512e:	8019      	strh	r1, [r3, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	4616      	mov	r6, r2
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	e7bc      	b.n	80050b2 <_printf_i+0x146>
 8005138:	6833      	ldr	r3, [r6, #0]
 800513a:	2100      	movs	r1, #0
 800513c:	1d1a      	adds	r2, r3, #4
 800513e:	6032      	str	r2, [r6, #0]
 8005140:	681e      	ldr	r6, [r3, #0]
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	4630      	mov	r0, r6
 8005146:	f000 f9d6 	bl	80054f6 <memchr>
 800514a:	b108      	cbz	r0, 8005150 <_printf_i+0x1e4>
 800514c:	1b80      	subs	r0, r0, r6
 800514e:	6060      	str	r0, [r4, #4]
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	6123      	str	r3, [r4, #16]
 8005154:	2300      	movs	r3, #0
 8005156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800515a:	e7aa      	b.n	80050b2 <_printf_i+0x146>
 800515c:	4632      	mov	r2, r6
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	47d0      	blx	sl
 8005166:	3001      	adds	r0, #1
 8005168:	d0ad      	beq.n	80050c6 <_printf_i+0x15a>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	079b      	lsls	r3, r3, #30
 800516e:	d413      	bmi.n	8005198 <_printf_i+0x22c>
 8005170:	68e0      	ldr	r0, [r4, #12]
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	4298      	cmp	r0, r3
 8005176:	bfb8      	it	lt
 8005178:	4618      	movlt	r0, r3
 800517a:	e7a6      	b.n	80050ca <_printf_i+0x15e>
 800517c:	2301      	movs	r3, #1
 800517e:	4632      	mov	r2, r6
 8005180:	4649      	mov	r1, r9
 8005182:	4640      	mov	r0, r8
 8005184:	47d0      	blx	sl
 8005186:	3001      	adds	r0, #1
 8005188:	d09d      	beq.n	80050c6 <_printf_i+0x15a>
 800518a:	3501      	adds	r5, #1
 800518c:	68e3      	ldr	r3, [r4, #12]
 800518e:	9903      	ldr	r1, [sp, #12]
 8005190:	1a5b      	subs	r3, r3, r1
 8005192:	42ab      	cmp	r3, r5
 8005194:	dcf2      	bgt.n	800517c <_printf_i+0x210>
 8005196:	e7eb      	b.n	8005170 <_printf_i+0x204>
 8005198:	2500      	movs	r5, #0
 800519a:	f104 0619 	add.w	r6, r4, #25
 800519e:	e7f5      	b.n	800518c <_printf_i+0x220>
 80051a0:	080085a5 	.word	0x080085a5
 80051a4:	080085b6 	.word	0x080085b6

080051a8 <std>:
 80051a8:	2300      	movs	r3, #0
 80051aa:	b510      	push	{r4, lr}
 80051ac:	4604      	mov	r4, r0
 80051ae:	e9c0 3300 	strd	r3, r3, [r0]
 80051b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051b6:	6083      	str	r3, [r0, #8]
 80051b8:	8181      	strh	r1, [r0, #12]
 80051ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80051bc:	81c2      	strh	r2, [r0, #14]
 80051be:	6183      	str	r3, [r0, #24]
 80051c0:	4619      	mov	r1, r3
 80051c2:	2208      	movs	r2, #8
 80051c4:	305c      	adds	r0, #92	@ 0x5c
 80051c6:	f000 f916 	bl	80053f6 <memset>
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <std+0x58>)
 80051cc:	6224      	str	r4, [r4, #32]
 80051ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005204 <std+0x5c>)
 80051d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005208 <std+0x60>)
 80051d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <std+0x64>)
 80051da:	6323      	str	r3, [r4, #48]	@ 0x30
 80051dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <std+0x68>)
 80051de:	429c      	cmp	r4, r3
 80051e0:	d006      	beq.n	80051f0 <std+0x48>
 80051e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051e6:	4294      	cmp	r4, r2
 80051e8:	d002      	beq.n	80051f0 <std+0x48>
 80051ea:	33d0      	adds	r3, #208	@ 0xd0
 80051ec:	429c      	cmp	r4, r3
 80051ee:	d105      	bne.n	80051fc <std+0x54>
 80051f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f8:	f000 b97a 	b.w	80054f0 <__retarget_lock_init_recursive>
 80051fc:	bd10      	pop	{r4, pc}
 80051fe:	bf00      	nop
 8005200:	08005371 	.word	0x08005371
 8005204:	08005393 	.word	0x08005393
 8005208:	080053cb 	.word	0x080053cb
 800520c:	080053ef 	.word	0x080053ef
 8005210:	2000081c 	.word	0x2000081c

08005214 <stdio_exit_handler>:
 8005214:	4a02      	ldr	r2, [pc, #8]	@ (8005220 <stdio_exit_handler+0xc>)
 8005216:	4903      	ldr	r1, [pc, #12]	@ (8005224 <stdio_exit_handler+0x10>)
 8005218:	4803      	ldr	r0, [pc, #12]	@ (8005228 <stdio_exit_handler+0x14>)
 800521a:	f000 b869 	b.w	80052f0 <_fwalk_sglue>
 800521e:	bf00      	nop
 8005220:	20000014 	.word	0x20000014
 8005224:	08006e71 	.word	0x08006e71
 8005228:	20000024 	.word	0x20000024

0800522c <cleanup_stdio>:
 800522c:	6841      	ldr	r1, [r0, #4]
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <cleanup_stdio+0x34>)
 8005230:	b510      	push	{r4, lr}
 8005232:	4299      	cmp	r1, r3
 8005234:	4604      	mov	r4, r0
 8005236:	d001      	beq.n	800523c <cleanup_stdio+0x10>
 8005238:	f001 fe1a 	bl	8006e70 <_fflush_r>
 800523c:	68a1      	ldr	r1, [r4, #8]
 800523e:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <cleanup_stdio+0x38>)
 8005240:	4299      	cmp	r1, r3
 8005242:	d002      	beq.n	800524a <cleanup_stdio+0x1e>
 8005244:	4620      	mov	r0, r4
 8005246:	f001 fe13 	bl	8006e70 <_fflush_r>
 800524a:	68e1      	ldr	r1, [r4, #12]
 800524c:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <cleanup_stdio+0x3c>)
 800524e:	4299      	cmp	r1, r3
 8005250:	d004      	beq.n	800525c <cleanup_stdio+0x30>
 8005252:	4620      	mov	r0, r4
 8005254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005258:	f001 be0a 	b.w	8006e70 <_fflush_r>
 800525c:	bd10      	pop	{r4, pc}
 800525e:	bf00      	nop
 8005260:	2000081c 	.word	0x2000081c
 8005264:	20000884 	.word	0x20000884
 8005268:	200008ec 	.word	0x200008ec

0800526c <global_stdio_init.part.0>:
 800526c:	b510      	push	{r4, lr}
 800526e:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <global_stdio_init.part.0+0x30>)
 8005270:	4c0b      	ldr	r4, [pc, #44]	@ (80052a0 <global_stdio_init.part.0+0x34>)
 8005272:	4a0c      	ldr	r2, [pc, #48]	@ (80052a4 <global_stdio_init.part.0+0x38>)
 8005274:	4620      	mov	r0, r4
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	2104      	movs	r1, #4
 800527a:	2200      	movs	r2, #0
 800527c:	f7ff ff94 	bl	80051a8 <std>
 8005280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005284:	2201      	movs	r2, #1
 8005286:	2109      	movs	r1, #9
 8005288:	f7ff ff8e 	bl	80051a8 <std>
 800528c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005290:	2202      	movs	r2, #2
 8005292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005296:	2112      	movs	r1, #18
 8005298:	f7ff bf86 	b.w	80051a8 <std>
 800529c:	20000954 	.word	0x20000954
 80052a0:	2000081c 	.word	0x2000081c
 80052a4:	08005215 	.word	0x08005215

080052a8 <__sfp_lock_acquire>:
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <__sfp_lock_acquire+0x8>)
 80052aa:	f000 b922 	b.w	80054f2 <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	2000095d 	.word	0x2000095d

080052b4 <__sfp_lock_release>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__sfp_lock_release+0x8>)
 80052b6:	f000 b91d 	b.w	80054f4 <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	2000095d 	.word	0x2000095d

080052c0 <__sinit>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4604      	mov	r4, r0
 80052c4:	f7ff fff0 	bl	80052a8 <__sfp_lock_acquire>
 80052c8:	6a23      	ldr	r3, [r4, #32]
 80052ca:	b11b      	cbz	r3, 80052d4 <__sinit+0x14>
 80052cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d0:	f7ff bff0 	b.w	80052b4 <__sfp_lock_release>
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <__sinit+0x28>)
 80052d6:	6223      	str	r3, [r4, #32]
 80052d8:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <__sinit+0x2c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f5      	bne.n	80052cc <__sinit+0xc>
 80052e0:	f7ff ffc4 	bl	800526c <global_stdio_init.part.0>
 80052e4:	e7f2      	b.n	80052cc <__sinit+0xc>
 80052e6:	bf00      	nop
 80052e8:	0800522d 	.word	0x0800522d
 80052ec:	20000954 	.word	0x20000954

080052f0 <_fwalk_sglue>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	4607      	mov	r7, r0
 80052f6:	4688      	mov	r8, r1
 80052f8:	4614      	mov	r4, r2
 80052fa:	2600      	movs	r6, #0
 80052fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005300:	f1b9 0901 	subs.w	r9, r9, #1
 8005304:	d505      	bpl.n	8005312 <_fwalk_sglue+0x22>
 8005306:	6824      	ldr	r4, [r4, #0]
 8005308:	2c00      	cmp	r4, #0
 800530a:	d1f7      	bne.n	80052fc <_fwalk_sglue+0xc>
 800530c:	4630      	mov	r0, r6
 800530e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d907      	bls.n	8005328 <_fwalk_sglue+0x38>
 8005318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800531c:	3301      	adds	r3, #1
 800531e:	d003      	beq.n	8005328 <_fwalk_sglue+0x38>
 8005320:	4629      	mov	r1, r5
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	4306      	orrs	r6, r0
 8005328:	3568      	adds	r5, #104	@ 0x68
 800532a:	e7e9      	b.n	8005300 <_fwalk_sglue+0x10>

0800532c <siprintf>:
 800532c:	b40e      	push	{r1, r2, r3}
 800532e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005332:	b510      	push	{r4, lr}
 8005334:	2400      	movs	r4, #0
 8005336:	b09d      	sub	sp, #116	@ 0x74
 8005338:	ab1f      	add	r3, sp, #124	@ 0x7c
 800533a:	9002      	str	r0, [sp, #8]
 800533c:	9006      	str	r0, [sp, #24]
 800533e:	9107      	str	r1, [sp, #28]
 8005340:	9104      	str	r1, [sp, #16]
 8005342:	4809      	ldr	r0, [pc, #36]	@ (8005368 <siprintf+0x3c>)
 8005344:	4909      	ldr	r1, [pc, #36]	@ (800536c <siprintf+0x40>)
 8005346:	f853 2b04 	ldr.w	r2, [r3], #4
 800534a:	9105      	str	r1, [sp, #20]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	a902      	add	r1, sp, #8
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005354:	f001 fc10 	bl	8006b78 <_svfiprintf_r>
 8005358:	9b02      	ldr	r3, [sp, #8]
 800535a:	701c      	strb	r4, [r3, #0]
 800535c:	b01d      	add	sp, #116	@ 0x74
 800535e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005362:	b003      	add	sp, #12
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000020 	.word	0x20000020
 800536c:	ffff0208 	.word	0xffff0208

08005370 <__sread>:
 8005370:	b510      	push	{r4, lr}
 8005372:	460c      	mov	r4, r1
 8005374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005378:	f000 f86c 	bl	8005454 <_read_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	bfab      	itete	ge
 8005380:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005382:	89a3      	ldrhlt	r3, [r4, #12]
 8005384:	181b      	addge	r3, r3, r0
 8005386:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800538a:	bfac      	ite	ge
 800538c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800538e:	81a3      	strhlt	r3, [r4, #12]
 8005390:	bd10      	pop	{r4, pc}

08005392 <__swrite>:
 8005392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005396:	461f      	mov	r7, r3
 8005398:	898b      	ldrh	r3, [r1, #12]
 800539a:	4605      	mov	r5, r0
 800539c:	05db      	lsls	r3, r3, #23
 800539e:	460c      	mov	r4, r1
 80053a0:	4616      	mov	r6, r2
 80053a2:	d505      	bpl.n	80053b0 <__swrite+0x1e>
 80053a4:	2302      	movs	r3, #2
 80053a6:	2200      	movs	r2, #0
 80053a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ac:	f000 f840 	bl	8005430 <_lseek_r>
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	4632      	mov	r2, r6
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053b8:	81a3      	strh	r3, [r4, #12]
 80053ba:	4628      	mov	r0, r5
 80053bc:	463b      	mov	r3, r7
 80053be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053c6:	f000 b857 	b.w	8005478 <_write_r>

080053ca <__sseek>:
 80053ca:	b510      	push	{r4, lr}
 80053cc:	460c      	mov	r4, r1
 80053ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d2:	f000 f82d 	bl	8005430 <_lseek_r>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	bf15      	itete	ne
 80053dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053e6:	81a3      	strheq	r3, [r4, #12]
 80053e8:	bf18      	it	ne
 80053ea:	81a3      	strhne	r3, [r4, #12]
 80053ec:	bd10      	pop	{r4, pc}

080053ee <__sclose>:
 80053ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f2:	f000 b80d 	b.w	8005410 <_close_r>

080053f6 <memset>:
 80053f6:	4603      	mov	r3, r0
 80053f8:	4402      	add	r2, r0
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d100      	bne.n	8005400 <memset+0xa>
 80053fe:	4770      	bx	lr
 8005400:	f803 1b01 	strb.w	r1, [r3], #1
 8005404:	e7f9      	b.n	80053fa <memset+0x4>
	...

08005408 <_localeconv_r>:
 8005408:	4800      	ldr	r0, [pc, #0]	@ (800540c <_localeconv_r+0x4>)
 800540a:	4770      	bx	lr
 800540c:	20000160 	.word	0x20000160

08005410 <_close_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	2300      	movs	r3, #0
 8005414:	4d05      	ldr	r5, [pc, #20]	@ (800542c <_close_r+0x1c>)
 8005416:	4604      	mov	r4, r0
 8005418:	4608      	mov	r0, r1
 800541a:	602b      	str	r3, [r5, #0]
 800541c:	f7fc fd97 	bl	8001f4e <_close>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_close_r+0x1a>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_close_r+0x1a>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20000958 	.word	0x20000958

08005430 <_lseek_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	2200      	movs	r2, #0
 800543a:	4d05      	ldr	r5, [pc, #20]	@ (8005450 <_lseek_r+0x20>)
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc fda9 	bl	8001f96 <_lseek>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_lseek_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_lseek_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000958 	.word	0x20000958

08005454 <_read_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	2200      	movs	r2, #0
 800545e:	4d05      	ldr	r5, [pc, #20]	@ (8005474 <_read_r+0x20>)
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc fd3a 	bl	8001edc <_read>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_read_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_read_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000958 	.word	0x20000958

08005478 <_write_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	4611      	mov	r1, r2
 8005480:	2200      	movs	r2, #0
 8005482:	4d05      	ldr	r5, [pc, #20]	@ (8005498 <_write_r+0x20>)
 8005484:	602a      	str	r2, [r5, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	f7fc fd45 	bl	8001f16 <_write>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_write_r+0x1e>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_write_r+0x1e>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	20000958 	.word	0x20000958

0800549c <__errno>:
 800549c:	4b01      	ldr	r3, [pc, #4]	@ (80054a4 <__errno+0x8>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000020 	.word	0x20000020

080054a8 <__libc_init_array>:
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	2600      	movs	r6, #0
 80054ac:	4d0c      	ldr	r5, [pc, #48]	@ (80054e0 <__libc_init_array+0x38>)
 80054ae:	4c0d      	ldr	r4, [pc, #52]	@ (80054e4 <__libc_init_array+0x3c>)
 80054b0:	1b64      	subs	r4, r4, r5
 80054b2:	10a4      	asrs	r4, r4, #2
 80054b4:	42a6      	cmp	r6, r4
 80054b6:	d109      	bne.n	80054cc <__libc_init_array+0x24>
 80054b8:	f002 ff82 	bl	80083c0 <_init>
 80054bc:	2600      	movs	r6, #0
 80054be:	4d0a      	ldr	r5, [pc, #40]	@ (80054e8 <__libc_init_array+0x40>)
 80054c0:	4c0a      	ldr	r4, [pc, #40]	@ (80054ec <__libc_init_array+0x44>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	d105      	bne.n	80054d6 <__libc_init_array+0x2e>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d0:	4798      	blx	r3
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7ee      	b.n	80054b4 <__libc_init_array+0xc>
 80054d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054da:	4798      	blx	r3
 80054dc:	3601      	adds	r6, #1
 80054de:	e7f2      	b.n	80054c6 <__libc_init_array+0x1e>
 80054e0:	08008848 	.word	0x08008848
 80054e4:	08008848 	.word	0x08008848
 80054e8:	08008848 	.word	0x08008848
 80054ec:	0800884c 	.word	0x0800884c

080054f0 <__retarget_lock_init_recursive>:
 80054f0:	4770      	bx	lr

080054f2 <__retarget_lock_acquire_recursive>:
 80054f2:	4770      	bx	lr

080054f4 <__retarget_lock_release_recursive>:
 80054f4:	4770      	bx	lr

080054f6 <memchr>:
 80054f6:	4603      	mov	r3, r0
 80054f8:	b510      	push	{r4, lr}
 80054fa:	b2c9      	uxtb	r1, r1
 80054fc:	4402      	add	r2, r0
 80054fe:	4293      	cmp	r3, r2
 8005500:	4618      	mov	r0, r3
 8005502:	d101      	bne.n	8005508 <memchr+0x12>
 8005504:	2000      	movs	r0, #0
 8005506:	e003      	b.n	8005510 <memchr+0x1a>
 8005508:	7804      	ldrb	r4, [r0, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	428c      	cmp	r4, r1
 800550e:	d1f6      	bne.n	80054fe <memchr+0x8>
 8005510:	bd10      	pop	{r4, pc}

08005512 <quorem>:
 8005512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005516:	6903      	ldr	r3, [r0, #16]
 8005518:	690c      	ldr	r4, [r1, #16]
 800551a:	4607      	mov	r7, r0
 800551c:	42a3      	cmp	r3, r4
 800551e:	db7e      	blt.n	800561e <quorem+0x10c>
 8005520:	3c01      	subs	r4, #1
 8005522:	00a3      	lsls	r3, r4, #2
 8005524:	f100 0514 	add.w	r5, r0, #20
 8005528:	f101 0814 	add.w	r8, r1, #20
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800553c:	3301      	adds	r3, #1
 800553e:	429a      	cmp	r2, r3
 8005540:	fbb2 f6f3 	udiv	r6, r2, r3
 8005544:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005548:	d32e      	bcc.n	80055a8 <quorem+0x96>
 800554a:	f04f 0a00 	mov.w	sl, #0
 800554e:	46c4      	mov	ip, r8
 8005550:	46ae      	mov	lr, r5
 8005552:	46d3      	mov	fp, sl
 8005554:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005558:	b298      	uxth	r0, r3
 800555a:	fb06 a000 	mla	r0, r6, r0, sl
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	0c02      	lsrs	r2, r0, #16
 8005562:	fb06 2303 	mla	r3, r6, r3, r2
 8005566:	f8de 2000 	ldr.w	r2, [lr]
 800556a:	b280      	uxth	r0, r0
 800556c:	b292      	uxth	r2, r2
 800556e:	1a12      	subs	r2, r2, r0
 8005570:	445a      	add	r2, fp
 8005572:	f8de 0000 	ldr.w	r0, [lr]
 8005576:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800557a:	b29b      	uxth	r3, r3
 800557c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005580:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005584:	b292      	uxth	r2, r2
 8005586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800558a:	45e1      	cmp	r9, ip
 800558c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005590:	f84e 2b04 	str.w	r2, [lr], #4
 8005594:	d2de      	bcs.n	8005554 <quorem+0x42>
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	58eb      	ldr	r3, [r5, r3]
 800559a:	b92b      	cbnz	r3, 80055a8 <quorem+0x96>
 800559c:	9b01      	ldr	r3, [sp, #4]
 800559e:	3b04      	subs	r3, #4
 80055a0:	429d      	cmp	r5, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	d32f      	bcc.n	8005606 <quorem+0xf4>
 80055a6:	613c      	str	r4, [r7, #16]
 80055a8:	4638      	mov	r0, r7
 80055aa:	f001 f981 	bl	80068b0 <__mcmp>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	db25      	blt.n	80055fe <quorem+0xec>
 80055b2:	4629      	mov	r1, r5
 80055b4:	2000      	movs	r0, #0
 80055b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80055ba:	f8d1 c000 	ldr.w	ip, [r1]
 80055be:	fa1f fe82 	uxth.w	lr, r2
 80055c2:	fa1f f38c 	uxth.w	r3, ip
 80055c6:	eba3 030e 	sub.w	r3, r3, lr
 80055ca:	4403      	add	r3, r0
 80055cc:	0c12      	lsrs	r2, r2, #16
 80055ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80055d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055dc:	45c1      	cmp	r9, r8
 80055de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055e2:	f841 3b04 	str.w	r3, [r1], #4
 80055e6:	d2e6      	bcs.n	80055b6 <quorem+0xa4>
 80055e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055f0:	b922      	cbnz	r2, 80055fc <quorem+0xea>
 80055f2:	3b04      	subs	r3, #4
 80055f4:	429d      	cmp	r5, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	d30b      	bcc.n	8005612 <quorem+0x100>
 80055fa:	613c      	str	r4, [r7, #16]
 80055fc:	3601      	adds	r6, #1
 80055fe:	4630      	mov	r0, r6
 8005600:	b003      	add	sp, #12
 8005602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	3b04      	subs	r3, #4
 800560a:	2a00      	cmp	r2, #0
 800560c:	d1cb      	bne.n	80055a6 <quorem+0x94>
 800560e:	3c01      	subs	r4, #1
 8005610:	e7c6      	b.n	80055a0 <quorem+0x8e>
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	3b04      	subs	r3, #4
 8005616:	2a00      	cmp	r2, #0
 8005618:	d1ef      	bne.n	80055fa <quorem+0xe8>
 800561a:	3c01      	subs	r4, #1
 800561c:	e7ea      	b.n	80055f4 <quorem+0xe2>
 800561e:	2000      	movs	r0, #0
 8005620:	e7ee      	b.n	8005600 <quorem+0xee>
 8005622:	0000      	movs	r0, r0
 8005624:	0000      	movs	r0, r0
	...

08005628 <_dtoa_r>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	4614      	mov	r4, r2
 800562e:	461d      	mov	r5, r3
 8005630:	69c7      	ldr	r7, [r0, #28]
 8005632:	b097      	sub	sp, #92	@ 0x5c
 8005634:	4681      	mov	r9, r0
 8005636:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800563a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800563c:	b97f      	cbnz	r7, 800565e <_dtoa_r+0x36>
 800563e:	2010      	movs	r0, #16
 8005640:	f000 fe0e 	bl	8006260 <malloc>
 8005644:	4602      	mov	r2, r0
 8005646:	f8c9 001c 	str.w	r0, [r9, #28]
 800564a:	b920      	cbnz	r0, 8005656 <_dtoa_r+0x2e>
 800564c:	21ef      	movs	r1, #239	@ 0xef
 800564e:	4bac      	ldr	r3, [pc, #688]	@ (8005900 <_dtoa_r+0x2d8>)
 8005650:	48ac      	ldr	r0, [pc, #688]	@ (8005904 <_dtoa_r+0x2dc>)
 8005652:	f001 fc6d 	bl	8006f30 <__assert_func>
 8005656:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800565a:	6007      	str	r7, [r0, #0]
 800565c:	60c7      	str	r7, [r0, #12]
 800565e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	b159      	cbz	r1, 800567e <_dtoa_r+0x56>
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	2301      	movs	r3, #1
 800566a:	4093      	lsls	r3, r2
 800566c:	604a      	str	r2, [r1, #4]
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	4648      	mov	r0, r9
 8005672:	f000 feeb 	bl	800644c <_Bfree>
 8005676:	2200      	movs	r2, #0
 8005678:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	1e2b      	subs	r3, r5, #0
 8005680:	bfaf      	iteee	ge
 8005682:	2300      	movge	r3, #0
 8005684:	2201      	movlt	r2, #1
 8005686:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800568a:	9307      	strlt	r3, [sp, #28]
 800568c:	bfa8      	it	ge
 800568e:	6033      	strge	r3, [r6, #0]
 8005690:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005694:	4b9c      	ldr	r3, [pc, #624]	@ (8005908 <_dtoa_r+0x2e0>)
 8005696:	bfb8      	it	lt
 8005698:	6032      	strlt	r2, [r6, #0]
 800569a:	ea33 0308 	bics.w	r3, r3, r8
 800569e:	d112      	bne.n	80056c6 <_dtoa_r+0x9e>
 80056a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80056ac:	4323      	orrs	r3, r4
 80056ae:	f000 855e 	beq.w	800616e <_dtoa_r+0xb46>
 80056b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800590c <_dtoa_r+0x2e4>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8560 	beq.w	800617e <_dtoa_r+0xb56>
 80056be:	f10a 0303 	add.w	r3, sl, #3
 80056c2:	f000 bd5a 	b.w	800617a <_dtoa_r+0xb52>
 80056c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80056ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	f7fb f967 	bl	80009a8 <__aeabi_dcmpeq>
 80056da:	4607      	mov	r7, r0
 80056dc:	b158      	cbz	r0, 80056f6 <_dtoa_r+0xce>
 80056de:	2301      	movs	r3, #1
 80056e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80056e6:	b113      	cbz	r3, 80056ee <_dtoa_r+0xc6>
 80056e8:	4b89      	ldr	r3, [pc, #548]	@ (8005910 <_dtoa_r+0x2e8>)
 80056ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005914 <_dtoa_r+0x2ec>
 80056f2:	f000 bd44 	b.w	800617e <_dtoa_r+0xb56>
 80056f6:	ab14      	add	r3, sp, #80	@ 0x50
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	ab15      	add	r3, sp, #84	@ 0x54
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	4648      	mov	r0, r9
 8005700:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005704:	f001 f984 	bl	8006a10 <__d2b>
 8005708:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800570c:	9003      	str	r0, [sp, #12]
 800570e:	2e00      	cmp	r6, #0
 8005710:	d078      	beq.n	8005804 <_dtoa_r+0x1dc>
 8005712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005718:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800571c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005720:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005724:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005728:	9712      	str	r7, [sp, #72]	@ 0x48
 800572a:	4619      	mov	r1, r3
 800572c:	2200      	movs	r2, #0
 800572e:	4b7a      	ldr	r3, [pc, #488]	@ (8005918 <_dtoa_r+0x2f0>)
 8005730:	f7fa fd1a 	bl	8000168 <__aeabi_dsub>
 8005734:	a36c      	add	r3, pc, #432	@ (adr r3, 80058e8 <_dtoa_r+0x2c0>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa fecd 	bl	80004d8 <__aeabi_dmul>
 800573e:	a36c      	add	r3, pc, #432	@ (adr r3, 80058f0 <_dtoa_r+0x2c8>)
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fd12 	bl	800016c <__adddf3>
 8005748:	4604      	mov	r4, r0
 800574a:	4630      	mov	r0, r6
 800574c:	460d      	mov	r5, r1
 800574e:	f7fa fe59 	bl	8000404 <__aeabi_i2d>
 8005752:	a369      	add	r3, pc, #420	@ (adr r3, 80058f8 <_dtoa_r+0x2d0>)
 8005754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005758:	f7fa febe 	bl	80004d8 <__aeabi_dmul>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fd02 	bl	800016c <__adddf3>
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	f7fb f964 	bl	8000a38 <__aeabi_d2iz>
 8005770:	2200      	movs	r2, #0
 8005772:	4607      	mov	r7, r0
 8005774:	2300      	movs	r3, #0
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fb f91f 	bl	80009bc <__aeabi_dcmplt>
 800577e:	b140      	cbz	r0, 8005792 <_dtoa_r+0x16a>
 8005780:	4638      	mov	r0, r7
 8005782:	f7fa fe3f 	bl	8000404 <__aeabi_i2d>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	f7fb f90d 	bl	80009a8 <__aeabi_dcmpeq>
 800578e:	b900      	cbnz	r0, 8005792 <_dtoa_r+0x16a>
 8005790:	3f01      	subs	r7, #1
 8005792:	2f16      	cmp	r7, #22
 8005794:	d854      	bhi.n	8005840 <_dtoa_r+0x218>
 8005796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800579a:	4b60      	ldr	r3, [pc, #384]	@ (800591c <_dtoa_r+0x2f4>)
 800579c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a4:	f7fb f90a 	bl	80009bc <__aeabi_dcmplt>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d04b      	beq.n	8005844 <_dtoa_r+0x21c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	3f01      	subs	r7, #1
 80057b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80057b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057b4:	1b9b      	subs	r3, r3, r6
 80057b6:	1e5a      	subs	r2, r3, #1
 80057b8:	bf49      	itett	mi
 80057ba:	f1c3 0301 	rsbmi	r3, r3, #1
 80057be:	2300      	movpl	r3, #0
 80057c0:	9304      	strmi	r3, [sp, #16]
 80057c2:	2300      	movmi	r3, #0
 80057c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80057c6:	bf54      	ite	pl
 80057c8:	9304      	strpl	r3, [sp, #16]
 80057ca:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	db3b      	blt.n	8005848 <_dtoa_r+0x220>
 80057d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d2:	970e      	str	r7, [sp, #56]	@ 0x38
 80057d4:	443b      	add	r3, r7
 80057d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d8:	2300      	movs	r3, #0
 80057da:	930a      	str	r3, [sp, #40]	@ 0x28
 80057dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057de:	2b09      	cmp	r3, #9
 80057e0:	d865      	bhi.n	80058ae <_dtoa_r+0x286>
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	bfc4      	itt	gt
 80057e6:	3b04      	subgt	r3, #4
 80057e8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80057ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057ec:	bfc8      	it	gt
 80057ee:	2400      	movgt	r4, #0
 80057f0:	f1a3 0302 	sub.w	r3, r3, #2
 80057f4:	bfd8      	it	le
 80057f6:	2401      	movle	r4, #1
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d864      	bhi.n	80058c6 <_dtoa_r+0x29e>
 80057fc:	e8df f003 	tbb	[pc, r3]
 8005800:	2c385553 	.word	0x2c385553
 8005804:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005808:	441e      	add	r6, r3
 800580a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800580e:	2b20      	cmp	r3, #32
 8005810:	bfc1      	itttt	gt
 8005812:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005816:	fa08 f803 	lslgt.w	r8, r8, r3
 800581a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800581e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005822:	bfd6      	itet	le
 8005824:	f1c3 0320 	rsble	r3, r3, #32
 8005828:	ea48 0003 	orrgt.w	r0, r8, r3
 800582c:	fa04 f003 	lslle.w	r0, r4, r3
 8005830:	f7fa fdd8 	bl	80003e4 <__aeabi_ui2d>
 8005834:	2201      	movs	r2, #1
 8005836:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800583a:	3e01      	subs	r6, #1
 800583c:	9212      	str	r2, [sp, #72]	@ 0x48
 800583e:	e774      	b.n	800572a <_dtoa_r+0x102>
 8005840:	2301      	movs	r3, #1
 8005842:	e7b5      	b.n	80057b0 <_dtoa_r+0x188>
 8005844:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005846:	e7b4      	b.n	80057b2 <_dtoa_r+0x18a>
 8005848:	9b04      	ldr	r3, [sp, #16]
 800584a:	1bdb      	subs	r3, r3, r7
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	427b      	negs	r3, r7
 8005850:	930a      	str	r3, [sp, #40]	@ 0x28
 8005852:	2300      	movs	r3, #0
 8005854:	930e      	str	r3, [sp, #56]	@ 0x38
 8005856:	e7c1      	b.n	80057dc <_dtoa_r+0x1b4>
 8005858:	2301      	movs	r3, #1
 800585a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800585c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800585e:	eb07 0b03 	add.w	fp, r7, r3
 8005862:	f10b 0301 	add.w	r3, fp, #1
 8005866:	2b01      	cmp	r3, #1
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	bfb8      	it	lt
 800586c:	2301      	movlt	r3, #1
 800586e:	e006      	b.n	800587e <_dtoa_r+0x256>
 8005870:	2301      	movs	r3, #1
 8005872:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005874:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd28      	ble.n	80058cc <_dtoa_r+0x2a4>
 800587a:	469b      	mov	fp, r3
 800587c:	9308      	str	r3, [sp, #32]
 800587e:	2100      	movs	r1, #0
 8005880:	2204      	movs	r2, #4
 8005882:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005886:	f102 0514 	add.w	r5, r2, #20
 800588a:	429d      	cmp	r5, r3
 800588c:	d926      	bls.n	80058dc <_dtoa_r+0x2b4>
 800588e:	6041      	str	r1, [r0, #4]
 8005890:	4648      	mov	r0, r9
 8005892:	f000 fd9b 	bl	80063cc <_Balloc>
 8005896:	4682      	mov	sl, r0
 8005898:	2800      	cmp	r0, #0
 800589a:	d143      	bne.n	8005924 <_dtoa_r+0x2fc>
 800589c:	4602      	mov	r2, r0
 800589e:	f240 11af 	movw	r1, #431	@ 0x1af
 80058a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005920 <_dtoa_r+0x2f8>)
 80058a4:	e6d4      	b.n	8005650 <_dtoa_r+0x28>
 80058a6:	2300      	movs	r3, #0
 80058a8:	e7e3      	b.n	8005872 <_dtoa_r+0x24a>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e7d5      	b.n	800585a <_dtoa_r+0x232>
 80058ae:	2401      	movs	r4, #1
 80058b0:	2300      	movs	r3, #0
 80058b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80058b6:	f04f 3bff 	mov.w	fp, #4294967295
 80058ba:	2200      	movs	r2, #0
 80058bc:	2312      	movs	r3, #18
 80058be:	f8cd b020 	str.w	fp, [sp, #32]
 80058c2:	9221      	str	r2, [sp, #132]	@ 0x84
 80058c4:	e7db      	b.n	800587e <_dtoa_r+0x256>
 80058c6:	2301      	movs	r3, #1
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	e7f4      	b.n	80058b6 <_dtoa_r+0x28e>
 80058cc:	f04f 0b01 	mov.w	fp, #1
 80058d0:	465b      	mov	r3, fp
 80058d2:	f8cd b020 	str.w	fp, [sp, #32]
 80058d6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80058da:	e7d0      	b.n	800587e <_dtoa_r+0x256>
 80058dc:	3101      	adds	r1, #1
 80058de:	0052      	lsls	r2, r2, #1
 80058e0:	e7d1      	b.n	8005886 <_dtoa_r+0x25e>
 80058e2:	bf00      	nop
 80058e4:	f3af 8000 	nop.w
 80058e8:	636f4361 	.word	0x636f4361
 80058ec:	3fd287a7 	.word	0x3fd287a7
 80058f0:	8b60c8b3 	.word	0x8b60c8b3
 80058f4:	3fc68a28 	.word	0x3fc68a28
 80058f8:	509f79fb 	.word	0x509f79fb
 80058fc:	3fd34413 	.word	0x3fd34413
 8005900:	080085d4 	.word	0x080085d4
 8005904:	080085eb 	.word	0x080085eb
 8005908:	7ff00000 	.word	0x7ff00000
 800590c:	080085d0 	.word	0x080085d0
 8005910:	080085a4 	.word	0x080085a4
 8005914:	080085a3 	.word	0x080085a3
 8005918:	3ff80000 	.word	0x3ff80000
 800591c:	08008738 	.word	0x08008738
 8005920:	08008643 	.word	0x08008643
 8005924:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005928:	6018      	str	r0, [r3, #0]
 800592a:	9b08      	ldr	r3, [sp, #32]
 800592c:	2b0e      	cmp	r3, #14
 800592e:	f200 80a1 	bhi.w	8005a74 <_dtoa_r+0x44c>
 8005932:	2c00      	cmp	r4, #0
 8005934:	f000 809e 	beq.w	8005a74 <_dtoa_r+0x44c>
 8005938:	2f00      	cmp	r7, #0
 800593a:	dd33      	ble.n	80059a4 <_dtoa_r+0x37c>
 800593c:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb0 <_dtoa_r+0x588>)
 800593e:	f007 020f 	and.w	r2, r7, #15
 8005942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005946:	05f8      	lsls	r0, r7, #23
 8005948:	e9d3 3400 	ldrd	r3, r4, [r3]
 800594c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005950:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005954:	d516      	bpl.n	8005984 <_dtoa_r+0x35c>
 8005956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800595a:	4b96      	ldr	r3, [pc, #600]	@ (8005bb4 <_dtoa_r+0x58c>)
 800595c:	2603      	movs	r6, #3
 800595e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005962:	f7fa fee3 	bl	800072c <__aeabi_ddiv>
 8005966:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800596a:	f004 040f 	and.w	r4, r4, #15
 800596e:	4d91      	ldr	r5, [pc, #580]	@ (8005bb4 <_dtoa_r+0x58c>)
 8005970:	b954      	cbnz	r4, 8005988 <_dtoa_r+0x360>
 8005972:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597a:	f7fa fed7 	bl	800072c <__aeabi_ddiv>
 800597e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005982:	e028      	b.n	80059d6 <_dtoa_r+0x3ae>
 8005984:	2602      	movs	r6, #2
 8005986:	e7f2      	b.n	800596e <_dtoa_r+0x346>
 8005988:	07e1      	lsls	r1, r4, #31
 800598a:	d508      	bpl.n	800599e <_dtoa_r+0x376>
 800598c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005994:	f7fa fda0 	bl	80004d8 <__aeabi_dmul>
 8005998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800599c:	3601      	adds	r6, #1
 800599e:	1064      	asrs	r4, r4, #1
 80059a0:	3508      	adds	r5, #8
 80059a2:	e7e5      	b.n	8005970 <_dtoa_r+0x348>
 80059a4:	f000 80af 	beq.w	8005b06 <_dtoa_r+0x4de>
 80059a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ac:	427c      	negs	r4, r7
 80059ae:	4b80      	ldr	r3, [pc, #512]	@ (8005bb0 <_dtoa_r+0x588>)
 80059b0:	f004 020f 	and.w	r2, r4, #15
 80059b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa fd8c 	bl	80004d8 <__aeabi_dmul>
 80059c0:	2602      	movs	r6, #2
 80059c2:	2300      	movs	r3, #0
 80059c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059c8:	4d7a      	ldr	r5, [pc, #488]	@ (8005bb4 <_dtoa_r+0x58c>)
 80059ca:	1124      	asrs	r4, r4, #4
 80059cc:	2c00      	cmp	r4, #0
 80059ce:	f040 808f 	bne.w	8005af0 <_dtoa_r+0x4c8>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d3      	bne.n	800597e <_dtoa_r+0x356>
 80059d6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80059da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8094 	beq.w	8005b0a <_dtoa_r+0x4e2>
 80059e2:	2200      	movs	r2, #0
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4b73      	ldr	r3, [pc, #460]	@ (8005bb8 <_dtoa_r+0x590>)
 80059ea:	f7fa ffe7 	bl	80009bc <__aeabi_dcmplt>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f000 808b 	beq.w	8005b0a <_dtoa_r+0x4e2>
 80059f4:	9b08      	ldr	r3, [sp, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8087 	beq.w	8005b0a <_dtoa_r+0x4e2>
 80059fc:	f1bb 0f00 	cmp.w	fp, #0
 8005a00:	dd34      	ble.n	8005a6c <_dtoa_r+0x444>
 8005a02:	4620      	mov	r0, r4
 8005a04:	2200      	movs	r2, #0
 8005a06:	4629      	mov	r1, r5
 8005a08:	4b6c      	ldr	r3, [pc, #432]	@ (8005bbc <_dtoa_r+0x594>)
 8005a0a:	f7fa fd65 	bl	80004d8 <__aeabi_dmul>
 8005a0e:	465c      	mov	r4, fp
 8005a10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005a14:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a18:	3601      	adds	r6, #1
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f7fa fcf2 	bl	8000404 <__aeabi_i2d>
 8005a20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a24:	f7fa fd58 	bl	80004d8 <__aeabi_dmul>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	4b65      	ldr	r3, [pc, #404]	@ (8005bc0 <_dtoa_r+0x598>)
 8005a2c:	f7fa fb9e 	bl	800016c <__adddf3>
 8005a30:	4605      	mov	r5, r0
 8005a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	d16a      	bne.n	8005b10 <_dtoa_r+0x4e8>
 8005a3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4b60      	ldr	r3, [pc, #384]	@ (8005bc4 <_dtoa_r+0x59c>)
 8005a42:	f7fa fb91 	bl	8000168 <__aeabi_dsub>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a4e:	462a      	mov	r2, r5
 8005a50:	4633      	mov	r3, r6
 8005a52:	f7fa ffd1 	bl	80009f8 <__aeabi_dcmpgt>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f040 8298 	bne.w	8005f8c <_dtoa_r+0x964>
 8005a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a60:	462a      	mov	r2, r5
 8005a62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a66:	f7fa ffa9 	bl	80009bc <__aeabi_dcmplt>
 8005a6a:	bb38      	cbnz	r0, 8005abc <_dtoa_r+0x494>
 8005a6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a70:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f2c0 8157 	blt.w	8005d2a <_dtoa_r+0x702>
 8005a7c:	2f0e      	cmp	r7, #14
 8005a7e:	f300 8154 	bgt.w	8005d2a <_dtoa_r+0x702>
 8005a82:	4b4b      	ldr	r3, [pc, #300]	@ (8005bb0 <_dtoa_r+0x588>)
 8005a84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f280 80e5 	bge.w	8005c62 <_dtoa_r+0x63a>
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f300 80e1 	bgt.w	8005c62 <_dtoa_r+0x63a>
 8005aa0:	d10c      	bne.n	8005abc <_dtoa_r+0x494>
 8005aa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4b46      	ldr	r3, [pc, #280]	@ (8005bc4 <_dtoa_r+0x59c>)
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ab2:	f7fa ff97 	bl	80009e4 <__aeabi_dcmpge>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f000 8266 	beq.w	8005f88 <_dtoa_r+0x960>
 8005abc:	2400      	movs	r4, #0
 8005abe:	4625      	mov	r5, r4
 8005ac0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ac2:	4656      	mov	r6, sl
 8005ac4:	ea6f 0803 	mvn.w	r8, r3
 8005ac8:	2700      	movs	r7, #0
 8005aca:	4621      	mov	r1, r4
 8005acc:	4648      	mov	r0, r9
 8005ace:	f000 fcbd 	bl	800644c <_Bfree>
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	f000 80bd 	beq.w	8005c52 <_dtoa_r+0x62a>
 8005ad8:	b12f      	cbz	r7, 8005ae6 <_dtoa_r+0x4be>
 8005ada:	42af      	cmp	r7, r5
 8005adc:	d003      	beq.n	8005ae6 <_dtoa_r+0x4be>
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4648      	mov	r0, r9
 8005ae2:	f000 fcb3 	bl	800644c <_Bfree>
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4648      	mov	r0, r9
 8005aea:	f000 fcaf 	bl	800644c <_Bfree>
 8005aee:	e0b0      	b.n	8005c52 <_dtoa_r+0x62a>
 8005af0:	07e2      	lsls	r2, r4, #31
 8005af2:	d505      	bpl.n	8005b00 <_dtoa_r+0x4d8>
 8005af4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005af8:	f7fa fcee 	bl	80004d8 <__aeabi_dmul>
 8005afc:	2301      	movs	r3, #1
 8005afe:	3601      	adds	r6, #1
 8005b00:	1064      	asrs	r4, r4, #1
 8005b02:	3508      	adds	r5, #8
 8005b04:	e762      	b.n	80059cc <_dtoa_r+0x3a4>
 8005b06:	2602      	movs	r6, #2
 8005b08:	e765      	b.n	80059d6 <_dtoa_r+0x3ae>
 8005b0a:	46b8      	mov	r8, r7
 8005b0c:	9c08      	ldr	r4, [sp, #32]
 8005b0e:	e784      	b.n	8005a1a <_dtoa_r+0x3f2>
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <_dtoa_r+0x588>)
 8005b12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b1c:	4454      	add	r4, sl
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d054      	beq.n	8005bcc <_dtoa_r+0x5a4>
 8005b22:	2000      	movs	r0, #0
 8005b24:	4928      	ldr	r1, [pc, #160]	@ (8005bc8 <_dtoa_r+0x5a0>)
 8005b26:	f7fa fe01 	bl	800072c <__aeabi_ddiv>
 8005b2a:	4633      	mov	r3, r6
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	f7fa fb1b 	bl	8000168 <__aeabi_dsub>
 8005b32:	4656      	mov	r6, sl
 8005b34:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b3c:	f7fa ff7c 	bl	8000a38 <__aeabi_d2iz>
 8005b40:	4605      	mov	r5, r0
 8005b42:	f7fa fc5f 	bl	8000404 <__aeabi_i2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b4e:	f7fa fb0b 	bl	8000168 <__aeabi_dsub>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	3530      	adds	r5, #48	@ 0x30
 8005b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b60:	f806 5b01 	strb.w	r5, [r6], #1
 8005b64:	f7fa ff2a 	bl	80009bc <__aeabi_dcmplt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d172      	bne.n	8005c52 <_dtoa_r+0x62a>
 8005b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b70:	2000      	movs	r0, #0
 8005b72:	4911      	ldr	r1, [pc, #68]	@ (8005bb8 <_dtoa_r+0x590>)
 8005b74:	f7fa faf8 	bl	8000168 <__aeabi_dsub>
 8005b78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b7c:	f7fa ff1e 	bl	80009bc <__aeabi_dcmplt>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f040 80b4 	bne.w	8005cee <_dtoa_r+0x6c6>
 8005b86:	42a6      	cmp	r6, r4
 8005b88:	f43f af70 	beq.w	8005a6c <_dtoa_r+0x444>
 8005b8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <_dtoa_r+0x594>)
 8005b94:	f7fa fca0 	bl	80004d8 <__aeabi_dmul>
 8005b98:	2200      	movs	r2, #0
 8005b9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ba2:	4b06      	ldr	r3, [pc, #24]	@ (8005bbc <_dtoa_r+0x594>)
 8005ba4:	f7fa fc98 	bl	80004d8 <__aeabi_dmul>
 8005ba8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bac:	e7c4      	b.n	8005b38 <_dtoa_r+0x510>
 8005bae:	bf00      	nop
 8005bb0:	08008738 	.word	0x08008738
 8005bb4:	08008710 	.word	0x08008710
 8005bb8:	3ff00000 	.word	0x3ff00000
 8005bbc:	40240000 	.word	0x40240000
 8005bc0:	401c0000 	.word	0x401c0000
 8005bc4:	40140000 	.word	0x40140000
 8005bc8:	3fe00000 	.word	0x3fe00000
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7fa fc82 	bl	80004d8 <__aeabi_dmul>
 8005bd4:	4656      	mov	r6, sl
 8005bd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bda:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be0:	f7fa ff2a 	bl	8000a38 <__aeabi_d2iz>
 8005be4:	4605      	mov	r5, r0
 8005be6:	f7fa fc0d 	bl	8000404 <__aeabi_i2d>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf2:	f7fa fab9 	bl	8000168 <__aeabi_dsub>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	3530      	adds	r5, #48	@ 0x30
 8005bfc:	f806 5b01 	strb.w	r5, [r6], #1
 8005c00:	42a6      	cmp	r6, r4
 8005c02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	d124      	bne.n	8005c56 <_dtoa_r+0x62e>
 8005c0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c10:	4bae      	ldr	r3, [pc, #696]	@ (8005ecc <_dtoa_r+0x8a4>)
 8005c12:	f7fa faab 	bl	800016c <__adddf3>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c1e:	f7fa feeb 	bl	80009f8 <__aeabi_dcmpgt>
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d163      	bne.n	8005cee <_dtoa_r+0x6c6>
 8005c26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	49a7      	ldr	r1, [pc, #668]	@ (8005ecc <_dtoa_r+0x8a4>)
 8005c2e:	f7fa fa9b 	bl	8000168 <__aeabi_dsub>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3a:	f7fa febf 	bl	80009bc <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f43f af14 	beq.w	8005a6c <_dtoa_r+0x444>
 8005c44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005c46:	1e73      	subs	r3, r6, #1
 8005c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c4e:	2b30      	cmp	r3, #48	@ 0x30
 8005c50:	d0f8      	beq.n	8005c44 <_dtoa_r+0x61c>
 8005c52:	4647      	mov	r7, r8
 8005c54:	e03b      	b.n	8005cce <_dtoa_r+0x6a6>
 8005c56:	4b9e      	ldr	r3, [pc, #632]	@ (8005ed0 <_dtoa_r+0x8a8>)
 8005c58:	f7fa fc3e 	bl	80004d8 <__aeabi_dmul>
 8005c5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c60:	e7bc      	b.n	8005bdc <_dtoa_r+0x5b4>
 8005c62:	4656      	mov	r6, sl
 8005c64:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	4629      	mov	r1, r5
 8005c70:	f7fa fd5c 	bl	800072c <__aeabi_ddiv>
 8005c74:	f7fa fee0 	bl	8000a38 <__aeabi_d2iz>
 8005c78:	4680      	mov	r8, r0
 8005c7a:	f7fa fbc3 	bl	8000404 <__aeabi_i2d>
 8005c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c82:	f7fa fc29 	bl	80004d8 <__aeabi_dmul>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7fa fa6b 	bl	8000168 <__aeabi_dsub>
 8005c92:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c96:	9d08      	ldr	r5, [sp, #32]
 8005c98:	f806 4b01 	strb.w	r4, [r6], #1
 8005c9c:	eba6 040a 	sub.w	r4, r6, sl
 8005ca0:	42a5      	cmp	r5, r4
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	d133      	bne.n	8005d10 <_dtoa_r+0x6e8>
 8005ca8:	f7fa fa60 	bl	800016c <__adddf3>
 8005cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	460d      	mov	r5, r1
 8005cb4:	f7fa fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8005cb8:	b9c0      	cbnz	r0, 8005cec <_dtoa_r+0x6c4>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa fe71 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc6:	b110      	cbz	r0, 8005cce <_dtoa_r+0x6a6>
 8005cc8:	f018 0f01 	tst.w	r8, #1
 8005ccc:	d10e      	bne.n	8005cec <_dtoa_r+0x6c4>
 8005cce:	4648      	mov	r0, r9
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	f000 fbbb 	bl	800644c <_Bfree>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	7033      	strb	r3, [r6, #0]
 8005cda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005cdc:	3701      	adds	r7, #1
 8005cde:	601f      	str	r7, [r3, #0]
 8005ce0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 824b 	beq.w	800617e <_dtoa_r+0xb56>
 8005ce8:	601e      	str	r6, [r3, #0]
 8005cea:	e248      	b.n	800617e <_dtoa_r+0xb56>
 8005cec:	46b8      	mov	r8, r7
 8005cee:	4633      	mov	r3, r6
 8005cf0:	461e      	mov	r6, r3
 8005cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf6:	2a39      	cmp	r2, #57	@ 0x39
 8005cf8:	d106      	bne.n	8005d08 <_dtoa_r+0x6e0>
 8005cfa:	459a      	cmp	sl, r3
 8005cfc:	d1f8      	bne.n	8005cf0 <_dtoa_r+0x6c8>
 8005cfe:	2230      	movs	r2, #48	@ 0x30
 8005d00:	f108 0801 	add.w	r8, r8, #1
 8005d04:	f88a 2000 	strb.w	r2, [sl]
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	e7a0      	b.n	8005c52 <_dtoa_r+0x62a>
 8005d10:	2200      	movs	r2, #0
 8005d12:	4b6f      	ldr	r3, [pc, #444]	@ (8005ed0 <_dtoa_r+0x8a8>)
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	f7fa fe42 	bl	80009a8 <__aeabi_dcmpeq>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d09f      	beq.n	8005c68 <_dtoa_r+0x640>
 8005d28:	e7d1      	b.n	8005cce <_dtoa_r+0x6a6>
 8005d2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	f000 80ea 	beq.w	8005f06 <_dtoa_r+0x8de>
 8005d32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d34:	2a01      	cmp	r2, #1
 8005d36:	f300 80cd 	bgt.w	8005ed4 <_dtoa_r+0x8ac>
 8005d3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d3c:	2a00      	cmp	r2, #0
 8005d3e:	f000 80c1 	beq.w	8005ec4 <_dtoa_r+0x89c>
 8005d42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005d46:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d48:	9e04      	ldr	r6, [sp, #16]
 8005d4a:	9a04      	ldr	r2, [sp, #16]
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	441a      	add	r2, r3
 8005d50:	9204      	str	r2, [sp, #16]
 8005d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d54:	4648      	mov	r0, r9
 8005d56:	441a      	add	r2, r3
 8005d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d5a:	f000 fc2b 	bl	80065b4 <__i2b>
 8005d5e:	4605      	mov	r5, r0
 8005d60:	b166      	cbz	r6, 8005d7c <_dtoa_r+0x754>
 8005d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dd09      	ble.n	8005d7c <_dtoa_r+0x754>
 8005d68:	42b3      	cmp	r3, r6
 8005d6a:	bfa8      	it	ge
 8005d6c:	4633      	movge	r3, r6
 8005d6e:	9a04      	ldr	r2, [sp, #16]
 8005d70:	1af6      	subs	r6, r6, r3
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	9204      	str	r2, [sp, #16]
 8005d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7e:	b30b      	cbz	r3, 8005dc4 <_dtoa_r+0x79c>
 8005d80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80c6 	beq.w	8005f14 <_dtoa_r+0x8ec>
 8005d88:	2c00      	cmp	r4, #0
 8005d8a:	f000 80c0 	beq.w	8005f0e <_dtoa_r+0x8e6>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4622      	mov	r2, r4
 8005d92:	4648      	mov	r0, r9
 8005d94:	f000 fcc6 	bl	8006724 <__pow5mult>
 8005d98:	9a03      	ldr	r2, [sp, #12]
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	4648      	mov	r0, r9
 8005da0:	f000 fc1e 	bl	80065e0 <__multiply>
 8005da4:	9903      	ldr	r1, [sp, #12]
 8005da6:	4680      	mov	r8, r0
 8005da8:	4648      	mov	r0, r9
 8005daa:	f000 fb4f 	bl	800644c <_Bfree>
 8005dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db0:	1b1b      	subs	r3, r3, r4
 8005db2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db4:	f000 80b1 	beq.w	8005f1a <_dtoa_r+0x8f2>
 8005db8:	4641      	mov	r1, r8
 8005dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dbc:	4648      	mov	r0, r9
 8005dbe:	f000 fcb1 	bl	8006724 <__pow5mult>
 8005dc2:	9003      	str	r0, [sp, #12]
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4648      	mov	r0, r9
 8005dc8:	f000 fbf4 	bl	80065b4 <__i2b>
 8005dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dce:	4604      	mov	r4, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 81d8 	beq.w	8006186 <_dtoa_r+0xb5e>
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4601      	mov	r1, r0
 8005dda:	4648      	mov	r0, r9
 8005ddc:	f000 fca2 	bl	8006724 <__pow5mult>
 8005de0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005de2:	4604      	mov	r4, r0
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	f300 809f 	bgt.w	8005f28 <_dtoa_r+0x900>
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 8097 	bne.w	8005f20 <_dtoa_r+0x8f8>
 8005df2:	9b07      	ldr	r3, [sp, #28]
 8005df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f040 8093 	bne.w	8005f24 <_dtoa_r+0x8fc>
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e04:	0d1b      	lsrs	r3, r3, #20
 8005e06:	051b      	lsls	r3, r3, #20
 8005e08:	b133      	cbz	r3, 8005e18 <_dtoa_r+0x7f0>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	9304      	str	r3, [sp, #16]
 8005e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e12:	3301      	adds	r3, #1
 8005e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e16:	2301      	movs	r3, #1
 8005e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 81b8 	beq.w	8006192 <_dtoa_r+0xb6a>
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e28:	6918      	ldr	r0, [r3, #16]
 8005e2a:	f000 fb77 	bl	800651c <__hi0bits>
 8005e2e:	f1c0 0020 	rsb	r0, r0, #32
 8005e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e34:	4418      	add	r0, r3
 8005e36:	f010 001f 	ands.w	r0, r0, #31
 8005e3a:	f000 8082 	beq.w	8005f42 <_dtoa_r+0x91a>
 8005e3e:	f1c0 0320 	rsb	r3, r0, #32
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	dd73      	ble.n	8005f2e <_dtoa_r+0x906>
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	f1c0 001c 	rsb	r0, r0, #28
 8005e4c:	4403      	add	r3, r0
 8005e4e:	9304      	str	r3, [sp, #16]
 8005e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e52:	4406      	add	r6, r0
 8005e54:	4403      	add	r3, r0
 8005e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e58:	9b04      	ldr	r3, [sp, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dd05      	ble.n	8005e6a <_dtoa_r+0x842>
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4648      	mov	r0, r9
 8005e62:	9903      	ldr	r1, [sp, #12]
 8005e64:	f000 fcb8 	bl	80067d8 <__lshift>
 8005e68:	9003      	str	r0, [sp, #12]
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd05      	ble.n	8005e7c <_dtoa_r+0x854>
 8005e70:	4621      	mov	r1, r4
 8005e72:	461a      	mov	r2, r3
 8005e74:	4648      	mov	r0, r9
 8005e76:	f000 fcaf 	bl	80067d8 <__lshift>
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d061      	beq.n	8005f46 <_dtoa_r+0x91e>
 8005e82:	4621      	mov	r1, r4
 8005e84:	9803      	ldr	r0, [sp, #12]
 8005e86:	f000 fd13 	bl	80068b0 <__mcmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	da5b      	bge.n	8005f46 <_dtoa_r+0x91e>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	220a      	movs	r2, #10
 8005e92:	4648      	mov	r0, r9
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	f000 fafb 	bl	8006490 <__multadd>
 8005e9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e9c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ea0:	9003      	str	r0, [sp, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8177 	beq.w	8006196 <_dtoa_r+0xb6e>
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	2300      	movs	r3, #0
 8005eac:	220a      	movs	r2, #10
 8005eae:	4648      	mov	r0, r9
 8005eb0:	f000 faee 	bl	8006490 <__multadd>
 8005eb4:	f1bb 0f00 	cmp.w	fp, #0
 8005eb8:	4605      	mov	r5, r0
 8005eba:	dc6f      	bgt.n	8005f9c <_dtoa_r+0x974>
 8005ebc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	dc49      	bgt.n	8005f56 <_dtoa_r+0x92e>
 8005ec2:	e06b      	b.n	8005f9c <_dtoa_r+0x974>
 8005ec4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005eca:	e73c      	b.n	8005d46 <_dtoa_r+0x71e>
 8005ecc:	3fe00000 	.word	0x3fe00000
 8005ed0:	40240000 	.word	0x40240000
 8005ed4:	9b08      	ldr	r3, [sp, #32]
 8005ed6:	1e5c      	subs	r4, r3, #1
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005eda:	42a3      	cmp	r3, r4
 8005edc:	db09      	blt.n	8005ef2 <_dtoa_r+0x8ca>
 8005ede:	1b1c      	subs	r4, r3, r4
 8005ee0:	9b08      	ldr	r3, [sp, #32]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f6bf af30 	bge.w	8005d48 <_dtoa_r+0x720>
 8005ee8:	9b04      	ldr	r3, [sp, #16]
 8005eea:	9a08      	ldr	r2, [sp, #32]
 8005eec:	1a9e      	subs	r6, r3, r2
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e72b      	b.n	8005d4a <_dtoa_r+0x722>
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ef6:	1ae3      	subs	r3, r4, r3
 8005ef8:	441a      	add	r2, r3
 8005efa:	940a      	str	r4, [sp, #40]	@ 0x28
 8005efc:	9e04      	ldr	r6, [sp, #16]
 8005efe:	2400      	movs	r4, #0
 8005f00:	9b08      	ldr	r3, [sp, #32]
 8005f02:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f04:	e721      	b.n	8005d4a <_dtoa_r+0x722>
 8005f06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f08:	9e04      	ldr	r6, [sp, #16]
 8005f0a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f0c:	e728      	b.n	8005d60 <_dtoa_r+0x738>
 8005f0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f12:	e751      	b.n	8005db8 <_dtoa_r+0x790>
 8005f14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f16:	9903      	ldr	r1, [sp, #12]
 8005f18:	e750      	b.n	8005dbc <_dtoa_r+0x794>
 8005f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f1e:	e751      	b.n	8005dc4 <_dtoa_r+0x79c>
 8005f20:	2300      	movs	r3, #0
 8005f22:	e779      	b.n	8005e18 <_dtoa_r+0x7f0>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	e777      	b.n	8005e18 <_dtoa_r+0x7f0>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f2c:	e779      	b.n	8005e22 <_dtoa_r+0x7fa>
 8005f2e:	d093      	beq.n	8005e58 <_dtoa_r+0x830>
 8005f30:	9a04      	ldr	r2, [sp, #16]
 8005f32:	331c      	adds	r3, #28
 8005f34:	441a      	add	r2, r3
 8005f36:	9204      	str	r2, [sp, #16]
 8005f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f3a:	441e      	add	r6, r3
 8005f3c:	441a      	add	r2, r3
 8005f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f40:	e78a      	b.n	8005e58 <_dtoa_r+0x830>
 8005f42:	4603      	mov	r3, r0
 8005f44:	e7f4      	b.n	8005f30 <_dtoa_r+0x908>
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	46b8      	mov	r8, r7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dc20      	bgt.n	8005f90 <_dtoa_r+0x968>
 8005f4e:	469b      	mov	fp, r3
 8005f50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	dd1e      	ble.n	8005f94 <_dtoa_r+0x96c>
 8005f56:	f1bb 0f00 	cmp.w	fp, #0
 8005f5a:	f47f adb1 	bne.w	8005ac0 <_dtoa_r+0x498>
 8005f5e:	4621      	mov	r1, r4
 8005f60:	465b      	mov	r3, fp
 8005f62:	2205      	movs	r2, #5
 8005f64:	4648      	mov	r0, r9
 8005f66:	f000 fa93 	bl	8006490 <__multadd>
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	9803      	ldr	r0, [sp, #12]
 8005f70:	f000 fc9e 	bl	80068b0 <__mcmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	f77f ada3 	ble.w	8005ac0 <_dtoa_r+0x498>
 8005f7a:	4656      	mov	r6, sl
 8005f7c:	2331      	movs	r3, #49	@ 0x31
 8005f7e:	f108 0801 	add.w	r8, r8, #1
 8005f82:	f806 3b01 	strb.w	r3, [r6], #1
 8005f86:	e59f      	b.n	8005ac8 <_dtoa_r+0x4a0>
 8005f88:	46b8      	mov	r8, r7
 8005f8a:	9c08      	ldr	r4, [sp, #32]
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	e7f4      	b.n	8005f7a <_dtoa_r+0x952>
 8005f90:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8101 	beq.w	800619e <_dtoa_r+0xb76>
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	dd05      	ble.n	8005fac <_dtoa_r+0x984>
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	4632      	mov	r2, r6
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f000 fc17 	bl	80067d8 <__lshift>
 8005faa:	4605      	mov	r5, r0
 8005fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d05c      	beq.n	800606c <_dtoa_r+0xa44>
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	6869      	ldr	r1, [r5, #4]
 8005fb6:	f000 fa09 	bl	80063cc <_Balloc>
 8005fba:	4606      	mov	r6, r0
 8005fbc:	b928      	cbnz	r0, 8005fca <_dtoa_r+0x9a2>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005fc4:	4b80      	ldr	r3, [pc, #512]	@ (80061c8 <_dtoa_r+0xba0>)
 8005fc6:	f7ff bb43 	b.w	8005650 <_dtoa_r+0x28>
 8005fca:	692a      	ldr	r2, [r5, #16]
 8005fcc:	f105 010c 	add.w	r1, r5, #12
 8005fd0:	3202      	adds	r2, #2
 8005fd2:	0092      	lsls	r2, r2, #2
 8005fd4:	300c      	adds	r0, #12
 8005fd6:	f000 ff9d 	bl	8006f14 <memcpy>
 8005fda:	2201      	movs	r2, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4648      	mov	r0, r9
 8005fe0:	f000 fbfa 	bl	80067d8 <__lshift>
 8005fe4:	462f      	mov	r7, r5
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	f10a 0301 	add.w	r3, sl, #1
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	eb0a 030b 	add.w	r3, sl, fp
 8005ff2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff4:	9b06      	ldr	r3, [sp, #24]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	4621      	mov	r1, r4
 8006000:	9803      	ldr	r0, [sp, #12]
 8006002:	f103 3bff 	add.w	fp, r3, #4294967295
 8006006:	f7ff fa84 	bl	8005512 <quorem>
 800600a:	4603      	mov	r3, r0
 800600c:	4639      	mov	r1, r7
 800600e:	3330      	adds	r3, #48	@ 0x30
 8006010:	9006      	str	r0, [sp, #24]
 8006012:	9803      	ldr	r0, [sp, #12]
 8006014:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006016:	f000 fc4b 	bl	80068b0 <__mcmp>
 800601a:	462a      	mov	r2, r5
 800601c:	9008      	str	r0, [sp, #32]
 800601e:	4621      	mov	r1, r4
 8006020:	4648      	mov	r0, r9
 8006022:	f000 fc61 	bl	80068e8 <__mdiff>
 8006026:	68c2      	ldr	r2, [r0, #12]
 8006028:	4606      	mov	r6, r0
 800602a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800602c:	bb02      	cbnz	r2, 8006070 <_dtoa_r+0xa48>
 800602e:	4601      	mov	r1, r0
 8006030:	9803      	ldr	r0, [sp, #12]
 8006032:	f000 fc3d 	bl	80068b0 <__mcmp>
 8006036:	4602      	mov	r2, r0
 8006038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800603a:	4631      	mov	r1, r6
 800603c:	4648      	mov	r0, r9
 800603e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006042:	f000 fa03 	bl	800644c <_Bfree>
 8006046:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006048:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800604a:	9e04      	ldr	r6, [sp, #16]
 800604c:	ea42 0103 	orr.w	r1, r2, r3
 8006050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006052:	4319      	orrs	r1, r3
 8006054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006056:	d10d      	bne.n	8006074 <_dtoa_r+0xa4c>
 8006058:	2b39      	cmp	r3, #57	@ 0x39
 800605a:	d027      	beq.n	80060ac <_dtoa_r+0xa84>
 800605c:	9a08      	ldr	r2, [sp, #32]
 800605e:	2a00      	cmp	r2, #0
 8006060:	dd01      	ble.n	8006066 <_dtoa_r+0xa3e>
 8006062:	9b06      	ldr	r3, [sp, #24]
 8006064:	3331      	adds	r3, #49	@ 0x31
 8006066:	f88b 3000 	strb.w	r3, [fp]
 800606a:	e52e      	b.n	8005aca <_dtoa_r+0x4a2>
 800606c:	4628      	mov	r0, r5
 800606e:	e7b9      	b.n	8005fe4 <_dtoa_r+0x9bc>
 8006070:	2201      	movs	r2, #1
 8006072:	e7e2      	b.n	800603a <_dtoa_r+0xa12>
 8006074:	9908      	ldr	r1, [sp, #32]
 8006076:	2900      	cmp	r1, #0
 8006078:	db04      	blt.n	8006084 <_dtoa_r+0xa5c>
 800607a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800607c:	4301      	orrs	r1, r0
 800607e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006080:	4301      	orrs	r1, r0
 8006082:	d120      	bne.n	80060c6 <_dtoa_r+0xa9e>
 8006084:	2a00      	cmp	r2, #0
 8006086:	ddee      	ble.n	8006066 <_dtoa_r+0xa3e>
 8006088:	2201      	movs	r2, #1
 800608a:	9903      	ldr	r1, [sp, #12]
 800608c:	4648      	mov	r0, r9
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	f000 fba2 	bl	80067d8 <__lshift>
 8006094:	4621      	mov	r1, r4
 8006096:	9003      	str	r0, [sp, #12]
 8006098:	f000 fc0a 	bl	80068b0 <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	9b04      	ldr	r3, [sp, #16]
 80060a0:	dc02      	bgt.n	80060a8 <_dtoa_r+0xa80>
 80060a2:	d1e0      	bne.n	8006066 <_dtoa_r+0xa3e>
 80060a4:	07da      	lsls	r2, r3, #31
 80060a6:	d5de      	bpl.n	8006066 <_dtoa_r+0xa3e>
 80060a8:	2b39      	cmp	r3, #57	@ 0x39
 80060aa:	d1da      	bne.n	8006062 <_dtoa_r+0xa3a>
 80060ac:	2339      	movs	r3, #57	@ 0x39
 80060ae:	f88b 3000 	strb.w	r3, [fp]
 80060b2:	4633      	mov	r3, r6
 80060b4:	461e      	mov	r6, r3
 80060b6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	2a39      	cmp	r2, #57	@ 0x39
 80060be:	d04e      	beq.n	800615e <_dtoa_r+0xb36>
 80060c0:	3201      	adds	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e501      	b.n	8005aca <_dtoa_r+0x4a2>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	dd03      	ble.n	80060d2 <_dtoa_r+0xaaa>
 80060ca:	2b39      	cmp	r3, #57	@ 0x39
 80060cc:	d0ee      	beq.n	80060ac <_dtoa_r+0xa84>
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7c9      	b.n	8006066 <_dtoa_r+0xa3e>
 80060d2:	9a04      	ldr	r2, [sp, #16]
 80060d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060da:	428a      	cmp	r2, r1
 80060dc:	d028      	beq.n	8006130 <_dtoa_r+0xb08>
 80060de:	2300      	movs	r3, #0
 80060e0:	220a      	movs	r2, #10
 80060e2:	9903      	ldr	r1, [sp, #12]
 80060e4:	4648      	mov	r0, r9
 80060e6:	f000 f9d3 	bl	8006490 <__multadd>
 80060ea:	42af      	cmp	r7, r5
 80060ec:	9003      	str	r0, [sp, #12]
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f04f 020a 	mov.w	r2, #10
 80060f6:	4639      	mov	r1, r7
 80060f8:	4648      	mov	r0, r9
 80060fa:	d107      	bne.n	800610c <_dtoa_r+0xae4>
 80060fc:	f000 f9c8 	bl	8006490 <__multadd>
 8006100:	4607      	mov	r7, r0
 8006102:	4605      	mov	r5, r0
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	3301      	adds	r3, #1
 8006108:	9304      	str	r3, [sp, #16]
 800610a:	e777      	b.n	8005ffc <_dtoa_r+0x9d4>
 800610c:	f000 f9c0 	bl	8006490 <__multadd>
 8006110:	4629      	mov	r1, r5
 8006112:	4607      	mov	r7, r0
 8006114:	2300      	movs	r3, #0
 8006116:	220a      	movs	r2, #10
 8006118:	4648      	mov	r0, r9
 800611a:	f000 f9b9 	bl	8006490 <__multadd>
 800611e:	4605      	mov	r5, r0
 8006120:	e7f0      	b.n	8006104 <_dtoa_r+0xadc>
 8006122:	f1bb 0f00 	cmp.w	fp, #0
 8006126:	bfcc      	ite	gt
 8006128:	465e      	movgt	r6, fp
 800612a:	2601      	movle	r6, #1
 800612c:	2700      	movs	r7, #0
 800612e:	4456      	add	r6, sl
 8006130:	2201      	movs	r2, #1
 8006132:	9903      	ldr	r1, [sp, #12]
 8006134:	4648      	mov	r0, r9
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	f000 fb4e 	bl	80067d8 <__lshift>
 800613c:	4621      	mov	r1, r4
 800613e:	9003      	str	r0, [sp, #12]
 8006140:	f000 fbb6 	bl	80068b0 <__mcmp>
 8006144:	2800      	cmp	r0, #0
 8006146:	dcb4      	bgt.n	80060b2 <_dtoa_r+0xa8a>
 8006148:	d102      	bne.n	8006150 <_dtoa_r+0xb28>
 800614a:	9b04      	ldr	r3, [sp, #16]
 800614c:	07db      	lsls	r3, r3, #31
 800614e:	d4b0      	bmi.n	80060b2 <_dtoa_r+0xa8a>
 8006150:	4633      	mov	r3, r6
 8006152:	461e      	mov	r6, r3
 8006154:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006158:	2a30      	cmp	r2, #48	@ 0x30
 800615a:	d0fa      	beq.n	8006152 <_dtoa_r+0xb2a>
 800615c:	e4b5      	b.n	8005aca <_dtoa_r+0x4a2>
 800615e:	459a      	cmp	sl, r3
 8006160:	d1a8      	bne.n	80060b4 <_dtoa_r+0xa8c>
 8006162:	2331      	movs	r3, #49	@ 0x31
 8006164:	f108 0801 	add.w	r8, r8, #1
 8006168:	f88a 3000 	strb.w	r3, [sl]
 800616c:	e4ad      	b.n	8005aca <_dtoa_r+0x4a2>
 800616e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006170:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80061cc <_dtoa_r+0xba4>
 8006174:	b11b      	cbz	r3, 800617e <_dtoa_r+0xb56>
 8006176:	f10a 0308 	add.w	r3, sl, #8
 800617a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	4650      	mov	r0, sl
 8006180:	b017      	add	sp, #92	@ 0x5c
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006188:	2b01      	cmp	r3, #1
 800618a:	f77f ae2e 	ble.w	8005dea <_dtoa_r+0x7c2>
 800618e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006190:	930a      	str	r3, [sp, #40]	@ 0x28
 8006192:	2001      	movs	r0, #1
 8006194:	e64d      	b.n	8005e32 <_dtoa_r+0x80a>
 8006196:	f1bb 0f00 	cmp.w	fp, #0
 800619a:	f77f aed9 	ble.w	8005f50 <_dtoa_r+0x928>
 800619e:	4656      	mov	r6, sl
 80061a0:	4621      	mov	r1, r4
 80061a2:	9803      	ldr	r0, [sp, #12]
 80061a4:	f7ff f9b5 	bl	8005512 <quorem>
 80061a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80061ac:	f806 3b01 	strb.w	r3, [r6], #1
 80061b0:	eba6 020a 	sub.w	r2, r6, sl
 80061b4:	4593      	cmp	fp, r2
 80061b6:	ddb4      	ble.n	8006122 <_dtoa_r+0xafa>
 80061b8:	2300      	movs	r3, #0
 80061ba:	220a      	movs	r2, #10
 80061bc:	4648      	mov	r0, r9
 80061be:	9903      	ldr	r1, [sp, #12]
 80061c0:	f000 f966 	bl	8006490 <__multadd>
 80061c4:	9003      	str	r0, [sp, #12]
 80061c6:	e7eb      	b.n	80061a0 <_dtoa_r+0xb78>
 80061c8:	08008643 	.word	0x08008643
 80061cc:	080085c7 	.word	0x080085c7

080061d0 <_free_r>:
 80061d0:	b538      	push	{r3, r4, r5, lr}
 80061d2:	4605      	mov	r5, r0
 80061d4:	2900      	cmp	r1, #0
 80061d6:	d040      	beq.n	800625a <_free_r+0x8a>
 80061d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061dc:	1f0c      	subs	r4, r1, #4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bfb8      	it	lt
 80061e2:	18e4      	addlt	r4, r4, r3
 80061e4:	f000 f8e6 	bl	80063b4 <__malloc_lock>
 80061e8:	4a1c      	ldr	r2, [pc, #112]	@ (800625c <_free_r+0x8c>)
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	b933      	cbnz	r3, 80061fc <_free_r+0x2c>
 80061ee:	6063      	str	r3, [r4, #4]
 80061f0:	6014      	str	r4, [r2, #0]
 80061f2:	4628      	mov	r0, r5
 80061f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061f8:	f000 b8e2 	b.w	80063c0 <__malloc_unlock>
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d908      	bls.n	8006212 <_free_r+0x42>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	1821      	adds	r1, r4, r0
 8006204:	428b      	cmp	r3, r1
 8006206:	bf01      	itttt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	1809      	addeq	r1, r1, r0
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	e7ed      	b.n	80061ee <_free_r+0x1e>
 8006212:	461a      	mov	r2, r3
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b10b      	cbz	r3, 800621c <_free_r+0x4c>
 8006218:	42a3      	cmp	r3, r4
 800621a:	d9fa      	bls.n	8006212 <_free_r+0x42>
 800621c:	6811      	ldr	r1, [r2, #0]
 800621e:	1850      	adds	r0, r2, r1
 8006220:	42a0      	cmp	r0, r4
 8006222:	d10b      	bne.n	800623c <_free_r+0x6c>
 8006224:	6820      	ldr	r0, [r4, #0]
 8006226:	4401      	add	r1, r0
 8006228:	1850      	adds	r0, r2, r1
 800622a:	4283      	cmp	r3, r0
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	d1e0      	bne.n	80061f2 <_free_r+0x22>
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4408      	add	r0, r1
 8006236:	6010      	str	r0, [r2, #0]
 8006238:	6053      	str	r3, [r2, #4]
 800623a:	e7da      	b.n	80061f2 <_free_r+0x22>
 800623c:	d902      	bls.n	8006244 <_free_r+0x74>
 800623e:	230c      	movs	r3, #12
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	e7d6      	b.n	80061f2 <_free_r+0x22>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	1821      	adds	r1, r4, r0
 8006248:	428b      	cmp	r3, r1
 800624a:	bf01      	itttt	eq
 800624c:	6819      	ldreq	r1, [r3, #0]
 800624e:	685b      	ldreq	r3, [r3, #4]
 8006250:	1809      	addeq	r1, r1, r0
 8006252:	6021      	streq	r1, [r4, #0]
 8006254:	6063      	str	r3, [r4, #4]
 8006256:	6054      	str	r4, [r2, #4]
 8006258:	e7cb      	b.n	80061f2 <_free_r+0x22>
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	20000964 	.word	0x20000964

08006260 <malloc>:
 8006260:	4b02      	ldr	r3, [pc, #8]	@ (800626c <malloc+0xc>)
 8006262:	4601      	mov	r1, r0
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f000 b825 	b.w	80062b4 <_malloc_r>
 800626a:	bf00      	nop
 800626c:	20000020 	.word	0x20000020

08006270 <sbrk_aligned>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4e0f      	ldr	r6, [pc, #60]	@ (80062b0 <sbrk_aligned+0x40>)
 8006274:	460c      	mov	r4, r1
 8006276:	6831      	ldr	r1, [r6, #0]
 8006278:	4605      	mov	r5, r0
 800627a:	b911      	cbnz	r1, 8006282 <sbrk_aligned+0x12>
 800627c:	f000 fe3a 	bl	8006ef4 <_sbrk_r>
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fe35 	bl	8006ef4 <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d103      	bne.n	8006296 <sbrk_aligned+0x26>
 800628e:	f04f 34ff 	mov.w	r4, #4294967295
 8006292:	4620      	mov	r0, r4
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d0f8      	beq.n	8006292 <sbrk_aligned+0x22>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 fe26 	bl	8006ef4 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f2      	bne.n	8006292 <sbrk_aligned+0x22>
 80062ac:	e7ef      	b.n	800628e <sbrk_aligned+0x1e>
 80062ae:	bf00      	nop
 80062b0:	20000960 	.word	0x20000960

080062b4 <_malloc_r>:
 80062b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b8:	1ccd      	adds	r5, r1, #3
 80062ba:	f025 0503 	bic.w	r5, r5, #3
 80062be:	3508      	adds	r5, #8
 80062c0:	2d0c      	cmp	r5, #12
 80062c2:	bf38      	it	cc
 80062c4:	250c      	movcc	r5, #12
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	4606      	mov	r6, r0
 80062ca:	db01      	blt.n	80062d0 <_malloc_r+0x1c>
 80062cc:	42a9      	cmp	r1, r5
 80062ce:	d904      	bls.n	80062da <_malloc_r+0x26>
 80062d0:	230c      	movs	r3, #12
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063b0 <_malloc_r+0xfc>
 80062de:	f000 f869 	bl	80063b4 <__malloc_lock>
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	461c      	mov	r4, r3
 80062e8:	bb44      	cbnz	r4, 800633c <_malloc_r+0x88>
 80062ea:	4629      	mov	r1, r5
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbf 	bl	8006270 <sbrk_aligned>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	4604      	mov	r4, r0
 80062f6:	d158      	bne.n	80063aa <_malloc_r+0xf6>
 80062f8:	f8d8 4000 	ldr.w	r4, [r8]
 80062fc:	4627      	mov	r7, r4
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d143      	bne.n	800638a <_malloc_r+0xd6>
 8006302:	2c00      	cmp	r4, #0
 8006304:	d04b      	beq.n	800639e <_malloc_r+0xea>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	4639      	mov	r1, r7
 800630a:	4630      	mov	r0, r6
 800630c:	eb04 0903 	add.w	r9, r4, r3
 8006310:	f000 fdf0 	bl	8006ef4 <_sbrk_r>
 8006314:	4581      	cmp	r9, r0
 8006316:	d142      	bne.n	800639e <_malloc_r+0xea>
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	4630      	mov	r0, r6
 800631c:	1a6d      	subs	r5, r5, r1
 800631e:	4629      	mov	r1, r5
 8006320:	f7ff ffa6 	bl	8006270 <sbrk_aligned>
 8006324:	3001      	adds	r0, #1
 8006326:	d03a      	beq.n	800639e <_malloc_r+0xea>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	442b      	add	r3, r5
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	f8d8 3000 	ldr.w	r3, [r8]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	bb62      	cbnz	r2, 8006390 <_malloc_r+0xdc>
 8006336:	f8c8 7000 	str.w	r7, [r8]
 800633a:	e00f      	b.n	800635c <_malloc_r+0xa8>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1b52      	subs	r2, r2, r5
 8006340:	d420      	bmi.n	8006384 <_malloc_r+0xd0>
 8006342:	2a0b      	cmp	r2, #11
 8006344:	d917      	bls.n	8006376 <_malloc_r+0xc2>
 8006346:	1961      	adds	r1, r4, r5
 8006348:	42a3      	cmp	r3, r4
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	bf18      	it	ne
 800634e:	6059      	strne	r1, [r3, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	bf08      	it	eq
 8006354:	f8c8 1000 	streq.w	r1, [r8]
 8006358:	5162      	str	r2, [r4, r5]
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f82f 	bl	80063c0 <__malloc_unlock>
 8006362:	f104 000b 	add.w	r0, r4, #11
 8006366:	1d23      	adds	r3, r4, #4
 8006368:	f020 0007 	bic.w	r0, r0, #7
 800636c:	1ac2      	subs	r2, r0, r3
 800636e:	bf1c      	itt	ne
 8006370:	1a1b      	subne	r3, r3, r0
 8006372:	50a3      	strne	r3, [r4, r2]
 8006374:	e7af      	b.n	80062d6 <_malloc_r+0x22>
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	42a3      	cmp	r3, r4
 800637a:	bf0c      	ite	eq
 800637c:	f8c8 2000 	streq.w	r2, [r8]
 8006380:	605a      	strne	r2, [r3, #4]
 8006382:	e7eb      	b.n	800635c <_malloc_r+0xa8>
 8006384:	4623      	mov	r3, r4
 8006386:	6864      	ldr	r4, [r4, #4]
 8006388:	e7ae      	b.n	80062e8 <_malloc_r+0x34>
 800638a:	463c      	mov	r4, r7
 800638c:	687f      	ldr	r7, [r7, #4]
 800638e:	e7b6      	b.n	80062fe <_malloc_r+0x4a>
 8006390:	461a      	mov	r2, r3
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	42a3      	cmp	r3, r4
 8006396:	d1fb      	bne.n	8006390 <_malloc_r+0xdc>
 8006398:	2300      	movs	r3, #0
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e7de      	b.n	800635c <_malloc_r+0xa8>
 800639e:	230c      	movs	r3, #12
 80063a0:	4630      	mov	r0, r6
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f000 f80c 	bl	80063c0 <__malloc_unlock>
 80063a8:	e794      	b.n	80062d4 <_malloc_r+0x20>
 80063aa:	6005      	str	r5, [r0, #0]
 80063ac:	e7d6      	b.n	800635c <_malloc_r+0xa8>
 80063ae:	bf00      	nop
 80063b0:	20000964 	.word	0x20000964

080063b4 <__malloc_lock>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__malloc_lock+0x8>)
 80063b6:	f7ff b89c 	b.w	80054f2 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	2000095c 	.word	0x2000095c

080063c0 <__malloc_unlock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_unlock+0x8>)
 80063c2:	f7ff b897 	b.w	80054f4 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	2000095c 	.word	0x2000095c

080063cc <_Balloc>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	69c6      	ldr	r6, [r0, #28]
 80063d0:	4604      	mov	r4, r0
 80063d2:	460d      	mov	r5, r1
 80063d4:	b976      	cbnz	r6, 80063f4 <_Balloc+0x28>
 80063d6:	2010      	movs	r0, #16
 80063d8:	f7ff ff42 	bl	8006260 <malloc>
 80063dc:	4602      	mov	r2, r0
 80063de:	61e0      	str	r0, [r4, #28]
 80063e0:	b920      	cbnz	r0, 80063ec <_Balloc+0x20>
 80063e2:	216b      	movs	r1, #107	@ 0x6b
 80063e4:	4b17      	ldr	r3, [pc, #92]	@ (8006444 <_Balloc+0x78>)
 80063e6:	4818      	ldr	r0, [pc, #96]	@ (8006448 <_Balloc+0x7c>)
 80063e8:	f000 fda2 	bl	8006f30 <__assert_func>
 80063ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063f0:	6006      	str	r6, [r0, #0]
 80063f2:	60c6      	str	r6, [r0, #12]
 80063f4:	69e6      	ldr	r6, [r4, #28]
 80063f6:	68f3      	ldr	r3, [r6, #12]
 80063f8:	b183      	cbz	r3, 800641c <_Balloc+0x50>
 80063fa:	69e3      	ldr	r3, [r4, #28]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006402:	b9b8      	cbnz	r0, 8006434 <_Balloc+0x68>
 8006404:	2101      	movs	r1, #1
 8006406:	fa01 f605 	lsl.w	r6, r1, r5
 800640a:	1d72      	adds	r2, r6, #5
 800640c:	4620      	mov	r0, r4
 800640e:	0092      	lsls	r2, r2, #2
 8006410:	f000 fdac 	bl	8006f6c <_calloc_r>
 8006414:	b160      	cbz	r0, 8006430 <_Balloc+0x64>
 8006416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800641a:	e00e      	b.n	800643a <_Balloc+0x6e>
 800641c:	2221      	movs	r2, #33	@ 0x21
 800641e:	2104      	movs	r1, #4
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fda3 	bl	8006f6c <_calloc_r>
 8006426:	69e3      	ldr	r3, [r4, #28]
 8006428:	60f0      	str	r0, [r6, #12]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e4      	bne.n	80063fa <_Balloc+0x2e>
 8006430:	2000      	movs	r0, #0
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	6802      	ldr	r2, [r0, #0]
 8006436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800643a:	2300      	movs	r3, #0
 800643c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006440:	e7f7      	b.n	8006432 <_Balloc+0x66>
 8006442:	bf00      	nop
 8006444:	080085d4 	.word	0x080085d4
 8006448:	08008654 	.word	0x08008654

0800644c <_Bfree>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	69c6      	ldr	r6, [r0, #28]
 8006450:	4605      	mov	r5, r0
 8006452:	460c      	mov	r4, r1
 8006454:	b976      	cbnz	r6, 8006474 <_Bfree+0x28>
 8006456:	2010      	movs	r0, #16
 8006458:	f7ff ff02 	bl	8006260 <malloc>
 800645c:	4602      	mov	r2, r0
 800645e:	61e8      	str	r0, [r5, #28]
 8006460:	b920      	cbnz	r0, 800646c <_Bfree+0x20>
 8006462:	218f      	movs	r1, #143	@ 0x8f
 8006464:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <_Bfree+0x3c>)
 8006466:	4809      	ldr	r0, [pc, #36]	@ (800648c <_Bfree+0x40>)
 8006468:	f000 fd62 	bl	8006f30 <__assert_func>
 800646c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006470:	6006      	str	r6, [r0, #0]
 8006472:	60c6      	str	r6, [r0, #12]
 8006474:	b13c      	cbz	r4, 8006486 <_Bfree+0x3a>
 8006476:	69eb      	ldr	r3, [r5, #28]
 8006478:	6862      	ldr	r2, [r4, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006480:	6021      	str	r1, [r4, #0]
 8006482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	080085d4 	.word	0x080085d4
 800648c:	08008654 	.word	0x08008654

08006490 <__multadd>:
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	4607      	mov	r7, r0
 8006496:	460c      	mov	r4, r1
 8006498:	461e      	mov	r6, r3
 800649a:	2000      	movs	r0, #0
 800649c:	690d      	ldr	r5, [r1, #16]
 800649e:	f101 0c14 	add.w	ip, r1, #20
 80064a2:	f8dc 3000 	ldr.w	r3, [ip]
 80064a6:	3001      	adds	r0, #1
 80064a8:	b299      	uxth	r1, r3
 80064aa:	fb02 6101 	mla	r1, r2, r1, r6
 80064ae:	0c1e      	lsrs	r6, r3, #16
 80064b0:	0c0b      	lsrs	r3, r1, #16
 80064b2:	fb02 3306 	mla	r3, r2, r6, r3
 80064b6:	b289      	uxth	r1, r1
 80064b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064bc:	4285      	cmp	r5, r0
 80064be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064c2:	f84c 1b04 	str.w	r1, [ip], #4
 80064c6:	dcec      	bgt.n	80064a2 <__multadd+0x12>
 80064c8:	b30e      	cbz	r6, 800650e <__multadd+0x7e>
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dc19      	bgt.n	8006504 <__multadd+0x74>
 80064d0:	6861      	ldr	r1, [r4, #4]
 80064d2:	4638      	mov	r0, r7
 80064d4:	3101      	adds	r1, #1
 80064d6:	f7ff ff79 	bl	80063cc <_Balloc>
 80064da:	4680      	mov	r8, r0
 80064dc:	b928      	cbnz	r0, 80064ea <__multadd+0x5a>
 80064de:	4602      	mov	r2, r0
 80064e0:	21ba      	movs	r1, #186	@ 0xba
 80064e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006514 <__multadd+0x84>)
 80064e4:	480c      	ldr	r0, [pc, #48]	@ (8006518 <__multadd+0x88>)
 80064e6:	f000 fd23 	bl	8006f30 <__assert_func>
 80064ea:	6922      	ldr	r2, [r4, #16]
 80064ec:	f104 010c 	add.w	r1, r4, #12
 80064f0:	3202      	adds	r2, #2
 80064f2:	0092      	lsls	r2, r2, #2
 80064f4:	300c      	adds	r0, #12
 80064f6:	f000 fd0d 	bl	8006f14 <memcpy>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff ffa5 	bl	800644c <_Bfree>
 8006502:	4644      	mov	r4, r8
 8006504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006508:	3501      	adds	r5, #1
 800650a:	615e      	str	r6, [r3, #20]
 800650c:	6125      	str	r5, [r4, #16]
 800650e:	4620      	mov	r0, r4
 8006510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006514:	08008643 	.word	0x08008643
 8006518:	08008654 	.word	0x08008654

0800651c <__hi0bits>:
 800651c:	4603      	mov	r3, r0
 800651e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006522:	bf3a      	itte	cc
 8006524:	0403      	lslcc	r3, r0, #16
 8006526:	2010      	movcc	r0, #16
 8006528:	2000      	movcs	r0, #0
 800652a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800652e:	bf3c      	itt	cc
 8006530:	021b      	lslcc	r3, r3, #8
 8006532:	3008      	addcc	r0, #8
 8006534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006538:	bf3c      	itt	cc
 800653a:	011b      	lslcc	r3, r3, #4
 800653c:	3004      	addcc	r0, #4
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006542:	bf3c      	itt	cc
 8006544:	009b      	lslcc	r3, r3, #2
 8006546:	3002      	addcc	r0, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	db05      	blt.n	8006558 <__hi0bits+0x3c>
 800654c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006550:	f100 0001 	add.w	r0, r0, #1
 8006554:	bf08      	it	eq
 8006556:	2020      	moveq	r0, #32
 8006558:	4770      	bx	lr

0800655a <__lo0bits>:
 800655a:	6803      	ldr	r3, [r0, #0]
 800655c:	4602      	mov	r2, r0
 800655e:	f013 0007 	ands.w	r0, r3, #7
 8006562:	d00b      	beq.n	800657c <__lo0bits+0x22>
 8006564:	07d9      	lsls	r1, r3, #31
 8006566:	d421      	bmi.n	80065ac <__lo0bits+0x52>
 8006568:	0798      	lsls	r0, r3, #30
 800656a:	bf49      	itett	mi
 800656c:	085b      	lsrmi	r3, r3, #1
 800656e:	089b      	lsrpl	r3, r3, #2
 8006570:	2001      	movmi	r0, #1
 8006572:	6013      	strmi	r3, [r2, #0]
 8006574:	bf5c      	itt	pl
 8006576:	2002      	movpl	r0, #2
 8006578:	6013      	strpl	r3, [r2, #0]
 800657a:	4770      	bx	lr
 800657c:	b299      	uxth	r1, r3
 800657e:	b909      	cbnz	r1, 8006584 <__lo0bits+0x2a>
 8006580:	2010      	movs	r0, #16
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	b2d9      	uxtb	r1, r3
 8006586:	b909      	cbnz	r1, 800658c <__lo0bits+0x32>
 8006588:	3008      	adds	r0, #8
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	0719      	lsls	r1, r3, #28
 800658e:	bf04      	itt	eq
 8006590:	091b      	lsreq	r3, r3, #4
 8006592:	3004      	addeq	r0, #4
 8006594:	0799      	lsls	r1, r3, #30
 8006596:	bf04      	itt	eq
 8006598:	089b      	lsreq	r3, r3, #2
 800659a:	3002      	addeq	r0, #2
 800659c:	07d9      	lsls	r1, r3, #31
 800659e:	d403      	bmi.n	80065a8 <__lo0bits+0x4e>
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	f100 0001 	add.w	r0, r0, #1
 80065a6:	d003      	beq.n	80065b0 <__lo0bits+0x56>
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	4770      	bx	lr
 80065ac:	2000      	movs	r0, #0
 80065ae:	4770      	bx	lr
 80065b0:	2020      	movs	r0, #32
 80065b2:	4770      	bx	lr

080065b4 <__i2b>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	460c      	mov	r4, r1
 80065b8:	2101      	movs	r1, #1
 80065ba:	f7ff ff07 	bl	80063cc <_Balloc>
 80065be:	4602      	mov	r2, r0
 80065c0:	b928      	cbnz	r0, 80065ce <__i2b+0x1a>
 80065c2:	f240 1145 	movw	r1, #325	@ 0x145
 80065c6:	4b04      	ldr	r3, [pc, #16]	@ (80065d8 <__i2b+0x24>)
 80065c8:	4804      	ldr	r0, [pc, #16]	@ (80065dc <__i2b+0x28>)
 80065ca:	f000 fcb1 	bl	8006f30 <__assert_func>
 80065ce:	2301      	movs	r3, #1
 80065d0:	6144      	str	r4, [r0, #20]
 80065d2:	6103      	str	r3, [r0, #16]
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	bf00      	nop
 80065d8:	08008643 	.word	0x08008643
 80065dc:	08008654 	.word	0x08008654

080065e0 <__multiply>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	4617      	mov	r7, r2
 80065e6:	690a      	ldr	r2, [r1, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4689      	mov	r9, r1
 80065ec:	429a      	cmp	r2, r3
 80065ee:	bfa2      	ittt	ge
 80065f0:	463b      	movge	r3, r7
 80065f2:	460f      	movge	r7, r1
 80065f4:	4699      	movge	r9, r3
 80065f6:	693d      	ldr	r5, [r7, #16]
 80065f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	eb05 060a 	add.w	r6, r5, sl
 8006604:	42b3      	cmp	r3, r6
 8006606:	b085      	sub	sp, #20
 8006608:	bfb8      	it	lt
 800660a:	3101      	addlt	r1, #1
 800660c:	f7ff fede 	bl	80063cc <_Balloc>
 8006610:	b930      	cbnz	r0, 8006620 <__multiply+0x40>
 8006612:	4602      	mov	r2, r0
 8006614:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006618:	4b40      	ldr	r3, [pc, #256]	@ (800671c <__multiply+0x13c>)
 800661a:	4841      	ldr	r0, [pc, #260]	@ (8006720 <__multiply+0x140>)
 800661c:	f000 fc88 	bl	8006f30 <__assert_func>
 8006620:	f100 0414 	add.w	r4, r0, #20
 8006624:	4623      	mov	r3, r4
 8006626:	2200      	movs	r2, #0
 8006628:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800662c:	4573      	cmp	r3, lr
 800662e:	d320      	bcc.n	8006672 <__multiply+0x92>
 8006630:	f107 0814 	add.w	r8, r7, #20
 8006634:	f109 0114 	add.w	r1, r9, #20
 8006638:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800663c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006640:	9302      	str	r3, [sp, #8]
 8006642:	1beb      	subs	r3, r5, r7
 8006644:	3b15      	subs	r3, #21
 8006646:	f023 0303 	bic.w	r3, r3, #3
 800664a:	3304      	adds	r3, #4
 800664c:	3715      	adds	r7, #21
 800664e:	42bd      	cmp	r5, r7
 8006650:	bf38      	it	cc
 8006652:	2304      	movcc	r3, #4
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	9103      	str	r1, [sp, #12]
 800665a:	428b      	cmp	r3, r1
 800665c:	d80c      	bhi.n	8006678 <__multiply+0x98>
 800665e:	2e00      	cmp	r6, #0
 8006660:	dd03      	ble.n	800666a <__multiply+0x8a>
 8006662:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006666:	2b00      	cmp	r3, #0
 8006668:	d055      	beq.n	8006716 <__multiply+0x136>
 800666a:	6106      	str	r6, [r0, #16]
 800666c:	b005      	add	sp, #20
 800666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	f843 2b04 	str.w	r2, [r3], #4
 8006676:	e7d9      	b.n	800662c <__multiply+0x4c>
 8006678:	f8b1 a000 	ldrh.w	sl, [r1]
 800667c:	f1ba 0f00 	cmp.w	sl, #0
 8006680:	d01f      	beq.n	80066c2 <__multiply+0xe2>
 8006682:	46c4      	mov	ip, r8
 8006684:	46a1      	mov	r9, r4
 8006686:	2700      	movs	r7, #0
 8006688:	f85c 2b04 	ldr.w	r2, [ip], #4
 800668c:	f8d9 3000 	ldr.w	r3, [r9]
 8006690:	fa1f fb82 	uxth.w	fp, r2
 8006694:	b29b      	uxth	r3, r3
 8006696:	fb0a 330b 	mla	r3, sl, fp, r3
 800669a:	443b      	add	r3, r7
 800669c:	f8d9 7000 	ldr.w	r7, [r9]
 80066a0:	0c12      	lsrs	r2, r2, #16
 80066a2:	0c3f      	lsrs	r7, r7, #16
 80066a4:	fb0a 7202 	mla	r2, sl, r2, r7
 80066a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066b2:	4565      	cmp	r5, ip
 80066b4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80066b8:	f849 3b04 	str.w	r3, [r9], #4
 80066bc:	d8e4      	bhi.n	8006688 <__multiply+0xa8>
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	50e7      	str	r7, [r4, r3]
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	3104      	adds	r1, #4
 80066c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80066ca:	f1b9 0f00 	cmp.w	r9, #0
 80066ce:	d020      	beq.n	8006712 <__multiply+0x132>
 80066d0:	4647      	mov	r7, r8
 80066d2:	46a4      	mov	ip, r4
 80066d4:	f04f 0a00 	mov.w	sl, #0
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	f8b7 b000 	ldrh.w	fp, [r7]
 80066de:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	fb09 220b 	mla	r2, r9, fp, r2
 80066e8:	4452      	add	r2, sl
 80066ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ee:	f84c 3b04 	str.w	r3, [ip], #4
 80066f2:	f857 3b04 	ldr.w	r3, [r7], #4
 80066f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066fa:	f8bc 3000 	ldrh.w	r3, [ip]
 80066fe:	42bd      	cmp	r5, r7
 8006700:	fb09 330a 	mla	r3, r9, sl, r3
 8006704:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006708:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800670c:	d8e5      	bhi.n	80066da <__multiply+0xfa>
 800670e:	9a01      	ldr	r2, [sp, #4]
 8006710:	50a3      	str	r3, [r4, r2]
 8006712:	3404      	adds	r4, #4
 8006714:	e79f      	b.n	8006656 <__multiply+0x76>
 8006716:	3e01      	subs	r6, #1
 8006718:	e7a1      	b.n	800665e <__multiply+0x7e>
 800671a:	bf00      	nop
 800671c:	08008643 	.word	0x08008643
 8006720:	08008654 	.word	0x08008654

08006724 <__pow5mult>:
 8006724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006728:	4615      	mov	r5, r2
 800672a:	f012 0203 	ands.w	r2, r2, #3
 800672e:	4607      	mov	r7, r0
 8006730:	460e      	mov	r6, r1
 8006732:	d007      	beq.n	8006744 <__pow5mult+0x20>
 8006734:	4c25      	ldr	r4, [pc, #148]	@ (80067cc <__pow5mult+0xa8>)
 8006736:	3a01      	subs	r2, #1
 8006738:	2300      	movs	r3, #0
 800673a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800673e:	f7ff fea7 	bl	8006490 <__multadd>
 8006742:	4606      	mov	r6, r0
 8006744:	10ad      	asrs	r5, r5, #2
 8006746:	d03d      	beq.n	80067c4 <__pow5mult+0xa0>
 8006748:	69fc      	ldr	r4, [r7, #28]
 800674a:	b97c      	cbnz	r4, 800676c <__pow5mult+0x48>
 800674c:	2010      	movs	r0, #16
 800674e:	f7ff fd87 	bl	8006260 <malloc>
 8006752:	4602      	mov	r2, r0
 8006754:	61f8      	str	r0, [r7, #28]
 8006756:	b928      	cbnz	r0, 8006764 <__pow5mult+0x40>
 8006758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800675c:	4b1c      	ldr	r3, [pc, #112]	@ (80067d0 <__pow5mult+0xac>)
 800675e:	481d      	ldr	r0, [pc, #116]	@ (80067d4 <__pow5mult+0xb0>)
 8006760:	f000 fbe6 	bl	8006f30 <__assert_func>
 8006764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006768:	6004      	str	r4, [r0, #0]
 800676a:	60c4      	str	r4, [r0, #12]
 800676c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006774:	b94c      	cbnz	r4, 800678a <__pow5mult+0x66>
 8006776:	f240 2171 	movw	r1, #625	@ 0x271
 800677a:	4638      	mov	r0, r7
 800677c:	f7ff ff1a 	bl	80065b4 <__i2b>
 8006780:	2300      	movs	r3, #0
 8006782:	4604      	mov	r4, r0
 8006784:	f8c8 0008 	str.w	r0, [r8, #8]
 8006788:	6003      	str	r3, [r0, #0]
 800678a:	f04f 0900 	mov.w	r9, #0
 800678e:	07eb      	lsls	r3, r5, #31
 8006790:	d50a      	bpl.n	80067a8 <__pow5mult+0x84>
 8006792:	4631      	mov	r1, r6
 8006794:	4622      	mov	r2, r4
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff ff22 	bl	80065e0 <__multiply>
 800679c:	4680      	mov	r8, r0
 800679e:	4631      	mov	r1, r6
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fe53 	bl	800644c <_Bfree>
 80067a6:	4646      	mov	r6, r8
 80067a8:	106d      	asrs	r5, r5, #1
 80067aa:	d00b      	beq.n	80067c4 <__pow5mult+0xa0>
 80067ac:	6820      	ldr	r0, [r4, #0]
 80067ae:	b938      	cbnz	r0, 80067c0 <__pow5mult+0x9c>
 80067b0:	4622      	mov	r2, r4
 80067b2:	4621      	mov	r1, r4
 80067b4:	4638      	mov	r0, r7
 80067b6:	f7ff ff13 	bl	80065e0 <__multiply>
 80067ba:	6020      	str	r0, [r4, #0]
 80067bc:	f8c0 9000 	str.w	r9, [r0]
 80067c0:	4604      	mov	r4, r0
 80067c2:	e7e4      	b.n	800678e <__pow5mult+0x6a>
 80067c4:	4630      	mov	r0, r6
 80067c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ca:	bf00      	nop
 80067cc:	08008704 	.word	0x08008704
 80067d0:	080085d4 	.word	0x080085d4
 80067d4:	08008654 	.word	0x08008654

080067d8 <__lshift>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	460c      	mov	r4, r1
 80067de:	4607      	mov	r7, r0
 80067e0:	4691      	mov	r9, r2
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6849      	ldr	r1, [r1, #4]
 80067e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067f0:	f108 0601 	add.w	r6, r8, #1
 80067f4:	42b3      	cmp	r3, r6
 80067f6:	db0b      	blt.n	8006810 <__lshift+0x38>
 80067f8:	4638      	mov	r0, r7
 80067fa:	f7ff fde7 	bl	80063cc <_Balloc>
 80067fe:	4605      	mov	r5, r0
 8006800:	b948      	cbnz	r0, 8006816 <__lshift+0x3e>
 8006802:	4602      	mov	r2, r0
 8006804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006808:	4b27      	ldr	r3, [pc, #156]	@ (80068a8 <__lshift+0xd0>)
 800680a:	4828      	ldr	r0, [pc, #160]	@ (80068ac <__lshift+0xd4>)
 800680c:	f000 fb90 	bl	8006f30 <__assert_func>
 8006810:	3101      	adds	r1, #1
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	e7ee      	b.n	80067f4 <__lshift+0x1c>
 8006816:	2300      	movs	r3, #0
 8006818:	f100 0114 	add.w	r1, r0, #20
 800681c:	f100 0210 	add.w	r2, r0, #16
 8006820:	4618      	mov	r0, r3
 8006822:	4553      	cmp	r3, sl
 8006824:	db33      	blt.n	800688e <__lshift+0xb6>
 8006826:	6920      	ldr	r0, [r4, #16]
 8006828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800682c:	f104 0314 	add.w	r3, r4, #20
 8006830:	f019 091f 	ands.w	r9, r9, #31
 8006834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006838:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800683c:	d02b      	beq.n	8006896 <__lshift+0xbe>
 800683e:	468a      	mov	sl, r1
 8006840:	2200      	movs	r2, #0
 8006842:	f1c9 0e20 	rsb	lr, r9, #32
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	fa00 f009 	lsl.w	r0, r0, r9
 800684c:	4310      	orrs	r0, r2
 800684e:	f84a 0b04 	str.w	r0, [sl], #4
 8006852:	f853 2b04 	ldr.w	r2, [r3], #4
 8006856:	459c      	cmp	ip, r3
 8006858:	fa22 f20e 	lsr.w	r2, r2, lr
 800685c:	d8f3      	bhi.n	8006846 <__lshift+0x6e>
 800685e:	ebac 0304 	sub.w	r3, ip, r4
 8006862:	3b15      	subs	r3, #21
 8006864:	f023 0303 	bic.w	r3, r3, #3
 8006868:	3304      	adds	r3, #4
 800686a:	f104 0015 	add.w	r0, r4, #21
 800686e:	4560      	cmp	r0, ip
 8006870:	bf88      	it	hi
 8006872:	2304      	movhi	r3, #4
 8006874:	50ca      	str	r2, [r1, r3]
 8006876:	b10a      	cbz	r2, 800687c <__lshift+0xa4>
 8006878:	f108 0602 	add.w	r6, r8, #2
 800687c:	3e01      	subs	r6, #1
 800687e:	4638      	mov	r0, r7
 8006880:	4621      	mov	r1, r4
 8006882:	612e      	str	r6, [r5, #16]
 8006884:	f7ff fde2 	bl	800644c <_Bfree>
 8006888:	4628      	mov	r0, r5
 800688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006892:	3301      	adds	r3, #1
 8006894:	e7c5      	b.n	8006822 <__lshift+0x4a>
 8006896:	3904      	subs	r1, #4
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	459c      	cmp	ip, r3
 800689e:	f841 2f04 	str.w	r2, [r1, #4]!
 80068a2:	d8f9      	bhi.n	8006898 <__lshift+0xc0>
 80068a4:	e7ea      	b.n	800687c <__lshift+0xa4>
 80068a6:	bf00      	nop
 80068a8:	08008643 	.word	0x08008643
 80068ac:	08008654 	.word	0x08008654

080068b0 <__mcmp>:
 80068b0:	4603      	mov	r3, r0
 80068b2:	690a      	ldr	r2, [r1, #16]
 80068b4:	6900      	ldr	r0, [r0, #16]
 80068b6:	b530      	push	{r4, r5, lr}
 80068b8:	1a80      	subs	r0, r0, r2
 80068ba:	d10e      	bne.n	80068da <__mcmp+0x2a>
 80068bc:	3314      	adds	r3, #20
 80068be:	3114      	adds	r1, #20
 80068c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068d0:	4295      	cmp	r5, r2
 80068d2:	d003      	beq.n	80068dc <__mcmp+0x2c>
 80068d4:	d205      	bcs.n	80068e2 <__mcmp+0x32>
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295
 80068da:	bd30      	pop	{r4, r5, pc}
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d3f3      	bcc.n	80068c8 <__mcmp+0x18>
 80068e0:	e7fb      	b.n	80068da <__mcmp+0x2a>
 80068e2:	2001      	movs	r0, #1
 80068e4:	e7f9      	b.n	80068da <__mcmp+0x2a>
	...

080068e8 <__mdiff>:
 80068e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	4689      	mov	r9, r1
 80068ee:	4606      	mov	r6, r0
 80068f0:	4611      	mov	r1, r2
 80068f2:	4648      	mov	r0, r9
 80068f4:	4614      	mov	r4, r2
 80068f6:	f7ff ffdb 	bl	80068b0 <__mcmp>
 80068fa:	1e05      	subs	r5, r0, #0
 80068fc:	d112      	bne.n	8006924 <__mdiff+0x3c>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fd63 	bl	80063cc <_Balloc>
 8006906:	4602      	mov	r2, r0
 8006908:	b928      	cbnz	r0, 8006916 <__mdiff+0x2e>
 800690a:	f240 2137 	movw	r1, #567	@ 0x237
 800690e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a08 <__mdiff+0x120>)
 8006910:	483e      	ldr	r0, [pc, #248]	@ (8006a0c <__mdiff+0x124>)
 8006912:	f000 fb0d 	bl	8006f30 <__assert_func>
 8006916:	2301      	movs	r3, #1
 8006918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800691c:	4610      	mov	r0, r2
 800691e:	b003      	add	sp, #12
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	bfbc      	itt	lt
 8006926:	464b      	movlt	r3, r9
 8006928:	46a1      	movlt	r9, r4
 800692a:	4630      	mov	r0, r6
 800692c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006930:	bfba      	itte	lt
 8006932:	461c      	movlt	r4, r3
 8006934:	2501      	movlt	r5, #1
 8006936:	2500      	movge	r5, #0
 8006938:	f7ff fd48 	bl	80063cc <_Balloc>
 800693c:	4602      	mov	r2, r0
 800693e:	b918      	cbnz	r0, 8006948 <__mdiff+0x60>
 8006940:	f240 2145 	movw	r1, #581	@ 0x245
 8006944:	4b30      	ldr	r3, [pc, #192]	@ (8006a08 <__mdiff+0x120>)
 8006946:	e7e3      	b.n	8006910 <__mdiff+0x28>
 8006948:	f100 0b14 	add.w	fp, r0, #20
 800694c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006950:	f109 0310 	add.w	r3, r9, #16
 8006954:	60c5      	str	r5, [r0, #12]
 8006956:	f04f 0c00 	mov.w	ip, #0
 800695a:	f109 0514 	add.w	r5, r9, #20
 800695e:	46d9      	mov	r9, fp
 8006960:	6926      	ldr	r6, [r4, #16]
 8006962:	f104 0e14 	add.w	lr, r4, #20
 8006966:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800696a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800696e:	9301      	str	r3, [sp, #4]
 8006970:	9b01      	ldr	r3, [sp, #4]
 8006972:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006976:	f853 af04 	ldr.w	sl, [r3, #4]!
 800697a:	b281      	uxth	r1, r0
 800697c:	9301      	str	r3, [sp, #4]
 800697e:	fa1f f38a 	uxth.w	r3, sl
 8006982:	1a5b      	subs	r3, r3, r1
 8006984:	0c00      	lsrs	r0, r0, #16
 8006986:	4463      	add	r3, ip
 8006988:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800698c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006996:	4576      	cmp	r6, lr
 8006998:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800699c:	f849 3b04 	str.w	r3, [r9], #4
 80069a0:	d8e6      	bhi.n	8006970 <__mdiff+0x88>
 80069a2:	1b33      	subs	r3, r6, r4
 80069a4:	3b15      	subs	r3, #21
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	3415      	adds	r4, #21
 80069ac:	3304      	adds	r3, #4
 80069ae:	42a6      	cmp	r6, r4
 80069b0:	bf38      	it	cc
 80069b2:	2304      	movcc	r3, #4
 80069b4:	441d      	add	r5, r3
 80069b6:	445b      	add	r3, fp
 80069b8:	461e      	mov	r6, r3
 80069ba:	462c      	mov	r4, r5
 80069bc:	4544      	cmp	r4, r8
 80069be:	d30e      	bcc.n	80069de <__mdiff+0xf6>
 80069c0:	f108 0103 	add.w	r1, r8, #3
 80069c4:	1b49      	subs	r1, r1, r5
 80069c6:	f021 0103 	bic.w	r1, r1, #3
 80069ca:	3d03      	subs	r5, #3
 80069cc:	45a8      	cmp	r8, r5
 80069ce:	bf38      	it	cc
 80069d0:	2100      	movcc	r1, #0
 80069d2:	440b      	add	r3, r1
 80069d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069d8:	b199      	cbz	r1, 8006a02 <__mdiff+0x11a>
 80069da:	6117      	str	r7, [r2, #16]
 80069dc:	e79e      	b.n	800691c <__mdiff+0x34>
 80069de:	46e6      	mov	lr, ip
 80069e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80069e4:	fa1f fc81 	uxth.w	ip, r1
 80069e8:	44f4      	add	ip, lr
 80069ea:	0c08      	lsrs	r0, r1, #16
 80069ec:	4471      	add	r1, lr
 80069ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80069f2:	b289      	uxth	r1, r1
 80069f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069fc:	f846 1b04 	str.w	r1, [r6], #4
 8006a00:	e7dc      	b.n	80069bc <__mdiff+0xd4>
 8006a02:	3f01      	subs	r7, #1
 8006a04:	e7e6      	b.n	80069d4 <__mdiff+0xec>
 8006a06:	bf00      	nop
 8006a08:	08008643 	.word	0x08008643
 8006a0c:	08008654 	.word	0x08008654

08006a10 <__d2b>:
 8006a10:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006a14:	2101      	movs	r1, #1
 8006a16:	4690      	mov	r8, r2
 8006a18:	4699      	mov	r9, r3
 8006a1a:	9e08      	ldr	r6, [sp, #32]
 8006a1c:	f7ff fcd6 	bl	80063cc <_Balloc>
 8006a20:	4604      	mov	r4, r0
 8006a22:	b930      	cbnz	r0, 8006a32 <__d2b+0x22>
 8006a24:	4602      	mov	r2, r0
 8006a26:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a2a:	4b23      	ldr	r3, [pc, #140]	@ (8006ab8 <__d2b+0xa8>)
 8006a2c:	4823      	ldr	r0, [pc, #140]	@ (8006abc <__d2b+0xac>)
 8006a2e:	f000 fa7f 	bl	8006f30 <__assert_func>
 8006a32:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a3a:	b10d      	cbz	r5, 8006a40 <__d2b+0x30>
 8006a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	f1b8 0300 	subs.w	r3, r8, #0
 8006a46:	d024      	beq.n	8006a92 <__d2b+0x82>
 8006a48:	4668      	mov	r0, sp
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	f7ff fd85 	bl	800655a <__lo0bits>
 8006a50:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006a54:	b1d8      	cbz	r0, 8006a8e <__d2b+0x7e>
 8006a56:	f1c0 0320 	rsb	r3, r0, #32
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	40c2      	lsrs	r2, r0
 8006a62:	6163      	str	r3, [r4, #20]
 8006a64:	9201      	str	r2, [sp, #4]
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2201      	moveq	r2, #1
 8006a6e:	2202      	movne	r2, #2
 8006a70:	61a3      	str	r3, [r4, #24]
 8006a72:	6122      	str	r2, [r4, #16]
 8006a74:	b1ad      	cbz	r5, 8006aa2 <__d2b+0x92>
 8006a76:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a7a:	4405      	add	r5, r0
 8006a7c:	6035      	str	r5, [r6, #0]
 8006a7e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	6018      	str	r0, [r3, #0]
 8006a86:	4620      	mov	r0, r4
 8006a88:	b002      	add	sp, #8
 8006a8a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006a8e:	6161      	str	r1, [r4, #20]
 8006a90:	e7e9      	b.n	8006a66 <__d2b+0x56>
 8006a92:	a801      	add	r0, sp, #4
 8006a94:	f7ff fd61 	bl	800655a <__lo0bits>
 8006a98:	9b01      	ldr	r3, [sp, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	6163      	str	r3, [r4, #20]
 8006a9e:	3020      	adds	r0, #32
 8006aa0:	e7e7      	b.n	8006a72 <__d2b+0x62>
 8006aa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006aa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006aaa:	6030      	str	r0, [r6, #0]
 8006aac:	6918      	ldr	r0, [r3, #16]
 8006aae:	f7ff fd35 	bl	800651c <__hi0bits>
 8006ab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ab6:	e7e4      	b.n	8006a82 <__d2b+0x72>
 8006ab8:	08008643 	.word	0x08008643
 8006abc:	08008654 	.word	0x08008654

08006ac0 <__ssputs_r>:
 8006ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	461f      	mov	r7, r3
 8006ac6:	688e      	ldr	r6, [r1, #8]
 8006ac8:	4682      	mov	sl, r0
 8006aca:	42be      	cmp	r6, r7
 8006acc:	460c      	mov	r4, r1
 8006ace:	4690      	mov	r8, r2
 8006ad0:	680b      	ldr	r3, [r1, #0]
 8006ad2:	d82d      	bhi.n	8006b30 <__ssputs_r+0x70>
 8006ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ad8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006adc:	d026      	beq.n	8006b2c <__ssputs_r+0x6c>
 8006ade:	6965      	ldr	r5, [r4, #20]
 8006ae0:	6909      	ldr	r1, [r1, #16]
 8006ae2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ae6:	eba3 0901 	sub.w	r9, r3, r1
 8006aea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aee:	1c7b      	adds	r3, r7, #1
 8006af0:	444b      	add	r3, r9
 8006af2:	106d      	asrs	r5, r5, #1
 8006af4:	429d      	cmp	r5, r3
 8006af6:	bf38      	it	cc
 8006af8:	461d      	movcc	r5, r3
 8006afa:	0553      	lsls	r3, r2, #21
 8006afc:	d527      	bpl.n	8006b4e <__ssputs_r+0x8e>
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7ff fbd8 	bl	80062b4 <_malloc_r>
 8006b04:	4606      	mov	r6, r0
 8006b06:	b360      	cbz	r0, 8006b62 <__ssputs_r+0xa2>
 8006b08:	464a      	mov	r2, r9
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	f000 fa02 	bl	8006f14 <memcpy>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	6126      	str	r6, [r4, #16]
 8006b1e:	444e      	add	r6, r9
 8006b20:	6026      	str	r6, [r4, #0]
 8006b22:	463e      	mov	r6, r7
 8006b24:	6165      	str	r5, [r4, #20]
 8006b26:	eba5 0509 	sub.w	r5, r5, r9
 8006b2a:	60a5      	str	r5, [r4, #8]
 8006b2c:	42be      	cmp	r6, r7
 8006b2e:	d900      	bls.n	8006b32 <__ssputs_r+0x72>
 8006b30:	463e      	mov	r6, r7
 8006b32:	4632      	mov	r2, r6
 8006b34:	4641      	mov	r1, r8
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	f000 f9c2 	bl	8006ec0 <memmove>
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	1b9b      	subs	r3, r3, r6
 8006b42:	60a3      	str	r3, [r4, #8]
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	4433      	add	r3, r6
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	462a      	mov	r2, r5
 8006b50:	f000 fa32 	bl	8006fb8 <_realloc_r>
 8006b54:	4606      	mov	r6, r0
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d1e0      	bne.n	8006b1c <__ssputs_r+0x5c>
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	6921      	ldr	r1, [r4, #16]
 8006b5e:	f7ff fb37 	bl	80061d0 <_free_r>
 8006b62:	230c      	movs	r3, #12
 8006b64:	f8ca 3000 	str.w	r3, [sl]
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	e7e9      	b.n	8006b4a <__ssputs_r+0x8a>
	...

08006b78 <_svfiprintf_r>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	4698      	mov	r8, r3
 8006b7e:	898b      	ldrh	r3, [r1, #12]
 8006b80:	4607      	mov	r7, r0
 8006b82:	061b      	lsls	r3, r3, #24
 8006b84:	460d      	mov	r5, r1
 8006b86:	4614      	mov	r4, r2
 8006b88:	b09d      	sub	sp, #116	@ 0x74
 8006b8a:	d510      	bpl.n	8006bae <_svfiprintf_r+0x36>
 8006b8c:	690b      	ldr	r3, [r1, #16]
 8006b8e:	b973      	cbnz	r3, 8006bae <_svfiprintf_r+0x36>
 8006b90:	2140      	movs	r1, #64	@ 0x40
 8006b92:	f7ff fb8f 	bl	80062b4 <_malloc_r>
 8006b96:	6028      	str	r0, [r5, #0]
 8006b98:	6128      	str	r0, [r5, #16]
 8006b9a:	b930      	cbnz	r0, 8006baa <_svfiprintf_r+0x32>
 8006b9c:	230c      	movs	r3, #12
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	b01d      	add	sp, #116	@ 0x74
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	2340      	movs	r3, #64	@ 0x40
 8006bac:	616b      	str	r3, [r5, #20]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bb8:	2330      	movs	r3, #48	@ 0x30
 8006bba:	f04f 0901 	mov.w	r9, #1
 8006bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006d5c <_svfiprintf_r+0x1e4>
 8006bc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bca:	4623      	mov	r3, r4
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd2:	b10a      	cbz	r2, 8006bd8 <_svfiprintf_r+0x60>
 8006bd4:	2a25      	cmp	r2, #37	@ 0x25
 8006bd6:	d1f9      	bne.n	8006bcc <_svfiprintf_r+0x54>
 8006bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bdc:	d00b      	beq.n	8006bf6 <_svfiprintf_r+0x7e>
 8006bde:	465b      	mov	r3, fp
 8006be0:	4622      	mov	r2, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff ff6b 	bl	8006ac0 <__ssputs_r>
 8006bea:	3001      	adds	r0, #1
 8006bec:	f000 80a7 	beq.w	8006d3e <_svfiprintf_r+0x1c6>
 8006bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf2:	445a      	add	r2, fp
 8006bf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 809f 	beq.w	8006d3e <_svfiprintf_r+0x1c6>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295
 8006c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0a:	f10a 0a01 	add.w	sl, sl, #1
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c16:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c18:	4654      	mov	r4, sl
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	484e      	ldr	r0, [pc, #312]	@ (8006d5c <_svfiprintf_r+0x1e4>)
 8006c22:	f7fe fc68 	bl	80054f6 <memchr>
 8006c26:	9a04      	ldr	r2, [sp, #16]
 8006c28:	b9d8      	cbnz	r0, 8006c62 <_svfiprintf_r+0xea>
 8006c2a:	06d0      	lsls	r0, r2, #27
 8006c2c:	bf44      	itt	mi
 8006c2e:	2320      	movmi	r3, #32
 8006c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c34:	0711      	lsls	r1, r2, #28
 8006c36:	bf44      	itt	mi
 8006c38:	232b      	movmi	r3, #43	@ 0x2b
 8006c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c44:	d015      	beq.n	8006c72 <_svfiprintf_r+0xfa>
 8006c46:	4654      	mov	r4, sl
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f04f 0c0a 	mov.w	ip, #10
 8006c4e:	9a07      	ldr	r2, [sp, #28]
 8006c50:	4621      	mov	r1, r4
 8006c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c56:	3b30      	subs	r3, #48	@ 0x30
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d94b      	bls.n	8006cf4 <_svfiprintf_r+0x17c>
 8006c5c:	b1b0      	cbz	r0, 8006c8c <_svfiprintf_r+0x114>
 8006c5e:	9207      	str	r2, [sp, #28]
 8006c60:	e014      	b.n	8006c8c <_svfiprintf_r+0x114>
 8006c62:	eba0 0308 	sub.w	r3, r0, r8
 8006c66:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	46a2      	mov	sl, r4
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	e7d2      	b.n	8006c18 <_svfiprintf_r+0xa0>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbb      	ittet	lt
 8006c7e:	425b      	neglt	r3, r3
 8006c80:	f042 0202 	orrlt.w	r2, r2, #2
 8006c84:	9307      	strge	r3, [sp, #28]
 8006c86:	9307      	strlt	r3, [sp, #28]
 8006c88:	bfb8      	it	lt
 8006c8a:	9204      	strlt	r2, [sp, #16]
 8006c8c:	7823      	ldrb	r3, [r4, #0]
 8006c8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c90:	d10a      	bne.n	8006ca8 <_svfiprintf_r+0x130>
 8006c92:	7863      	ldrb	r3, [r4, #1]
 8006c94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c96:	d132      	bne.n	8006cfe <_svfiprintf_r+0x186>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	3402      	adds	r4, #2
 8006c9c:	1d1a      	adds	r2, r3, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	9203      	str	r2, [sp, #12]
 8006ca2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ca6:	9305      	str	r3, [sp, #20]
 8006ca8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006d60 <_svfiprintf_r+0x1e8>
 8006cac:	2203      	movs	r2, #3
 8006cae:	4650      	mov	r0, sl
 8006cb0:	7821      	ldrb	r1, [r4, #0]
 8006cb2:	f7fe fc20 	bl	80054f6 <memchr>
 8006cb6:	b138      	cbz	r0, 8006cc8 <_svfiprintf_r+0x150>
 8006cb8:	2240      	movs	r2, #64	@ 0x40
 8006cba:	9b04      	ldr	r3, [sp, #16]
 8006cbc:	eba0 000a 	sub.w	r0, r0, sl
 8006cc0:	4082      	lsls	r2, r0
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	3401      	adds	r4, #1
 8006cc6:	9304      	str	r3, [sp, #16]
 8006cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ccc:	2206      	movs	r2, #6
 8006cce:	4825      	ldr	r0, [pc, #148]	@ (8006d64 <_svfiprintf_r+0x1ec>)
 8006cd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cd4:	f7fe fc0f 	bl	80054f6 <memchr>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d036      	beq.n	8006d4a <_svfiprintf_r+0x1d2>
 8006cdc:	4b22      	ldr	r3, [pc, #136]	@ (8006d68 <_svfiprintf_r+0x1f0>)
 8006cde:	bb1b      	cbnz	r3, 8006d28 <_svfiprintf_r+0x1b0>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	3307      	adds	r3, #7
 8006ce4:	f023 0307 	bic.w	r3, r3, #7
 8006ce8:	3308      	adds	r3, #8
 8006cea:	9303      	str	r3, [sp, #12]
 8006cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cee:	4433      	add	r3, r6
 8006cf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf2:	e76a      	b.n	8006bca <_svfiprintf_r+0x52>
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfc:	e7a8      	b.n	8006c50 <_svfiprintf_r+0xd8>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f04f 0c0a 	mov.w	ip, #10
 8006d04:	4619      	mov	r1, r3
 8006d06:	3401      	adds	r4, #1
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d10:	3a30      	subs	r2, #48	@ 0x30
 8006d12:	2a09      	cmp	r2, #9
 8006d14:	d903      	bls.n	8006d1e <_svfiprintf_r+0x1a6>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0c6      	beq.n	8006ca8 <_svfiprintf_r+0x130>
 8006d1a:	9105      	str	r1, [sp, #20]
 8006d1c:	e7c4      	b.n	8006ca8 <_svfiprintf_r+0x130>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	2301      	movs	r3, #1
 8006d22:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d26:	e7f0      	b.n	8006d0a <_svfiprintf_r+0x192>
 8006d28:	ab03      	add	r3, sp, #12
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	462a      	mov	r2, r5
 8006d2e:	4638      	mov	r0, r7
 8006d30:	4b0e      	ldr	r3, [pc, #56]	@ (8006d6c <_svfiprintf_r+0x1f4>)
 8006d32:	a904      	add	r1, sp, #16
 8006d34:	f7fd fe7c 	bl	8004a30 <_printf_float>
 8006d38:	1c42      	adds	r2, r0, #1
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	d1d6      	bne.n	8006cec <_svfiprintf_r+0x174>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	065b      	lsls	r3, r3, #25
 8006d42:	f53f af2d 	bmi.w	8006ba0 <_svfiprintf_r+0x28>
 8006d46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d48:	e72c      	b.n	8006ba4 <_svfiprintf_r+0x2c>
 8006d4a:	ab03      	add	r3, sp, #12
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4638      	mov	r0, r7
 8006d52:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <_svfiprintf_r+0x1f4>)
 8006d54:	a904      	add	r1, sp, #16
 8006d56:	f7fe f909 	bl	8004f6c <_printf_i>
 8006d5a:	e7ed      	b.n	8006d38 <_svfiprintf_r+0x1c0>
 8006d5c:	080086ad 	.word	0x080086ad
 8006d60:	080086b3 	.word	0x080086b3
 8006d64:	080086b7 	.word	0x080086b7
 8006d68:	08004a31 	.word	0x08004a31
 8006d6c:	08006ac1 	.word	0x08006ac1

08006d70 <__sflush_r>:
 8006d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	0716      	lsls	r6, r2, #28
 8006d78:	4605      	mov	r5, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	d454      	bmi.n	8006e28 <__sflush_r+0xb8>
 8006d7e:	684b      	ldr	r3, [r1, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc02      	bgt.n	8006d8a <__sflush_r+0x1a>
 8006d84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dd48      	ble.n	8006e1c <__sflush_r+0xac>
 8006d8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d8c:	2e00      	cmp	r6, #0
 8006d8e:	d045      	beq.n	8006e1c <__sflush_r+0xac>
 8006d90:	2300      	movs	r3, #0
 8006d92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d96:	682f      	ldr	r7, [r5, #0]
 8006d98:	6a21      	ldr	r1, [r4, #32]
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	d030      	beq.n	8006e00 <__sflush_r+0x90>
 8006d9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	0759      	lsls	r1, r3, #29
 8006da4:	d505      	bpl.n	8006db2 <__sflush_r+0x42>
 8006da6:	6863      	ldr	r3, [r4, #4]
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006dac:	b10b      	cbz	r3, 8006db2 <__sflush_r+0x42>
 8006dae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006db0:	1ad2      	subs	r2, r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	4628      	mov	r0, r5
 8006db6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db8:	6a21      	ldr	r1, [r4, #32]
 8006dba:	47b0      	blx	r6
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	d106      	bne.n	8006dd0 <__sflush_r+0x60>
 8006dc2:	6829      	ldr	r1, [r5, #0]
 8006dc4:	291d      	cmp	r1, #29
 8006dc6:	d82b      	bhi.n	8006e20 <__sflush_r+0xb0>
 8006dc8:	4a28      	ldr	r2, [pc, #160]	@ (8006e6c <__sflush_r+0xfc>)
 8006dca:	40ca      	lsrs	r2, r1
 8006dcc:	07d6      	lsls	r6, r2, #31
 8006dce:	d527      	bpl.n	8006e20 <__sflush_r+0xb0>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	6062      	str	r2, [r4, #4]
 8006dd4:	6922      	ldr	r2, [r4, #16]
 8006dd6:	04d9      	lsls	r1, r3, #19
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	d504      	bpl.n	8006de6 <__sflush_r+0x76>
 8006ddc:	1c42      	adds	r2, r0, #1
 8006dde:	d101      	bne.n	8006de4 <__sflush_r+0x74>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b903      	cbnz	r3, 8006de6 <__sflush_r+0x76>
 8006de4:	6560      	str	r0, [r4, #84]	@ 0x54
 8006de6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006de8:	602f      	str	r7, [r5, #0]
 8006dea:	b1b9      	cbz	r1, 8006e1c <__sflush_r+0xac>
 8006dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <__sflush_r+0x8a>
 8006df4:	4628      	mov	r0, r5
 8006df6:	f7ff f9eb 	bl	80061d0 <_free_r>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dfe:	e00d      	b.n	8006e1c <__sflush_r+0xac>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b0      	blx	r6
 8006e06:	4602      	mov	r2, r0
 8006e08:	1c50      	adds	r0, r2, #1
 8006e0a:	d1c9      	bne.n	8006da0 <__sflush_r+0x30>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0c6      	beq.n	8006da0 <__sflush_r+0x30>
 8006e12:	2b1d      	cmp	r3, #29
 8006e14:	d001      	beq.n	8006e1a <__sflush_r+0xaa>
 8006e16:	2b16      	cmp	r3, #22
 8006e18:	d11d      	bne.n	8006e56 <__sflush_r+0xe6>
 8006e1a:	602f      	str	r7, [r5, #0]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e021      	b.n	8006e64 <__sflush_r+0xf4>
 8006e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e24:	b21b      	sxth	r3, r3
 8006e26:	e01a      	b.n	8006e5e <__sflush_r+0xee>
 8006e28:	690f      	ldr	r7, [r1, #16]
 8006e2a:	2f00      	cmp	r7, #0
 8006e2c:	d0f6      	beq.n	8006e1c <__sflush_r+0xac>
 8006e2e:	0793      	lsls	r3, r2, #30
 8006e30:	bf18      	it	ne
 8006e32:	2300      	movne	r3, #0
 8006e34:	680e      	ldr	r6, [r1, #0]
 8006e36:	bf08      	it	eq
 8006e38:	694b      	ldreq	r3, [r1, #20]
 8006e3a:	1bf6      	subs	r6, r6, r7
 8006e3c:	600f      	str	r7, [r1, #0]
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	ddeb      	ble.n	8006e1c <__sflush_r+0xac>
 8006e44:	4633      	mov	r3, r6
 8006e46:	463a      	mov	r2, r7
 8006e48:	4628      	mov	r0, r5
 8006e4a:	6a21      	ldr	r1, [r4, #32]
 8006e4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006e50:	47e0      	blx	ip
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dc07      	bgt.n	8006e66 <__sflush_r+0xf6>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e66:	4407      	add	r7, r0
 8006e68:	1a36      	subs	r6, r6, r0
 8006e6a:	e7e9      	b.n	8006e40 <__sflush_r+0xd0>
 8006e6c:	20400001 	.word	0x20400001

08006e70 <_fflush_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	4605      	mov	r5, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	b913      	cbnz	r3, 8006e80 <_fflush_r+0x10>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	b118      	cbz	r0, 8006e8a <_fflush_r+0x1a>
 8006e82:	6a03      	ldr	r3, [r0, #32]
 8006e84:	b90b      	cbnz	r3, 8006e8a <_fflush_r+0x1a>
 8006e86:	f7fe fa1b 	bl	80052c0 <__sinit>
 8006e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f3      	beq.n	8006e7a <_fflush_r+0xa>
 8006e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e94:	07d0      	lsls	r0, r2, #31
 8006e96:	d404      	bmi.n	8006ea2 <_fflush_r+0x32>
 8006e98:	0599      	lsls	r1, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_fflush_r+0x32>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e9e:	f7fe fb28 	bl	80054f2 <__retarget_lock_acquire_recursive>
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	f7ff ff63 	bl	8006d70 <__sflush_r>
 8006eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eac:	4605      	mov	r5, r0
 8006eae:	07da      	lsls	r2, r3, #31
 8006eb0:	d4e4      	bmi.n	8006e7c <_fflush_r+0xc>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	059b      	lsls	r3, r3, #22
 8006eb6:	d4e1      	bmi.n	8006e7c <_fflush_r+0xc>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eba:	f7fe fb1b 	bl	80054f4 <__retarget_lock_release_recursive>
 8006ebe:	e7dd      	b.n	8006e7c <_fflush_r+0xc>

08006ec0 <memmove>:
 8006ec0:	4288      	cmp	r0, r1
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	eb01 0402 	add.w	r4, r1, r2
 8006ec8:	d902      	bls.n	8006ed0 <memmove+0x10>
 8006eca:	4284      	cmp	r4, r0
 8006ecc:	4623      	mov	r3, r4
 8006ece:	d807      	bhi.n	8006ee0 <memmove+0x20>
 8006ed0:	1e43      	subs	r3, r0, #1
 8006ed2:	42a1      	cmp	r1, r4
 8006ed4:	d008      	beq.n	8006ee8 <memmove+0x28>
 8006ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ede:	e7f8      	b.n	8006ed2 <memmove+0x12>
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4402      	add	r2, r0
 8006ee4:	428a      	cmp	r2, r1
 8006ee6:	d100      	bne.n	8006eea <memmove+0x2a>
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ef2:	e7f7      	b.n	8006ee4 <memmove+0x24>

08006ef4 <_sbrk_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4d05      	ldr	r5, [pc, #20]	@ (8006f10 <_sbrk_r+0x1c>)
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fb f856 	bl	8001fb0 <_sbrk>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_sbrk_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_sbrk_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	20000958 	.word	0x20000958

08006f14 <memcpy>:
 8006f14:	440a      	add	r2, r1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	4770      	bx	lr
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f26:	4291      	cmp	r1, r2
 8006f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2c:	d1f9      	bne.n	8006f22 <memcpy+0xe>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <__assert_func>:
 8006f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f32:	4614      	mov	r4, r2
 8006f34:	461a      	mov	r2, r3
 8006f36:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <__assert_func+0x2c>)
 8006f38:	4605      	mov	r5, r0
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68d8      	ldr	r0, [r3, #12]
 8006f3e:	b14c      	cbz	r4, 8006f54 <__assert_func+0x24>
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <__assert_func+0x30>)
 8006f42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f46:	9100      	str	r1, [sp, #0]
 8006f48:	462b      	mov	r3, r5
 8006f4a:	4906      	ldr	r1, [pc, #24]	@ (8006f64 <__assert_func+0x34>)
 8006f4c:	f000 f870 	bl	8007030 <fiprintf>
 8006f50:	f000 f880 	bl	8007054 <abort>
 8006f54:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <__assert_func+0x38>)
 8006f56:	461c      	mov	r4, r3
 8006f58:	e7f3      	b.n	8006f42 <__assert_func+0x12>
 8006f5a:	bf00      	nop
 8006f5c:	20000020 	.word	0x20000020
 8006f60:	080086c8 	.word	0x080086c8
 8006f64:	080086d5 	.word	0x080086d5
 8006f68:	08008703 	.word	0x08008703

08006f6c <_calloc_r>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	fba1 5402 	umull	r5, r4, r1, r2
 8006f72:	b934      	cbnz	r4, 8006f82 <_calloc_r+0x16>
 8006f74:	4629      	mov	r1, r5
 8006f76:	f7ff f99d 	bl	80062b4 <_malloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	b928      	cbnz	r0, 8006f8a <_calloc_r+0x1e>
 8006f7e:	4630      	mov	r0, r6
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	220c      	movs	r2, #12
 8006f84:	2600      	movs	r6, #0
 8006f86:	6002      	str	r2, [r0, #0]
 8006f88:	e7f9      	b.n	8006f7e <_calloc_r+0x12>
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	f7fe fa32 	bl	80053f6 <memset>
 8006f92:	e7f4      	b.n	8006f7e <_calloc_r+0x12>

08006f94 <__ascii_mbtowc>:
 8006f94:	b082      	sub	sp, #8
 8006f96:	b901      	cbnz	r1, 8006f9a <__ascii_mbtowc+0x6>
 8006f98:	a901      	add	r1, sp, #4
 8006f9a:	b142      	cbz	r2, 8006fae <__ascii_mbtowc+0x1a>
 8006f9c:	b14b      	cbz	r3, 8006fb2 <__ascii_mbtowc+0x1e>
 8006f9e:	7813      	ldrb	r3, [r2, #0]
 8006fa0:	600b      	str	r3, [r1, #0]
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	1e10      	subs	r0, r2, #0
 8006fa6:	bf18      	it	ne
 8006fa8:	2001      	movne	r0, #1
 8006faa:	b002      	add	sp, #8
 8006fac:	4770      	bx	lr
 8006fae:	4610      	mov	r0, r2
 8006fb0:	e7fb      	b.n	8006faa <__ascii_mbtowc+0x16>
 8006fb2:	f06f 0001 	mvn.w	r0, #1
 8006fb6:	e7f8      	b.n	8006faa <__ascii_mbtowc+0x16>

08006fb8 <_realloc_r>:
 8006fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	460d      	mov	r5, r1
 8006fc2:	b921      	cbnz	r1, 8006fce <_realloc_r+0x16>
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	f7ff b973 	b.w	80062b4 <_malloc_r>
 8006fce:	b92a      	cbnz	r2, 8006fdc <_realloc_r+0x24>
 8006fd0:	f7ff f8fe 	bl	80061d0 <_free_r>
 8006fd4:	4625      	mov	r5, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	f000 f841 	bl	8007062 <_malloc_usable_size_r>
 8006fe0:	4284      	cmp	r4, r0
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	d802      	bhi.n	8006fec <_realloc_r+0x34>
 8006fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006fea:	d8f4      	bhi.n	8006fd6 <_realloc_r+0x1e>
 8006fec:	4621      	mov	r1, r4
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f7ff f960 	bl	80062b4 <_malloc_r>
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	b908      	cbnz	r0, 8006ffc <_realloc_r+0x44>
 8006ff8:	4645      	mov	r5, r8
 8006ffa:	e7ec      	b.n	8006fd6 <_realloc_r+0x1e>
 8006ffc:	42b4      	cmp	r4, r6
 8006ffe:	4622      	mov	r2, r4
 8007000:	4629      	mov	r1, r5
 8007002:	bf28      	it	cs
 8007004:	4632      	movcs	r2, r6
 8007006:	f7ff ff85 	bl	8006f14 <memcpy>
 800700a:	4629      	mov	r1, r5
 800700c:	4638      	mov	r0, r7
 800700e:	f7ff f8df 	bl	80061d0 <_free_r>
 8007012:	e7f1      	b.n	8006ff8 <_realloc_r+0x40>

08007014 <__ascii_wctomb>:
 8007014:	4603      	mov	r3, r0
 8007016:	4608      	mov	r0, r1
 8007018:	b141      	cbz	r1, 800702c <__ascii_wctomb+0x18>
 800701a:	2aff      	cmp	r2, #255	@ 0xff
 800701c:	d904      	bls.n	8007028 <__ascii_wctomb+0x14>
 800701e:	228a      	movs	r2, #138	@ 0x8a
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	4770      	bx	lr
 8007028:	2001      	movs	r0, #1
 800702a:	700a      	strb	r2, [r1, #0]
 800702c:	4770      	bx	lr
	...

08007030 <fiprintf>:
 8007030:	b40e      	push	{r1, r2, r3}
 8007032:	b503      	push	{r0, r1, lr}
 8007034:	4601      	mov	r1, r0
 8007036:	ab03      	add	r3, sp, #12
 8007038:	4805      	ldr	r0, [pc, #20]	@ (8007050 <fiprintf+0x20>)
 800703a:	f853 2b04 	ldr.w	r2, [r3], #4
 800703e:	6800      	ldr	r0, [r0, #0]
 8007040:	9301      	str	r3, [sp, #4]
 8007042:	f000 f83d 	bl	80070c0 <_vfiprintf_r>
 8007046:	b002      	add	sp, #8
 8007048:	f85d eb04 	ldr.w	lr, [sp], #4
 800704c:	b003      	add	sp, #12
 800704e:	4770      	bx	lr
 8007050:	20000020 	.word	0x20000020

08007054 <abort>:
 8007054:	2006      	movs	r0, #6
 8007056:	b508      	push	{r3, lr}
 8007058:	f000 fa06 	bl	8007468 <raise>
 800705c:	2001      	movs	r0, #1
 800705e:	f7fa ff32 	bl	8001ec6 <_exit>

08007062 <_malloc_usable_size_r>:
 8007062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007066:	1f18      	subs	r0, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfbc      	itt	lt
 800706c:	580b      	ldrlt	r3, [r1, r0]
 800706e:	18c0      	addlt	r0, r0, r3
 8007070:	4770      	bx	lr

08007072 <__sfputc_r>:
 8007072:	6893      	ldr	r3, [r2, #8]
 8007074:	b410      	push	{r4}
 8007076:	3b01      	subs	r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	6093      	str	r3, [r2, #8]
 800707c:	da07      	bge.n	800708e <__sfputc_r+0x1c>
 800707e:	6994      	ldr	r4, [r2, #24]
 8007080:	42a3      	cmp	r3, r4
 8007082:	db01      	blt.n	8007088 <__sfputc_r+0x16>
 8007084:	290a      	cmp	r1, #10
 8007086:	d102      	bne.n	800708e <__sfputc_r+0x1c>
 8007088:	bc10      	pop	{r4}
 800708a:	f000 b931 	b.w	80072f0 <__swbuf_r>
 800708e:	6813      	ldr	r3, [r2, #0]
 8007090:	1c58      	adds	r0, r3, #1
 8007092:	6010      	str	r0, [r2, #0]
 8007094:	7019      	strb	r1, [r3, #0]
 8007096:	4608      	mov	r0, r1
 8007098:	bc10      	pop	{r4}
 800709a:	4770      	bx	lr

0800709c <__sfputs_r>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	4614      	mov	r4, r2
 80070a4:	18d5      	adds	r5, r2, r3
 80070a6:	42ac      	cmp	r4, r5
 80070a8:	d101      	bne.n	80070ae <__sfputs_r+0x12>
 80070aa:	2000      	movs	r0, #0
 80070ac:	e007      	b.n	80070be <__sfputs_r+0x22>
 80070ae:	463a      	mov	r2, r7
 80070b0:	4630      	mov	r0, r6
 80070b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b6:	f7ff ffdc 	bl	8007072 <__sfputc_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d1f3      	bne.n	80070a6 <__sfputs_r+0xa>
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070c0 <_vfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	460d      	mov	r5, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	4698      	mov	r8, r3
 80070ca:	4606      	mov	r6, r0
 80070cc:	b09d      	sub	sp, #116	@ 0x74
 80070ce:	b118      	cbz	r0, 80070d8 <_vfiprintf_r+0x18>
 80070d0:	6a03      	ldr	r3, [r0, #32]
 80070d2:	b90b      	cbnz	r3, 80070d8 <_vfiprintf_r+0x18>
 80070d4:	f7fe f8f4 	bl	80052c0 <__sinit>
 80070d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070da:	07d9      	lsls	r1, r3, #31
 80070dc:	d405      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	059a      	lsls	r2, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_vfiprintf_r+0x2a>
 80070e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070e6:	f7fe fa04 	bl	80054f2 <__retarget_lock_acquire_recursive>
 80070ea:	89ab      	ldrh	r3, [r5, #12]
 80070ec:	071b      	lsls	r3, r3, #28
 80070ee:	d501      	bpl.n	80070f4 <_vfiprintf_r+0x34>
 80070f0:	692b      	ldr	r3, [r5, #16]
 80070f2:	b99b      	cbnz	r3, 800711c <_vfiprintf_r+0x5c>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f000 f938 	bl	800736c <__swsetup_r>
 80070fc:	b170      	cbz	r0, 800711c <_vfiprintf_r+0x5c>
 80070fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007100:	07dc      	lsls	r4, r3, #31
 8007102:	d504      	bpl.n	800710e <_vfiprintf_r+0x4e>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	b01d      	add	sp, #116	@ 0x74
 800710a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	0598      	lsls	r0, r3, #22
 8007112:	d4f7      	bmi.n	8007104 <_vfiprintf_r+0x44>
 8007114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007116:	f7fe f9ed 	bl	80054f4 <__retarget_lock_release_recursive>
 800711a:	e7f3      	b.n	8007104 <_vfiprintf_r+0x44>
 800711c:	2300      	movs	r3, #0
 800711e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007120:	2320      	movs	r3, #32
 8007122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007126:	2330      	movs	r3, #48	@ 0x30
 8007128:	f04f 0901 	mov.w	r9, #1
 800712c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007130:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80072dc <_vfiprintf_r+0x21c>
 8007134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007138:	4623      	mov	r3, r4
 800713a:	469a      	mov	sl, r3
 800713c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007140:	b10a      	cbz	r2, 8007146 <_vfiprintf_r+0x86>
 8007142:	2a25      	cmp	r2, #37	@ 0x25
 8007144:	d1f9      	bne.n	800713a <_vfiprintf_r+0x7a>
 8007146:	ebba 0b04 	subs.w	fp, sl, r4
 800714a:	d00b      	beq.n	8007164 <_vfiprintf_r+0xa4>
 800714c:	465b      	mov	r3, fp
 800714e:	4622      	mov	r2, r4
 8007150:	4629      	mov	r1, r5
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ffa2 	bl	800709c <__sfputs_r>
 8007158:	3001      	adds	r0, #1
 800715a:	f000 80a7 	beq.w	80072ac <_vfiprintf_r+0x1ec>
 800715e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007160:	445a      	add	r2, fp
 8007162:	9209      	str	r2, [sp, #36]	@ 0x24
 8007164:	f89a 3000 	ldrb.w	r3, [sl]
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 809f 	beq.w	80072ac <_vfiprintf_r+0x1ec>
 800716e:	2300      	movs	r3, #0
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007178:	f10a 0a01 	add.w	sl, sl, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	9307      	str	r3, [sp, #28]
 8007180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007184:	931a      	str	r3, [sp, #104]	@ 0x68
 8007186:	4654      	mov	r4, sl
 8007188:	2205      	movs	r2, #5
 800718a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718e:	4853      	ldr	r0, [pc, #332]	@ (80072dc <_vfiprintf_r+0x21c>)
 8007190:	f7fe f9b1 	bl	80054f6 <memchr>
 8007194:	9a04      	ldr	r2, [sp, #16]
 8007196:	b9d8      	cbnz	r0, 80071d0 <_vfiprintf_r+0x110>
 8007198:	06d1      	lsls	r1, r2, #27
 800719a:	bf44      	itt	mi
 800719c:	2320      	movmi	r3, #32
 800719e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071a2:	0713      	lsls	r3, r2, #28
 80071a4:	bf44      	itt	mi
 80071a6:	232b      	movmi	r3, #43	@ 0x2b
 80071a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ac:	f89a 3000 	ldrb.w	r3, [sl]
 80071b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071b2:	d015      	beq.n	80071e0 <_vfiprintf_r+0x120>
 80071b4:	4654      	mov	r4, sl
 80071b6:	2000      	movs	r0, #0
 80071b8:	f04f 0c0a 	mov.w	ip, #10
 80071bc:	9a07      	ldr	r2, [sp, #28]
 80071be:	4621      	mov	r1, r4
 80071c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c4:	3b30      	subs	r3, #48	@ 0x30
 80071c6:	2b09      	cmp	r3, #9
 80071c8:	d94b      	bls.n	8007262 <_vfiprintf_r+0x1a2>
 80071ca:	b1b0      	cbz	r0, 80071fa <_vfiprintf_r+0x13a>
 80071cc:	9207      	str	r2, [sp, #28]
 80071ce:	e014      	b.n	80071fa <_vfiprintf_r+0x13a>
 80071d0:	eba0 0308 	sub.w	r3, r0, r8
 80071d4:	fa09 f303 	lsl.w	r3, r9, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	46a2      	mov	sl, r4
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	e7d2      	b.n	8007186 <_vfiprintf_r+0xc6>
 80071e0:	9b03      	ldr	r3, [sp, #12]
 80071e2:	1d19      	adds	r1, r3, #4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfbb      	ittet	lt
 80071ec:	425b      	neglt	r3, r3
 80071ee:	f042 0202 	orrlt.w	r2, r2, #2
 80071f2:	9307      	strge	r3, [sp, #28]
 80071f4:	9307      	strlt	r3, [sp, #28]
 80071f6:	bfb8      	it	lt
 80071f8:	9204      	strlt	r2, [sp, #16]
 80071fa:	7823      	ldrb	r3, [r4, #0]
 80071fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80071fe:	d10a      	bne.n	8007216 <_vfiprintf_r+0x156>
 8007200:	7863      	ldrb	r3, [r4, #1]
 8007202:	2b2a      	cmp	r3, #42	@ 0x2a
 8007204:	d132      	bne.n	800726c <_vfiprintf_r+0x1ac>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	3402      	adds	r4, #2
 800720a:	1d1a      	adds	r2, r3, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	9203      	str	r2, [sp, #12]
 8007210:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007214:	9305      	str	r3, [sp, #20]
 8007216:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80072e0 <_vfiprintf_r+0x220>
 800721a:	2203      	movs	r2, #3
 800721c:	4650      	mov	r0, sl
 800721e:	7821      	ldrb	r1, [r4, #0]
 8007220:	f7fe f969 	bl	80054f6 <memchr>
 8007224:	b138      	cbz	r0, 8007236 <_vfiprintf_r+0x176>
 8007226:	2240      	movs	r2, #64	@ 0x40
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	eba0 000a 	sub.w	r0, r0, sl
 800722e:	4082      	lsls	r2, r0
 8007230:	4313      	orrs	r3, r2
 8007232:	3401      	adds	r4, #1
 8007234:	9304      	str	r3, [sp, #16]
 8007236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800723a:	2206      	movs	r2, #6
 800723c:	4829      	ldr	r0, [pc, #164]	@ (80072e4 <_vfiprintf_r+0x224>)
 800723e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007242:	f7fe f958 	bl	80054f6 <memchr>
 8007246:	2800      	cmp	r0, #0
 8007248:	d03f      	beq.n	80072ca <_vfiprintf_r+0x20a>
 800724a:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <_vfiprintf_r+0x228>)
 800724c:	bb1b      	cbnz	r3, 8007296 <_vfiprintf_r+0x1d6>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3307      	adds	r3, #7
 8007252:	f023 0307 	bic.w	r3, r3, #7
 8007256:	3308      	adds	r3, #8
 8007258:	9303      	str	r3, [sp, #12]
 800725a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800725c:	443b      	add	r3, r7
 800725e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007260:	e76a      	b.n	8007138 <_vfiprintf_r+0x78>
 8007262:	460c      	mov	r4, r1
 8007264:	2001      	movs	r0, #1
 8007266:	fb0c 3202 	mla	r2, ip, r2, r3
 800726a:	e7a8      	b.n	80071be <_vfiprintf_r+0xfe>
 800726c:	2300      	movs	r3, #0
 800726e:	f04f 0c0a 	mov.w	ip, #10
 8007272:	4619      	mov	r1, r3
 8007274:	3401      	adds	r4, #1
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	4620      	mov	r0, r4
 800727a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800727e:	3a30      	subs	r2, #48	@ 0x30
 8007280:	2a09      	cmp	r2, #9
 8007282:	d903      	bls.n	800728c <_vfiprintf_r+0x1cc>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0c6      	beq.n	8007216 <_vfiprintf_r+0x156>
 8007288:	9105      	str	r1, [sp, #20]
 800728a:	e7c4      	b.n	8007216 <_vfiprintf_r+0x156>
 800728c:	4604      	mov	r4, r0
 800728e:	2301      	movs	r3, #1
 8007290:	fb0c 2101 	mla	r1, ip, r1, r2
 8007294:	e7f0      	b.n	8007278 <_vfiprintf_r+0x1b8>
 8007296:	ab03      	add	r3, sp, #12
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	462a      	mov	r2, r5
 800729c:	4630      	mov	r0, r6
 800729e:	4b13      	ldr	r3, [pc, #76]	@ (80072ec <_vfiprintf_r+0x22c>)
 80072a0:	a904      	add	r1, sp, #16
 80072a2:	f7fd fbc5 	bl	8004a30 <_printf_float>
 80072a6:	4607      	mov	r7, r0
 80072a8:	1c78      	adds	r0, r7, #1
 80072aa:	d1d6      	bne.n	800725a <_vfiprintf_r+0x19a>
 80072ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d405      	bmi.n	80072be <_vfiprintf_r+0x1fe>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d402      	bmi.n	80072be <_vfiprintf_r+0x1fe>
 80072b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ba:	f7fe f91b 	bl	80054f4 <__retarget_lock_release_recursive>
 80072be:	89ab      	ldrh	r3, [r5, #12]
 80072c0:	065b      	lsls	r3, r3, #25
 80072c2:	f53f af1f 	bmi.w	8007104 <_vfiprintf_r+0x44>
 80072c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072c8:	e71e      	b.n	8007108 <_vfiprintf_r+0x48>
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	462a      	mov	r2, r5
 80072d0:	4630      	mov	r0, r6
 80072d2:	4b06      	ldr	r3, [pc, #24]	@ (80072ec <_vfiprintf_r+0x22c>)
 80072d4:	a904      	add	r1, sp, #16
 80072d6:	f7fd fe49 	bl	8004f6c <_printf_i>
 80072da:	e7e4      	b.n	80072a6 <_vfiprintf_r+0x1e6>
 80072dc:	080086ad 	.word	0x080086ad
 80072e0:	080086b3 	.word	0x080086b3
 80072e4:	080086b7 	.word	0x080086b7
 80072e8:	08004a31 	.word	0x08004a31
 80072ec:	0800709d 	.word	0x0800709d

080072f0 <__swbuf_r>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	460e      	mov	r6, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4605      	mov	r5, r0
 80072f8:	b118      	cbz	r0, 8007302 <__swbuf_r+0x12>
 80072fa:	6a03      	ldr	r3, [r0, #32]
 80072fc:	b90b      	cbnz	r3, 8007302 <__swbuf_r+0x12>
 80072fe:	f7fd ffdf 	bl	80052c0 <__sinit>
 8007302:	69a3      	ldr	r3, [r4, #24]
 8007304:	60a3      	str	r3, [r4, #8]
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	071a      	lsls	r2, r3, #28
 800730a:	d501      	bpl.n	8007310 <__swbuf_r+0x20>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	b943      	cbnz	r3, 8007322 <__swbuf_r+0x32>
 8007310:	4621      	mov	r1, r4
 8007312:	4628      	mov	r0, r5
 8007314:	f000 f82a 	bl	800736c <__swsetup_r>
 8007318:	b118      	cbz	r0, 8007322 <__swbuf_r+0x32>
 800731a:	f04f 37ff 	mov.w	r7, #4294967295
 800731e:	4638      	mov	r0, r7
 8007320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	6922      	ldr	r2, [r4, #16]
 8007326:	b2f6      	uxtb	r6, r6
 8007328:	1a98      	subs	r0, r3, r2
 800732a:	6963      	ldr	r3, [r4, #20]
 800732c:	4637      	mov	r7, r6
 800732e:	4283      	cmp	r3, r0
 8007330:	dc05      	bgt.n	800733e <__swbuf_r+0x4e>
 8007332:	4621      	mov	r1, r4
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff fd9b 	bl	8006e70 <_fflush_r>
 800733a:	2800      	cmp	r0, #0
 800733c:	d1ed      	bne.n	800731a <__swbuf_r+0x2a>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	3b01      	subs	r3, #1
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	6022      	str	r2, [r4, #0]
 800734a:	701e      	strb	r6, [r3, #0]
 800734c:	6962      	ldr	r2, [r4, #20]
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	429a      	cmp	r2, r3
 8007352:	d004      	beq.n	800735e <__swbuf_r+0x6e>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	07db      	lsls	r3, r3, #31
 8007358:	d5e1      	bpl.n	800731e <__swbuf_r+0x2e>
 800735a:	2e0a      	cmp	r6, #10
 800735c:	d1df      	bne.n	800731e <__swbuf_r+0x2e>
 800735e:	4621      	mov	r1, r4
 8007360:	4628      	mov	r0, r5
 8007362:	f7ff fd85 	bl	8006e70 <_fflush_r>
 8007366:	2800      	cmp	r0, #0
 8007368:	d0d9      	beq.n	800731e <__swbuf_r+0x2e>
 800736a:	e7d6      	b.n	800731a <__swbuf_r+0x2a>

0800736c <__swsetup_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4b29      	ldr	r3, [pc, #164]	@ (8007414 <__swsetup_r+0xa8>)
 8007370:	4605      	mov	r5, r0
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	460c      	mov	r4, r1
 8007376:	b118      	cbz	r0, 8007380 <__swsetup_r+0x14>
 8007378:	6a03      	ldr	r3, [r0, #32]
 800737a:	b90b      	cbnz	r3, 8007380 <__swsetup_r+0x14>
 800737c:	f7fd ffa0 	bl	80052c0 <__sinit>
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	0719      	lsls	r1, r3, #28
 8007386:	d422      	bmi.n	80073ce <__swsetup_r+0x62>
 8007388:	06da      	lsls	r2, r3, #27
 800738a:	d407      	bmi.n	800739c <__swsetup_r+0x30>
 800738c:	2209      	movs	r2, #9
 800738e:	602a      	str	r2, [r5, #0]
 8007390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007394:	f04f 30ff 	mov.w	r0, #4294967295
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	e033      	b.n	8007404 <__swsetup_r+0x98>
 800739c:	0758      	lsls	r0, r3, #29
 800739e:	d512      	bpl.n	80073c6 <__swsetup_r+0x5a>
 80073a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073a2:	b141      	cbz	r1, 80073b6 <__swsetup_r+0x4a>
 80073a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073a8:	4299      	cmp	r1, r3
 80073aa:	d002      	beq.n	80073b2 <__swsetup_r+0x46>
 80073ac:	4628      	mov	r0, r5
 80073ae:	f7fe ff0f 	bl	80061d0 <_free_r>
 80073b2:	2300      	movs	r3, #0
 80073b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80073b6:	89a3      	ldrh	r3, [r4, #12]
 80073b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	2300      	movs	r3, #0
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	f043 0308 	orr.w	r3, r3, #8
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	6923      	ldr	r3, [r4, #16]
 80073d0:	b94b      	cbnz	r3, 80073e6 <__swsetup_r+0x7a>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073dc:	d003      	beq.n	80073e6 <__swsetup_r+0x7a>
 80073de:	4621      	mov	r1, r4
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 f882 	bl	80074ea <__smakebuf_r>
 80073e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ea:	f013 0201 	ands.w	r2, r3, #1
 80073ee:	d00a      	beq.n	8007406 <__swsetup_r+0x9a>
 80073f0:	2200      	movs	r2, #0
 80073f2:	60a2      	str	r2, [r4, #8]
 80073f4:	6962      	ldr	r2, [r4, #20]
 80073f6:	4252      	negs	r2, r2
 80073f8:	61a2      	str	r2, [r4, #24]
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	b942      	cbnz	r2, 8007410 <__swsetup_r+0xa4>
 80073fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007402:	d1c5      	bne.n	8007390 <__swsetup_r+0x24>
 8007404:	bd38      	pop	{r3, r4, r5, pc}
 8007406:	0799      	lsls	r1, r3, #30
 8007408:	bf58      	it	pl
 800740a:	6962      	ldrpl	r2, [r4, #20]
 800740c:	60a2      	str	r2, [r4, #8]
 800740e:	e7f4      	b.n	80073fa <__swsetup_r+0x8e>
 8007410:	2000      	movs	r0, #0
 8007412:	e7f7      	b.n	8007404 <__swsetup_r+0x98>
 8007414:	20000020 	.word	0x20000020

08007418 <_raise_r>:
 8007418:	291f      	cmp	r1, #31
 800741a:	b538      	push	{r3, r4, r5, lr}
 800741c:	4605      	mov	r5, r0
 800741e:	460c      	mov	r4, r1
 8007420:	d904      	bls.n	800742c <_raise_r+0x14>
 8007422:	2316      	movs	r3, #22
 8007424:	6003      	str	r3, [r0, #0]
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800742e:	b112      	cbz	r2, 8007436 <_raise_r+0x1e>
 8007430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007434:	b94b      	cbnz	r3, 800744a <_raise_r+0x32>
 8007436:	4628      	mov	r0, r5
 8007438:	f000 f830 	bl	800749c <_getpid_r>
 800743c:	4622      	mov	r2, r4
 800743e:	4601      	mov	r1, r0
 8007440:	4628      	mov	r0, r5
 8007442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007446:	f000 b817 	b.w	8007478 <_kill_r>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d00a      	beq.n	8007464 <_raise_r+0x4c>
 800744e:	1c59      	adds	r1, r3, #1
 8007450:	d103      	bne.n	800745a <_raise_r+0x42>
 8007452:	2316      	movs	r3, #22
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	2001      	movs	r0, #1
 8007458:	e7e7      	b.n	800742a <_raise_r+0x12>
 800745a:	2100      	movs	r1, #0
 800745c:	4620      	mov	r0, r4
 800745e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007462:	4798      	blx	r3
 8007464:	2000      	movs	r0, #0
 8007466:	e7e0      	b.n	800742a <_raise_r+0x12>

08007468 <raise>:
 8007468:	4b02      	ldr	r3, [pc, #8]	@ (8007474 <raise+0xc>)
 800746a:	4601      	mov	r1, r0
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	f7ff bfd3 	b.w	8007418 <_raise_r>
 8007472:	bf00      	nop
 8007474:	20000020 	.word	0x20000020

08007478 <_kill_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	2300      	movs	r3, #0
 800747c:	4d06      	ldr	r5, [pc, #24]	@ (8007498 <_kill_r+0x20>)
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f7fa fd0e 	bl	8001ea6 <_kill>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d102      	bne.n	8007494 <_kill_r+0x1c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b103      	cbz	r3, 8007494 <_kill_r+0x1c>
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	20000958 	.word	0x20000958

0800749c <_getpid_r>:
 800749c:	f7fa bcfc 	b.w	8001e98 <_getpid>

080074a0 <__swhatbuf_r>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	4615      	mov	r5, r2
 80074aa:	2900      	cmp	r1, #0
 80074ac:	461e      	mov	r6, r3
 80074ae:	b096      	sub	sp, #88	@ 0x58
 80074b0:	da0c      	bge.n	80074cc <__swhatbuf_r+0x2c>
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	2100      	movs	r1, #0
 80074b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074ba:	bf14      	ite	ne
 80074bc:	2340      	movne	r3, #64	@ 0x40
 80074be:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074c2:	2000      	movs	r0, #0
 80074c4:	6031      	str	r1, [r6, #0]
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	b016      	add	sp, #88	@ 0x58
 80074ca:	bd70      	pop	{r4, r5, r6, pc}
 80074cc:	466a      	mov	r2, sp
 80074ce:	f000 f849 	bl	8007564 <_fstat_r>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	dbed      	blt.n	80074b2 <__swhatbuf_r+0x12>
 80074d6:	9901      	ldr	r1, [sp, #4]
 80074d8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074dc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074e0:	4259      	negs	r1, r3
 80074e2:	4159      	adcs	r1, r3
 80074e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074e8:	e7eb      	b.n	80074c2 <__swhatbuf_r+0x22>

080074ea <__smakebuf_r>:
 80074ea:	898b      	ldrh	r3, [r1, #12]
 80074ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ee:	079d      	lsls	r5, r3, #30
 80074f0:	4606      	mov	r6, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	d507      	bpl.n	8007506 <__smakebuf_r+0x1c>
 80074f6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	2301      	movs	r3, #1
 8007500:	6163      	str	r3, [r4, #20]
 8007502:	b003      	add	sp, #12
 8007504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007506:	466a      	mov	r2, sp
 8007508:	ab01      	add	r3, sp, #4
 800750a:	f7ff ffc9 	bl	80074a0 <__swhatbuf_r>
 800750e:	9f00      	ldr	r7, [sp, #0]
 8007510:	4605      	mov	r5, r0
 8007512:	4639      	mov	r1, r7
 8007514:	4630      	mov	r0, r6
 8007516:	f7fe fecd 	bl	80062b4 <_malloc_r>
 800751a:	b948      	cbnz	r0, 8007530 <__smakebuf_r+0x46>
 800751c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007520:	059a      	lsls	r2, r3, #22
 8007522:	d4ee      	bmi.n	8007502 <__smakebuf_r+0x18>
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	f043 0302 	orr.w	r3, r3, #2
 800752c:	81a3      	strh	r3, [r4, #12]
 800752e:	e7e2      	b.n	80074f6 <__smakebuf_r+0xc>
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	9b01      	ldr	r3, [sp, #4]
 800753e:	6020      	str	r0, [r4, #0]
 8007540:	b15b      	cbz	r3, 800755a <__smakebuf_r+0x70>
 8007542:	4630      	mov	r0, r6
 8007544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007548:	f000 f81e 	bl	8007588 <_isatty_r>
 800754c:	b128      	cbz	r0, 800755a <__smakebuf_r+0x70>
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	431d      	orrs	r5, r3
 800755e:	81a5      	strh	r5, [r4, #12]
 8007560:	e7cf      	b.n	8007502 <__smakebuf_r+0x18>
	...

08007564 <_fstat_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2300      	movs	r3, #0
 8007568:	4d06      	ldr	r5, [pc, #24]	@ (8007584 <_fstat_r+0x20>)
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	4611      	mov	r1, r2
 8007570:	602b      	str	r3, [r5, #0]
 8007572:	f7fa fcf7 	bl	8001f64 <_fstat>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d102      	bne.n	8007580 <_fstat_r+0x1c>
 800757a:	682b      	ldr	r3, [r5, #0]
 800757c:	b103      	cbz	r3, 8007580 <_fstat_r+0x1c>
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	bd38      	pop	{r3, r4, r5, pc}
 8007582:	bf00      	nop
 8007584:	20000958 	.word	0x20000958

08007588 <_isatty_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	2300      	movs	r3, #0
 800758c:	4d05      	ldr	r5, [pc, #20]	@ (80075a4 <_isatty_r+0x1c>)
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	602b      	str	r3, [r5, #0]
 8007594:	f7fa fcf5 	bl	8001f82 <_isatty>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_isatty_r+0x1a>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_isatty_r+0x1a>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	20000958 	.word	0x20000958

080075a8 <pow>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	4614      	mov	r4, r2
 80075ae:	461d      	mov	r5, r3
 80075b0:	4680      	mov	r8, r0
 80075b2:	4689      	mov	r9, r1
 80075b4:	f000 f868 	bl	8007688 <__ieee754_pow>
 80075b8:	4622      	mov	r2, r4
 80075ba:	4606      	mov	r6, r0
 80075bc:	460f      	mov	r7, r1
 80075be:	462b      	mov	r3, r5
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f9 fa22 	bl	8000a0c <__aeabi_dcmpun>
 80075c8:	bbc8      	cbnz	r0, 800763e <pow+0x96>
 80075ca:	2200      	movs	r2, #0
 80075cc:	2300      	movs	r3, #0
 80075ce:	4640      	mov	r0, r8
 80075d0:	4649      	mov	r1, r9
 80075d2:	f7f9 f9e9 	bl	80009a8 <__aeabi_dcmpeq>
 80075d6:	b1b8      	cbz	r0, 8007608 <pow+0x60>
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	4620      	mov	r0, r4
 80075de:	4629      	mov	r1, r5
 80075e0:	f7f9 f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d141      	bne.n	800766c <pow+0xc4>
 80075e8:	4620      	mov	r0, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	f000 f844 	bl	8007678 <finite>
 80075f0:	b328      	cbz	r0, 800763e <pow+0x96>
 80075f2:	2200      	movs	r2, #0
 80075f4:	2300      	movs	r3, #0
 80075f6:	4620      	mov	r0, r4
 80075f8:	4629      	mov	r1, r5
 80075fa:	f7f9 f9df 	bl	80009bc <__aeabi_dcmplt>
 80075fe:	b1f0      	cbz	r0, 800763e <pow+0x96>
 8007600:	f7fd ff4c 	bl	800549c <__errno>
 8007604:	2322      	movs	r3, #34	@ 0x22
 8007606:	e019      	b.n	800763c <pow+0x94>
 8007608:	4630      	mov	r0, r6
 800760a:	4639      	mov	r1, r7
 800760c:	f000 f834 	bl	8007678 <finite>
 8007610:	b9c8      	cbnz	r0, 8007646 <pow+0x9e>
 8007612:	4640      	mov	r0, r8
 8007614:	4649      	mov	r1, r9
 8007616:	f000 f82f 	bl	8007678 <finite>
 800761a:	b1a0      	cbz	r0, 8007646 <pow+0x9e>
 800761c:	4620      	mov	r0, r4
 800761e:	4629      	mov	r1, r5
 8007620:	f000 f82a 	bl	8007678 <finite>
 8007624:	b178      	cbz	r0, 8007646 <pow+0x9e>
 8007626:	4632      	mov	r2, r6
 8007628:	463b      	mov	r3, r7
 800762a:	4630      	mov	r0, r6
 800762c:	4639      	mov	r1, r7
 800762e:	f7f9 f9ed 	bl	8000a0c <__aeabi_dcmpun>
 8007632:	2800      	cmp	r0, #0
 8007634:	d0e4      	beq.n	8007600 <pow+0x58>
 8007636:	f7fd ff31 	bl	800549c <__errno>
 800763a:	2321      	movs	r3, #33	@ 0x21
 800763c:	6003      	str	r3, [r0, #0]
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f9 f9ab 	bl	80009a8 <__aeabi_dcmpeq>
 8007652:	2800      	cmp	r0, #0
 8007654:	d0f3      	beq.n	800763e <pow+0x96>
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f000 f80d 	bl	8007678 <finite>
 800765e:	2800      	cmp	r0, #0
 8007660:	d0ed      	beq.n	800763e <pow+0x96>
 8007662:	4620      	mov	r0, r4
 8007664:	4629      	mov	r1, r5
 8007666:	f000 f807 	bl	8007678 <finite>
 800766a:	e7c8      	b.n	80075fe <pow+0x56>
 800766c:	2600      	movs	r6, #0
 800766e:	4f01      	ldr	r7, [pc, #4]	@ (8007674 <pow+0xcc>)
 8007670:	e7e5      	b.n	800763e <pow+0x96>
 8007672:	bf00      	nop
 8007674:	3ff00000 	.word	0x3ff00000

08007678 <finite>:
 8007678:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800767c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007680:	0fc0      	lsrs	r0, r0, #31
 8007682:	4770      	bx	lr
 8007684:	0000      	movs	r0, r0
	...

08007688 <__ieee754_pow>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	b091      	sub	sp, #68	@ 0x44
 800768e:	e9cd 2300 	strd	r2, r3, [sp]
 8007692:	468b      	mov	fp, r1
 8007694:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007698:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800769c:	4682      	mov	sl, r0
 800769e:	ea57 0001 	orrs.w	r0, r7, r1
 80076a2:	d112      	bne.n	80076ca <__ieee754_pow+0x42>
 80076a4:	4653      	mov	r3, sl
 80076a6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80076aa:	18db      	adds	r3, r3, r3
 80076ac:	4152      	adcs	r2, r2
 80076ae:	4298      	cmp	r0, r3
 80076b0:	4b93      	ldr	r3, [pc, #588]	@ (8007900 <__ieee754_pow+0x278>)
 80076b2:	4193      	sbcs	r3, r2
 80076b4:	f080 84cd 	bcs.w	8008052 <__ieee754_pow+0x9ca>
 80076b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076bc:	4650      	mov	r0, sl
 80076be:	4659      	mov	r1, fp
 80076c0:	f7f8 fd54 	bl	800016c <__adddf3>
 80076c4:	b011      	add	sp, #68	@ 0x44
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	4b8e      	ldr	r3, [pc, #568]	@ (8007904 <__ieee754_pow+0x27c>)
 80076cc:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 80076d0:	429d      	cmp	r5, r3
 80076d2:	465e      	mov	r6, fp
 80076d4:	46d1      	mov	r9, sl
 80076d6:	d80b      	bhi.n	80076f0 <__ieee754_pow+0x68>
 80076d8:	d105      	bne.n	80076e6 <__ieee754_pow+0x5e>
 80076da:	f1ba 0f00 	cmp.w	sl, #0
 80076de:	d1eb      	bne.n	80076b8 <__ieee754_pow+0x30>
 80076e0:	42af      	cmp	r7, r5
 80076e2:	d8e9      	bhi.n	80076b8 <__ieee754_pow+0x30>
 80076e4:	e001      	b.n	80076ea <__ieee754_pow+0x62>
 80076e6:	429f      	cmp	r7, r3
 80076e8:	d802      	bhi.n	80076f0 <__ieee754_pow+0x68>
 80076ea:	429f      	cmp	r7, r3
 80076ec:	d10f      	bne.n	800770e <__ieee754_pow+0x86>
 80076ee:	b171      	cbz	r1, 800770e <__ieee754_pow+0x86>
 80076f0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80076f4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80076f8:	ea56 0609 	orrs.w	r6, r6, r9
 80076fc:	d1dc      	bne.n	80076b8 <__ieee754_pow+0x30>
 80076fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007702:	18db      	adds	r3, r3, r3
 8007704:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007708:	4152      	adcs	r2, r2
 800770a:	429e      	cmp	r6, r3
 800770c:	e7d0      	b.n	80076b0 <__ieee754_pow+0x28>
 800770e:	2e00      	cmp	r6, #0
 8007710:	462b      	mov	r3, r5
 8007712:	da42      	bge.n	800779a <__ieee754_pow+0x112>
 8007714:	4a7c      	ldr	r2, [pc, #496]	@ (8007908 <__ieee754_pow+0x280>)
 8007716:	4297      	cmp	r7, r2
 8007718:	d856      	bhi.n	80077c8 <__ieee754_pow+0x140>
 800771a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800771e:	4297      	cmp	r7, r2
 8007720:	f240 84a6 	bls.w	8008070 <__ieee754_pow+0x9e8>
 8007724:	153a      	asrs	r2, r7, #20
 8007726:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800772a:	2a14      	cmp	r2, #20
 800772c:	dd18      	ble.n	8007760 <__ieee754_pow+0xd8>
 800772e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007732:	fa21 f402 	lsr.w	r4, r1, r2
 8007736:	fa04 f202 	lsl.w	r2, r4, r2
 800773a:	428a      	cmp	r2, r1
 800773c:	f040 8498 	bne.w	8008070 <__ieee754_pow+0x9e8>
 8007740:	f004 0401 	and.w	r4, r4, #1
 8007744:	f1c4 0402 	rsb	r4, r4, #2
 8007748:	2900      	cmp	r1, #0
 800774a:	d159      	bne.n	8007800 <__ieee754_pow+0x178>
 800774c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007750:	d149      	bne.n	80077e6 <__ieee754_pow+0x15e>
 8007752:	4652      	mov	r2, sl
 8007754:	465b      	mov	r3, fp
 8007756:	4650      	mov	r0, sl
 8007758:	4659      	mov	r1, fp
 800775a:	f7f8 febd 	bl	80004d8 <__aeabi_dmul>
 800775e:	e7b1      	b.n	80076c4 <__ieee754_pow+0x3c>
 8007760:	2900      	cmp	r1, #0
 8007762:	d14c      	bne.n	80077fe <__ieee754_pow+0x176>
 8007764:	f1c2 0214 	rsb	r2, r2, #20
 8007768:	fa47 f402 	asr.w	r4, r7, r2
 800776c:	fa04 f202 	lsl.w	r2, r4, r2
 8007770:	42ba      	cmp	r2, r7
 8007772:	f040 847a 	bne.w	800806a <__ieee754_pow+0x9e2>
 8007776:	f004 0401 	and.w	r4, r4, #1
 800777a:	f1c4 0402 	rsb	r4, r4, #2
 800777e:	4a63      	ldr	r2, [pc, #396]	@ (800790c <__ieee754_pow+0x284>)
 8007780:	4297      	cmp	r7, r2
 8007782:	d1e3      	bne.n	800774c <__ieee754_pow+0xc4>
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	f280 846b 	bge.w	8008062 <__ieee754_pow+0x9da>
 800778c:	4652      	mov	r2, sl
 800778e:	465b      	mov	r3, fp
 8007790:	2000      	movs	r0, #0
 8007792:	495e      	ldr	r1, [pc, #376]	@ (800790c <__ieee754_pow+0x284>)
 8007794:	f7f8 ffca 	bl	800072c <__aeabi_ddiv>
 8007798:	e794      	b.n	80076c4 <__ieee754_pow+0x3c>
 800779a:	2400      	movs	r4, #0
 800779c:	bb81      	cbnz	r1, 8007800 <__ieee754_pow+0x178>
 800779e:	4a59      	ldr	r2, [pc, #356]	@ (8007904 <__ieee754_pow+0x27c>)
 80077a0:	4297      	cmp	r7, r2
 80077a2:	d1ec      	bne.n	800777e <__ieee754_pow+0xf6>
 80077a4:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 80077a8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80077ac:	ea53 0309 	orrs.w	r3, r3, r9
 80077b0:	f000 844f 	beq.w	8008052 <__ieee754_pow+0x9ca>
 80077b4:	4b56      	ldr	r3, [pc, #344]	@ (8007910 <__ieee754_pow+0x288>)
 80077b6:	429d      	cmp	r5, r3
 80077b8:	d908      	bls.n	80077cc <__ieee754_pow+0x144>
 80077ba:	f1b8 0f00 	cmp.w	r8, #0
 80077be:	f280 844c 	bge.w	800805a <__ieee754_pow+0x9d2>
 80077c2:	2000      	movs	r0, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	e77d      	b.n	80076c4 <__ieee754_pow+0x3c>
 80077c8:	2402      	movs	r4, #2
 80077ca:	e7e7      	b.n	800779c <__ieee754_pow+0x114>
 80077cc:	f1b8 0f00 	cmp.w	r8, #0
 80077d0:	f04f 0000 	mov.w	r0, #0
 80077d4:	f04f 0100 	mov.w	r1, #0
 80077d8:	f6bf af74 	bge.w	80076c4 <__ieee754_pow+0x3c>
 80077dc:	e9dd 0300 	ldrd	r0, r3, [sp]
 80077e0:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80077e4:	e76e      	b.n	80076c4 <__ieee754_pow+0x3c>
 80077e6:	4a4b      	ldr	r2, [pc, #300]	@ (8007914 <__ieee754_pow+0x28c>)
 80077e8:	4590      	cmp	r8, r2
 80077ea:	d109      	bne.n	8007800 <__ieee754_pow+0x178>
 80077ec:	2e00      	cmp	r6, #0
 80077ee:	db07      	blt.n	8007800 <__ieee754_pow+0x178>
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	b011      	add	sp, #68	@ 0x44
 80077f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	f000 bd0f 	b.w	800821c <__ieee754_sqrt>
 80077fe:	2400      	movs	r4, #0
 8007800:	4650      	mov	r0, sl
 8007802:	4659      	mov	r1, fp
 8007804:	9302      	str	r3, [sp, #8]
 8007806:	f000 fc69 	bl	80080dc <fabs>
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	f1b9 0f00 	cmp.w	r9, #0
 8007810:	d127      	bne.n	8007862 <__ieee754_pow+0x1da>
 8007812:	4a3e      	ldr	r2, [pc, #248]	@ (800790c <__ieee754_pow+0x284>)
 8007814:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8007818:	4594      	cmp	ip, r2
 800781a:	d000      	beq.n	800781e <__ieee754_pow+0x196>
 800781c:	bb0d      	cbnz	r5, 8007862 <__ieee754_pow+0x1da>
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	da05      	bge.n	8007830 <__ieee754_pow+0x1a8>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	2000      	movs	r0, #0
 800782a:	4938      	ldr	r1, [pc, #224]	@ (800790c <__ieee754_pow+0x284>)
 800782c:	f7f8 ff7e 	bl	800072c <__aeabi_ddiv>
 8007830:	2e00      	cmp	r6, #0
 8007832:	f6bf af47 	bge.w	80076c4 <__ieee754_pow+0x3c>
 8007836:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800783a:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800783e:	4325      	orrs	r5, r4
 8007840:	d108      	bne.n	8007854 <__ieee754_pow+0x1cc>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f7f8 fc8d 	bl	8000168 <__aeabi_dsub>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	e79f      	b.n	8007794 <__ieee754_pow+0x10c>
 8007854:	2c01      	cmp	r4, #1
 8007856:	f47f af35 	bne.w	80076c4 <__ieee754_pow+0x3c>
 800785a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800785e:	4619      	mov	r1, r3
 8007860:	e730      	b.n	80076c4 <__ieee754_pow+0x3c>
 8007862:	0ff2      	lsrs	r2, r6, #31
 8007864:	3a01      	subs	r2, #1
 8007866:	ea52 0c04 	orrs.w	ip, r2, r4
 800786a:	d102      	bne.n	8007872 <__ieee754_pow+0x1ea>
 800786c:	4652      	mov	r2, sl
 800786e:	465b      	mov	r3, fp
 8007870:	e7e9      	b.n	8007846 <__ieee754_pow+0x1be>
 8007872:	f04f 0900 	mov.w	r9, #0
 8007876:	3c01      	subs	r4, #1
 8007878:	4314      	orrs	r4, r2
 800787a:	bf14      	ite	ne
 800787c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800790c <__ieee754_pow+0x284>
 8007880:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007918 <__ieee754_pow+0x290>
 8007884:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007888:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800788c:	f240 8104 	bls.w	8007a98 <__ieee754_pow+0x410>
 8007890:	4b22      	ldr	r3, [pc, #136]	@ (800791c <__ieee754_pow+0x294>)
 8007892:	429f      	cmp	r7, r3
 8007894:	4b1e      	ldr	r3, [pc, #120]	@ (8007910 <__ieee754_pow+0x288>)
 8007896:	d913      	bls.n	80078c0 <__ieee754_pow+0x238>
 8007898:	429d      	cmp	r5, r3
 800789a:	d808      	bhi.n	80078ae <__ieee754_pow+0x226>
 800789c:	f1b8 0f00 	cmp.w	r8, #0
 80078a0:	da08      	bge.n	80078b4 <__ieee754_pow+0x22c>
 80078a2:	2000      	movs	r0, #0
 80078a4:	b011      	add	sp, #68	@ 0x44
 80078a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078aa:	f000 bcb1 	b.w	8008210 <__math_oflow>
 80078ae:	f1b8 0f00 	cmp.w	r8, #0
 80078b2:	dcf6      	bgt.n	80078a2 <__ieee754_pow+0x21a>
 80078b4:	2000      	movs	r0, #0
 80078b6:	b011      	add	sp, #68	@ 0x44
 80078b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	f000 bca3 	b.w	8008206 <__math_uflow>
 80078c0:	429d      	cmp	r5, r3
 80078c2:	d20c      	bcs.n	80078de <__ieee754_pow+0x256>
 80078c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2300      	movs	r3, #0
 80078cc:	f7f9 f876 	bl	80009bc <__aeabi_dcmplt>
 80078d0:	3800      	subs	r0, #0
 80078d2:	bf18      	it	ne
 80078d4:	2001      	movne	r0, #1
 80078d6:	f1b8 0f00 	cmp.w	r8, #0
 80078da:	daec      	bge.n	80078b6 <__ieee754_pow+0x22e>
 80078dc:	e7e2      	b.n	80078a4 <__ieee754_pow+0x21c>
 80078de:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <__ieee754_pow+0x284>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	429d      	cmp	r5, r3
 80078e4:	d91c      	bls.n	8007920 <__ieee754_pow+0x298>
 80078e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ea:	2300      	movs	r3, #0
 80078ec:	f7f9 f866 	bl	80009bc <__aeabi_dcmplt>
 80078f0:	3800      	subs	r0, #0
 80078f2:	bf18      	it	ne
 80078f4:	2001      	movne	r0, #1
 80078f6:	f1b8 0f00 	cmp.w	r8, #0
 80078fa:	dcd3      	bgt.n	80078a4 <__ieee754_pow+0x21c>
 80078fc:	e7db      	b.n	80078b6 <__ieee754_pow+0x22e>
 80078fe:	bf00      	nop
 8007900:	fff00000 	.word	0xfff00000
 8007904:	7ff00000 	.word	0x7ff00000
 8007908:	433fffff 	.word	0x433fffff
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	3fefffff 	.word	0x3fefffff
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	bff00000 	.word	0xbff00000
 800791c:	43f00000 	.word	0x43f00000
 8007920:	4b59      	ldr	r3, [pc, #356]	@ (8007a88 <__ieee754_pow+0x400>)
 8007922:	f7f8 fc21 	bl	8000168 <__aeabi_dsub>
 8007926:	a350      	add	r3, pc, #320	@ (adr r3, 8007a68 <__ieee754_pow+0x3e0>)
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	4604      	mov	r4, r0
 800792e:	460d      	mov	r5, r1
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	a34e      	add	r3, pc, #312	@ (adr r3, 8007a70 <__ieee754_pow+0x3e8>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fdc9 	bl	80004d8 <__aeabi_dmul>
 8007946:	2200      	movs	r2, #0
 8007948:	4682      	mov	sl, r0
 800794a:	468b      	mov	fp, r1
 800794c:	4620      	mov	r0, r4
 800794e:	4629      	mov	r1, r5
 8007950:	4b4e      	ldr	r3, [pc, #312]	@ (8007a8c <__ieee754_pow+0x404>)
 8007952:	f7f8 fdc1 	bl	80004d8 <__aeabi_dmul>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	a147      	add	r1, pc, #284	@ (adr r1, 8007a78 <__ieee754_pow+0x3f0>)
 800795c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007960:	f7f8 fc02 	bl	8000168 <__aeabi_dsub>
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	f7f8 fdb6 	bl	80004d8 <__aeabi_dmul>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	2000      	movs	r0, #0
 8007972:	4947      	ldr	r1, [pc, #284]	@ (8007a90 <__ieee754_pow+0x408>)
 8007974:	f7f8 fbf8 	bl	8000168 <__aeabi_dsub>
 8007978:	4622      	mov	r2, r4
 800797a:	4680      	mov	r8, r0
 800797c:	4689      	mov	r9, r1
 800797e:	462b      	mov	r3, r5
 8007980:	4620      	mov	r0, r4
 8007982:	4629      	mov	r1, r5
 8007984:	f7f8 fda8 	bl	80004d8 <__aeabi_dmul>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	f7f8 fda2 	bl	80004d8 <__aeabi_dmul>
 8007994:	a33a      	add	r3, pc, #232	@ (adr r3, 8007a80 <__ieee754_pow+0x3f8>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fd9d 	bl	80004d8 <__aeabi_dmul>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4650      	mov	r0, sl
 80079a4:	4659      	mov	r1, fp
 80079a6:	f7f8 fbdf 	bl	8000168 <__aeabi_dsub>
 80079aa:	2400      	movs	r4, #0
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4680      	mov	r8, r0
 80079b2:	4689      	mov	r9, r1
 80079b4:	4630      	mov	r0, r6
 80079b6:	4639      	mov	r1, r7
 80079b8:	f7f8 fbd8 	bl	800016c <__adddf3>
 80079bc:	4632      	mov	r2, r6
 80079be:	463b      	mov	r3, r7
 80079c0:	4620      	mov	r0, r4
 80079c2:	460d      	mov	r5, r1
 80079c4:	f7f8 fbd0 	bl	8000168 <__aeabi_dsub>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f8 fbca 	bl	8000168 <__aeabi_dsub>
 80079d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80079dc:	2300      	movs	r3, #0
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80079e4:	4606      	mov	r6, r0
 80079e6:	460f      	mov	r7, r1
 80079e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ec:	465b      	mov	r3, fp
 80079ee:	4652      	mov	r2, sl
 80079f0:	f7f8 fbba 	bl	8000168 <__aeabi_dsub>
 80079f4:	4622      	mov	r2, r4
 80079f6:	462b      	mov	r3, r5
 80079f8:	f7f8 fd6e 	bl	80004d8 <__aeabi_dmul>
 80079fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a00:	4680      	mov	r8, r0
 8007a02:	4689      	mov	r9, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f8 fd66 	bl	80004d8 <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	f7f8 fbaa 	bl	800016c <__adddf3>
 8007a18:	465b      	mov	r3, fp
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	4652      	mov	r2, sl
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7f8 fd58 	bl	80004d8 <__aeabi_dmul>
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	4689      	mov	r9, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fb9a 	bl	800016c <__adddf3>
 8007a38:	4b16      	ldr	r3, [pc, #88]	@ (8007a94 <__ieee754_pow+0x40c>)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4299      	cmp	r1, r3
 8007a3e:	460d      	mov	r5, r1
 8007a40:	468b      	mov	fp, r1
 8007a42:	f340 81fd 	ble.w	8007e40 <__ieee754_pow+0x7b8>
 8007a46:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007a4a:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007a4e:	4303      	orrs	r3, r0
 8007a50:	f000 81dc 	beq.w	8007e0c <__ieee754_pow+0x784>
 8007a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f7f8 ffae 	bl	80009bc <__aeabi_dcmplt>
 8007a60:	3800      	subs	r0, #0
 8007a62:	bf18      	it	ne
 8007a64:	2001      	movne	r0, #1
 8007a66:	e71d      	b.n	80078a4 <__ieee754_pow+0x21c>
 8007a68:	60000000 	.word	0x60000000
 8007a6c:	3ff71547 	.word	0x3ff71547
 8007a70:	f85ddf44 	.word	0xf85ddf44
 8007a74:	3e54ae0b 	.word	0x3e54ae0b
 8007a78:	55555555 	.word	0x55555555
 8007a7c:	3fd55555 	.word	0x3fd55555
 8007a80:	652b82fe 	.word	0x652b82fe
 8007a84:	3ff71547 	.word	0x3ff71547
 8007a88:	3ff00000 	.word	0x3ff00000
 8007a8c:	3fd00000 	.word	0x3fd00000
 8007a90:	3fe00000 	.word	0x3fe00000
 8007a94:	408fffff 	.word	0x408fffff
 8007a98:	4ad3      	ldr	r2, [pc, #844]	@ (8007de8 <__ieee754_pow+0x760>)
 8007a9a:	4032      	ands	r2, r6
 8007a9c:	2a00      	cmp	r2, #0
 8007a9e:	f040 817a 	bne.w	8007d96 <__ieee754_pow+0x70e>
 8007aa2:	4bd2      	ldr	r3, [pc, #840]	@ (8007dec <__ieee754_pow+0x764>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f7f8 fd17 	bl	80004d8 <__aeabi_dmul>
 8007aaa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8007aae:	460b      	mov	r3, r1
 8007ab0:	151a      	asrs	r2, r3, #20
 8007ab2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007ab6:	4422      	add	r2, r4
 8007ab8:	920a      	str	r2, [sp, #40]	@ 0x28
 8007aba:	4acd      	ldr	r2, [pc, #820]	@ (8007df0 <__ieee754_pow+0x768>)
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007aca:	dd08      	ble.n	8007ade <__ieee754_pow+0x456>
 8007acc:	4ac9      	ldr	r2, [pc, #804]	@ (8007df4 <__ieee754_pow+0x76c>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	f340 8163 	ble.w	8007d9a <__ieee754_pow+0x712>
 8007ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007ada:	3301      	adds	r3, #1
 8007adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ade:	2600      	movs	r6, #0
 8007ae0:	00f3      	lsls	r3, r6, #3
 8007ae2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ae4:	4bc4      	ldr	r3, [pc, #784]	@ (8007df8 <__ieee754_pow+0x770>)
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007af0:	461a      	mov	r2, r3
 8007af2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007af6:	4623      	mov	r3, r4
 8007af8:	4682      	mov	sl, r0
 8007afa:	f7f8 fb35 	bl	8000168 <__aeabi_dsub>
 8007afe:	4652      	mov	r2, sl
 8007b00:	462b      	mov	r3, r5
 8007b02:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007b06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b0a:	f7f8 fb2f 	bl	800016c <__adddf3>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	2000      	movs	r0, #0
 8007b14:	49b9      	ldr	r1, [pc, #740]	@ (8007dfc <__ieee754_pow+0x774>)
 8007b16:	f7f8 fe09 	bl	800072c <__aeabi_ddiv>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b26:	f7f8 fcd7 	bl	80004d8 <__aeabi_dmul>
 8007b2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b2e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007b32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b36:	2300      	movs	r3, #0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	46ab      	mov	fp, r5
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007b48:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b4c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	4614      	mov	r4, r2
 8007b56:	461d      	mov	r5, r3
 8007b58:	f7f8 fcbe 	bl	80004d8 <__aeabi_dmul>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b64:	f7f8 fb00 	bl	8000168 <__aeabi_dsub>
 8007b68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	460f      	mov	r7, r1
 8007b70:	4620      	mov	r0, r4
 8007b72:	4629      	mov	r1, r5
 8007b74:	f7f8 faf8 	bl	8000168 <__aeabi_dsub>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	4659      	mov	r1, fp
 8007b80:	f7f8 faf2 	bl	8000168 <__aeabi_dsub>
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	f7f8 fca6 	bl	80004d8 <__aeabi_dmul>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fae8 	bl	8000168 <__aeabi_dsub>
 8007b98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007b9c:	f7f8 fc9c 	bl	80004d8 <__aeabi_dmul>
 8007ba0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ba8:	4610      	mov	r0, r2
 8007baa:	4619      	mov	r1, r3
 8007bac:	f7f8 fc94 	bl	80004d8 <__aeabi_dmul>
 8007bb0:	a37b      	add	r3, pc, #492	@ (adr r3, 8007da0 <__ieee754_pow+0x718>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	460d      	mov	r5, r1
 8007bba:	f7f8 fc8d 	bl	80004d8 <__aeabi_dmul>
 8007bbe:	a37a      	add	r3, pc, #488	@ (adr r3, 8007da8 <__ieee754_pow+0x720>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fad2 	bl	800016c <__adddf3>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	462b      	mov	r3, r5
 8007bcc:	f7f8 fc84 	bl	80004d8 <__aeabi_dmul>
 8007bd0:	a377      	add	r3, pc, #476	@ (adr r3, 8007db0 <__ieee754_pow+0x728>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fac9 	bl	800016c <__adddf3>
 8007bda:	4622      	mov	r2, r4
 8007bdc:	462b      	mov	r3, r5
 8007bde:	f7f8 fc7b 	bl	80004d8 <__aeabi_dmul>
 8007be2:	a375      	add	r3, pc, #468	@ (adr r3, 8007db8 <__ieee754_pow+0x730>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fac0 	bl	800016c <__adddf3>
 8007bec:	4622      	mov	r2, r4
 8007bee:	462b      	mov	r3, r5
 8007bf0:	f7f8 fc72 	bl	80004d8 <__aeabi_dmul>
 8007bf4:	a372      	add	r3, pc, #456	@ (adr r3, 8007dc0 <__ieee754_pow+0x738>)
 8007bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfa:	f7f8 fab7 	bl	800016c <__adddf3>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	462b      	mov	r3, r5
 8007c02:	f7f8 fc69 	bl	80004d8 <__aeabi_dmul>
 8007c06:	a370      	add	r3, pc, #448	@ (adr r3, 8007dc8 <__ieee754_pow+0x740>)
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 faae 	bl	800016c <__adddf3>
 8007c10:	4622      	mov	r2, r4
 8007c12:	4606      	mov	r6, r0
 8007c14:	460f      	mov	r7, r1
 8007c16:	462b      	mov	r3, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f7f8 fc5c 	bl	80004d8 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f7f8 fc56 	bl	80004d8 <__aeabi_dmul>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c34:	4642      	mov	r2, r8
 8007c36:	464b      	mov	r3, r9
 8007c38:	f7f8 fa98 	bl	800016c <__adddf3>
 8007c3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c40:	f7f8 fc4a 	bl	80004d8 <__aeabi_dmul>
 8007c44:	4622      	mov	r2, r4
 8007c46:	462b      	mov	r3, r5
 8007c48:	f7f8 fa90 	bl	800016c <__adddf3>
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4682      	mov	sl, r0
 8007c50:	468b      	mov	fp, r1
 8007c52:	464b      	mov	r3, r9
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f7f8 fc3e 	bl	80004d8 <__aeabi_dmul>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4b68      	ldr	r3, [pc, #416]	@ (8007e00 <__ieee754_pow+0x778>)
 8007c60:	4606      	mov	r6, r0
 8007c62:	460f      	mov	r7, r1
 8007c64:	f7f8 fa82 	bl	800016c <__adddf3>
 8007c68:	4652      	mov	r2, sl
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	f7f8 fa7e 	bl	800016c <__adddf3>
 8007c70:	2400      	movs	r4, #0
 8007c72:	460d      	mov	r5, r1
 8007c74:	4622      	mov	r2, r4
 8007c76:	460b      	mov	r3, r1
 8007c78:	4640      	mov	r0, r8
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	f7f8 fc2c 	bl	80004d8 <__aeabi_dmul>
 8007c80:	2200      	movs	r2, #0
 8007c82:	4680      	mov	r8, r0
 8007c84:	4689      	mov	r9, r1
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4b5d      	ldr	r3, [pc, #372]	@ (8007e00 <__ieee754_pow+0x778>)
 8007c8c:	f7f8 fa6c 	bl	8000168 <__aeabi_dsub>
 8007c90:	4632      	mov	r2, r6
 8007c92:	463b      	mov	r3, r7
 8007c94:	f7f8 fa68 	bl	8000168 <__aeabi_dsub>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4650      	mov	r0, sl
 8007c9e:	4659      	mov	r1, fp
 8007ca0:	f7f8 fa62 	bl	8000168 <__aeabi_dsub>
 8007ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ca8:	f7f8 fc16 	bl	80004d8 <__aeabi_dmul>
 8007cac:	4622      	mov	r2, r4
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fa52 	bl	800016c <__adddf3>
 8007cc8:	2400      	movs	r4, #0
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 fa49 	bl	800016c <__adddf3>
 8007cda:	a33d      	add	r3, pc, #244	@ (adr r3, 8007dd0 <__ieee754_pow+0x748>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	f7f8 fbf8 	bl	80004d8 <__aeabi_dmul>
 8007ce8:	4642      	mov	r2, r8
 8007cea:	464b      	mov	r3, r9
 8007cec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fa38 	bl	8000168 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	4639      	mov	r1, r7
 8007d00:	f7f8 fa32 	bl	8000168 <__aeabi_dsub>
 8007d04:	a334      	add	r3, pc, #208	@ (adr r3, 8007dd8 <__ieee754_pow+0x750>)
 8007d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	a334      	add	r3, pc, #208	@ (adr r3, 8007de0 <__ieee754_pow+0x758>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	4606      	mov	r6, r0
 8007d16:	460f      	mov	r7, r1
 8007d18:	4620      	mov	r0, r4
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f7f8 fbdc 	bl	80004d8 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fa20 	bl	800016c <__adddf3>
 8007d2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d2e:	4b35      	ldr	r3, [pc, #212]	@ (8007e04 <__ieee754_pow+0x77c>)
 8007d30:	2400      	movs	r4, #0
 8007d32:	4413      	add	r3, r2
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f7f8 fa18 	bl	800016c <__adddf3>
 8007d3c:	4682      	mov	sl, r0
 8007d3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d40:	468b      	mov	fp, r1
 8007d42:	f7f8 fb5f 	bl	8000404 <__aeabi_i2d>
 8007d46:	4606      	mov	r6, r0
 8007d48:	460f      	mov	r7, r1
 8007d4a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007e08 <__ieee754_pow+0x780>)
 8007d4e:	4413      	add	r3, r2
 8007d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d54:	4652      	mov	r2, sl
 8007d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5a:	465b      	mov	r3, fp
 8007d5c:	f7f8 fa06 	bl	800016c <__adddf3>
 8007d60:	4642      	mov	r2, r8
 8007d62:	464b      	mov	r3, r9
 8007d64:	f7f8 fa02 	bl	800016c <__adddf3>
 8007d68:	4632      	mov	r2, r6
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	f7f8 f9fe 	bl	800016c <__adddf3>
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	4620      	mov	r0, r4
 8007d76:	460d      	mov	r5, r1
 8007d78:	f7f8 f9f6 	bl	8000168 <__aeabi_dsub>
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	f7f8 f9f2 	bl	8000168 <__aeabi_dsub>
 8007d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d88:	f7f8 f9ee 	bl	8000168 <__aeabi_dsub>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4650      	mov	r0, sl
 8007d92:	4659      	mov	r1, fp
 8007d94:	e61c      	b.n	80079d0 <__ieee754_pow+0x348>
 8007d96:	2400      	movs	r4, #0
 8007d98:	e68a      	b.n	8007ab0 <__ieee754_pow+0x428>
 8007d9a:	2601      	movs	r6, #1
 8007d9c:	e6a0      	b.n	8007ae0 <__ieee754_pow+0x458>
 8007d9e:	bf00      	nop
 8007da0:	4a454eef 	.word	0x4a454eef
 8007da4:	3fca7e28 	.word	0x3fca7e28
 8007da8:	93c9db65 	.word	0x93c9db65
 8007dac:	3fcd864a 	.word	0x3fcd864a
 8007db0:	a91d4101 	.word	0xa91d4101
 8007db4:	3fd17460 	.word	0x3fd17460
 8007db8:	518f264d 	.word	0x518f264d
 8007dbc:	3fd55555 	.word	0x3fd55555
 8007dc0:	db6fabff 	.word	0xdb6fabff
 8007dc4:	3fdb6db6 	.word	0x3fdb6db6
 8007dc8:	33333303 	.word	0x33333303
 8007dcc:	3fe33333 	.word	0x3fe33333
 8007dd0:	e0000000 	.word	0xe0000000
 8007dd4:	3feec709 	.word	0x3feec709
 8007dd8:	dc3a03fd 	.word	0xdc3a03fd
 8007ddc:	3feec709 	.word	0x3feec709
 8007de0:	145b01f5 	.word	0x145b01f5
 8007de4:	be3e2fe0 	.word	0xbe3e2fe0
 8007de8:	7ff00000 	.word	0x7ff00000
 8007dec:	43400000 	.word	0x43400000
 8007df0:	0003988e 	.word	0x0003988e
 8007df4:	000bb679 	.word	0x000bb679
 8007df8:	08008820 	.word	0x08008820
 8007dfc:	3ff00000 	.word	0x3ff00000
 8007e00:	40080000 	.word	0x40080000
 8007e04:	08008800 	.word	0x08008800
 8007e08:	08008810 	.word	0x08008810
 8007e0c:	a39a      	add	r3, pc, #616	@ (adr r3, 8008078 <__ieee754_pow+0x9f0>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 f9a9 	bl	800016c <__adddf3>
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e20:	464b      	mov	r3, r9
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 f99f 	bl	8000168 <__aeabi_dsub>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e32:	f7f8 fde1 	bl	80009f8 <__aeabi_dcmpgt>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f47f ae0c 	bne.w	8007a54 <__ieee754_pow+0x3cc>
 8007e3c:	4ba0      	ldr	r3, [pc, #640]	@ (80080c0 <__ieee754_pow+0xa38>)
 8007e3e:	e022      	b.n	8007e86 <__ieee754_pow+0x7fe>
 8007e40:	4ca0      	ldr	r4, [pc, #640]	@ (80080c4 <__ieee754_pow+0xa3c>)
 8007e42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	d919      	bls.n	8007e7e <__ieee754_pow+0x7f6>
 8007e4a:	4b9f      	ldr	r3, [pc, #636]	@ (80080c8 <__ieee754_pow+0xa40>)
 8007e4c:	440b      	add	r3, r1
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	d009      	beq.n	8007e66 <__ieee754_pow+0x7de>
 8007e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e56:	2200      	movs	r2, #0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f7f8 fdaf 	bl	80009bc <__aeabi_dcmplt>
 8007e5e:	3800      	subs	r0, #0
 8007e60:	bf18      	it	ne
 8007e62:	2001      	movne	r0, #1
 8007e64:	e527      	b.n	80078b6 <__ieee754_pow+0x22e>
 8007e66:	4642      	mov	r2, r8
 8007e68:	464b      	mov	r3, r9
 8007e6a:	f7f8 f97d 	bl	8000168 <__aeabi_dsub>
 8007e6e:	4632      	mov	r2, r6
 8007e70:	463b      	mov	r3, r7
 8007e72:	f7f8 fdb7 	bl	80009e4 <__aeabi_dcmpge>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d1eb      	bne.n	8007e52 <__ieee754_pow+0x7ca>
 8007e7a:	4b94      	ldr	r3, [pc, #592]	@ (80080cc <__ieee754_pow+0xa44>)
 8007e7c:	e003      	b.n	8007e86 <__ieee754_pow+0x7fe>
 8007e7e:	4a94      	ldr	r2, [pc, #592]	@ (80080d0 <__ieee754_pow+0xa48>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	f240 80e1 	bls.w	8008048 <__ieee754_pow+0x9c0>
 8007e86:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007e8a:	151b      	asrs	r3, r3, #20
 8007e8c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007e90:	fa4a fa03 	asr.w	sl, sl, r3
 8007e94:	44da      	add	sl, fp
 8007e96:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007e9a:	488e      	ldr	r0, [pc, #568]	@ (80080d4 <__ieee754_pow+0xa4c>)
 8007e9c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007ea0:	4108      	asrs	r0, r1
 8007ea2:	ea00 030a 	and.w	r3, r0, sl
 8007ea6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007eaa:	f1c1 0114 	rsb	r1, r1, #20
 8007eae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	fa4a fa01 	asr.w	sl, sl, r1
 8007eb8:	f1bb 0f00 	cmp.w	fp, #0
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	bfb8      	it	lt
 8007ec4:	f1ca 0a00 	rsblt	sl, sl, #0
 8007ec8:	f7f8 f94e 	bl	8000168 <__aeabi_dsub>
 8007ecc:	4680      	mov	r8, r0
 8007ece:	4689      	mov	r9, r1
 8007ed0:	2400      	movs	r4, #0
 8007ed2:	4632      	mov	r2, r6
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	4640      	mov	r0, r8
 8007ed8:	4649      	mov	r1, r9
 8007eda:	f7f8 f947 	bl	800016c <__adddf3>
 8007ede:	a368      	add	r3, pc, #416	@ (adr r3, 8008080 <__ieee754_pow+0x9f8>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	f7f8 faf6 	bl	80004d8 <__aeabi_dmul>
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7f8 f936 	bl	8000168 <__aeabi_dsub>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4630      	mov	r0, r6
 8007f02:	4639      	mov	r1, r7
 8007f04:	f7f8 f930 	bl	8000168 <__aeabi_dsub>
 8007f08:	a35f      	add	r3, pc, #380	@ (adr r3, 8008088 <__ieee754_pow+0xa00>)
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	f7f8 fae3 	bl	80004d8 <__aeabi_dmul>
 8007f12:	a35f      	add	r3, pc, #380	@ (adr r3, 8008090 <__ieee754_pow+0xa08>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4689      	mov	r9, r1
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fada 	bl	80004d8 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f91e 	bl	800016c <__adddf3>
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f3c:	f7f8 f916 	bl	800016c <__adddf3>
 8007f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f44:	4680      	mov	r8, r0
 8007f46:	4689      	mov	r9, r1
 8007f48:	f7f8 f90e 	bl	8000168 <__aeabi_dsub>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 f908 	bl	8000168 <__aeabi_dsub>
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	464b      	mov	r3, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7f8 fab8 	bl	80004d8 <__aeabi_dmul>
 8007f68:	a34b      	add	r3, pc, #300	@ (adr r3, 8008098 <__ieee754_pow+0xa10>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
 8007f72:	f7f8 fab1 	bl	80004d8 <__aeabi_dmul>
 8007f76:	a34a      	add	r3, pc, #296	@ (adr r3, 80080a0 <__ieee754_pow+0xa18>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 f8f4 	bl	8000168 <__aeabi_dsub>
 8007f80:	4622      	mov	r2, r4
 8007f82:	462b      	mov	r3, r5
 8007f84:	f7f8 faa8 	bl	80004d8 <__aeabi_dmul>
 8007f88:	a347      	add	r3, pc, #284	@ (adr r3, 80080a8 <__ieee754_pow+0xa20>)
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f7f8 f8ed 	bl	800016c <__adddf3>
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	f7f8 fa9f 	bl	80004d8 <__aeabi_dmul>
 8007f9a:	a345      	add	r3, pc, #276	@ (adr r3, 80080b0 <__ieee754_pow+0xa28>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 f8e2 	bl	8000168 <__aeabi_dsub>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	f7f8 fa96 	bl	80004d8 <__aeabi_dmul>
 8007fac:	a342      	add	r3, pc, #264	@ (adr r3, 80080b8 <__ieee754_pow+0xa30>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 f8db 	bl	800016c <__adddf3>
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	f7f8 fa8d 	bl	80004d8 <__aeabi_dmul>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	f7f8 f8cf 	bl	8000168 <__aeabi_dsub>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 fa7f 	bl	80004d8 <__aeabi_dmul>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	e9cd 0100 	strd	r0, r1, [sp]
 8007fe0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7f8 f8be 	bl	8000168 <__aeabi_dsub>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ff4:	f7f8 fb9a 	bl	800072c <__aeabi_ddiv>
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	460d      	mov	r5, r1
 8007ffe:	463b      	mov	r3, r7
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 fa68 	bl	80004d8 <__aeabi_dmul>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 f8ae 	bl	800016c <__adddf3>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 f8a6 	bl	8000168 <__aeabi_dsub>
 800801c:	4642      	mov	r2, r8
 800801e:	464b      	mov	r3, r9
 8008020:	f7f8 f8a2 	bl	8000168 <__aeabi_dsub>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	2000      	movs	r0, #0
 800802a:	492b      	ldr	r1, [pc, #172]	@ (80080d8 <__ieee754_pow+0xa50>)
 800802c:	f7f8 f89c 	bl	8000168 <__aeabi_dsub>
 8008030:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008034:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008038:	da09      	bge.n	800804e <__ieee754_pow+0x9c6>
 800803a:	4652      	mov	r2, sl
 800803c:	f000 f854 	bl	80080e8 <scalbn>
 8008040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008044:	f7ff bb89 	b.w	800775a <__ieee754_pow+0xd2>
 8008048:	f8dd a010 	ldr.w	sl, [sp, #16]
 800804c:	e740      	b.n	8007ed0 <__ieee754_pow+0x848>
 800804e:	4621      	mov	r1, r4
 8008050:	e7f6      	b.n	8008040 <__ieee754_pow+0x9b8>
 8008052:	2000      	movs	r0, #0
 8008054:	4920      	ldr	r1, [pc, #128]	@ (80080d8 <__ieee754_pow+0xa50>)
 8008056:	f7ff bb35 	b.w	80076c4 <__ieee754_pow+0x3c>
 800805a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800805e:	f7ff bb31 	b.w	80076c4 <__ieee754_pow+0x3c>
 8008062:	4650      	mov	r0, sl
 8008064:	4659      	mov	r1, fp
 8008066:	f7ff bb2d 	b.w	80076c4 <__ieee754_pow+0x3c>
 800806a:	460c      	mov	r4, r1
 800806c:	f7ff bb87 	b.w	800777e <__ieee754_pow+0xf6>
 8008070:	2400      	movs	r4, #0
 8008072:	f7ff bb69 	b.w	8007748 <__ieee754_pow+0xc0>
 8008076:	bf00      	nop
 8008078:	652b82fe 	.word	0x652b82fe
 800807c:	3c971547 	.word	0x3c971547
 8008080:	00000000 	.word	0x00000000
 8008084:	3fe62e43 	.word	0x3fe62e43
 8008088:	fefa39ef 	.word	0xfefa39ef
 800808c:	3fe62e42 	.word	0x3fe62e42
 8008090:	0ca86c39 	.word	0x0ca86c39
 8008094:	be205c61 	.word	0xbe205c61
 8008098:	72bea4d0 	.word	0x72bea4d0
 800809c:	3e663769 	.word	0x3e663769
 80080a0:	c5d26bf1 	.word	0xc5d26bf1
 80080a4:	3ebbbd41 	.word	0x3ebbbd41
 80080a8:	af25de2c 	.word	0xaf25de2c
 80080ac:	3f11566a 	.word	0x3f11566a
 80080b0:	16bebd93 	.word	0x16bebd93
 80080b4:	3f66c16c 	.word	0x3f66c16c
 80080b8:	5555553e 	.word	0x5555553e
 80080bc:	3fc55555 	.word	0x3fc55555
 80080c0:	40900000 	.word	0x40900000
 80080c4:	4090cbff 	.word	0x4090cbff
 80080c8:	3f6f3400 	.word	0x3f6f3400
 80080cc:	4090cc00 	.word	0x4090cc00
 80080d0:	3fe00000 	.word	0x3fe00000
 80080d4:	fff00000 	.word	0xfff00000
 80080d8:	3ff00000 	.word	0x3ff00000

080080dc <fabs>:
 80080dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080e0:	4619      	mov	r1, r3
 80080e2:	4770      	bx	lr
 80080e4:	0000      	movs	r0, r0
	...

080080e8 <scalbn>:
 80080e8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80080ec:	4616      	mov	r6, r2
 80080ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80080f2:	4683      	mov	fp, r0
 80080f4:	468c      	mov	ip, r1
 80080f6:	460b      	mov	r3, r1
 80080f8:	b982      	cbnz	r2, 800811c <scalbn+0x34>
 80080fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080fe:	4303      	orrs	r3, r0
 8008100:	d035      	beq.n	800816e <scalbn+0x86>
 8008102:	4b2d      	ldr	r3, [pc, #180]	@ (80081b8 <scalbn+0xd0>)
 8008104:	2200      	movs	r2, #0
 8008106:	f7f8 f9e7 	bl	80004d8 <__aeabi_dmul>
 800810a:	4b2c      	ldr	r3, [pc, #176]	@ (80081bc <scalbn+0xd4>)
 800810c:	4683      	mov	fp, r0
 800810e:	429e      	cmp	r6, r3
 8008110:	468c      	mov	ip, r1
 8008112:	da0d      	bge.n	8008130 <scalbn+0x48>
 8008114:	a324      	add	r3, pc, #144	@ (adr r3, 80081a8 <scalbn+0xc0>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	e019      	b.n	8008150 <scalbn+0x68>
 800811c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008120:	42ba      	cmp	r2, r7
 8008122:	d109      	bne.n	8008138 <scalbn+0x50>
 8008124:	4602      	mov	r2, r0
 8008126:	f7f8 f821 	bl	800016c <__adddf3>
 800812a:	4683      	mov	fp, r0
 800812c:	468c      	mov	ip, r1
 800812e:	e01e      	b.n	800816e <scalbn+0x86>
 8008130:	460b      	mov	r3, r1
 8008132:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008136:	3a36      	subs	r2, #54	@ 0x36
 8008138:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800813c:	428e      	cmp	r6, r1
 800813e:	dd0a      	ble.n	8008156 <scalbn+0x6e>
 8008140:	a31b      	add	r3, pc, #108	@ (adr r3, 80081b0 <scalbn+0xc8>)
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	4665      	mov	r5, ip
 8008148:	f363 051e 	bfi	r5, r3, #0, #31
 800814c:	4629      	mov	r1, r5
 800814e:	481c      	ldr	r0, [pc, #112]	@ (80081c0 <scalbn+0xd8>)
 8008150:	f7f8 f9c2 	bl	80004d8 <__aeabi_dmul>
 8008154:	e7e9      	b.n	800812a <scalbn+0x42>
 8008156:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800815a:	4432      	add	r2, r6
 800815c:	428a      	cmp	r2, r1
 800815e:	dcef      	bgt.n	8008140 <scalbn+0x58>
 8008160:	2a00      	cmp	r2, #0
 8008162:	dd08      	ble.n	8008176 <scalbn+0x8e>
 8008164:	f36f 531e 	bfc	r3, #20, #11
 8008168:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800816c:	46ac      	mov	ip, r5
 800816e:	4658      	mov	r0, fp
 8008170:	4661      	mov	r1, ip
 8008172:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008176:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800817a:	da09      	bge.n	8008190 <scalbn+0xa8>
 800817c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008180:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008184:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008188:	480e      	ldr	r0, [pc, #56]	@ (80081c4 <scalbn+0xdc>)
 800818a:	f041 011f 	orr.w	r1, r1, #31
 800818e:	e7c1      	b.n	8008114 <scalbn+0x2c>
 8008190:	3236      	adds	r2, #54	@ 0x36
 8008192:	f36f 531e 	bfc	r3, #20, #11
 8008196:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800819a:	4658      	mov	r0, fp
 800819c:	4629      	mov	r1, r5
 800819e:	2200      	movs	r2, #0
 80081a0:	4b09      	ldr	r3, [pc, #36]	@ (80081c8 <scalbn+0xe0>)
 80081a2:	e7d5      	b.n	8008150 <scalbn+0x68>
 80081a4:	f3af 8000 	nop.w
 80081a8:	c2f8f359 	.word	0xc2f8f359
 80081ac:	01a56e1f 	.word	0x01a56e1f
 80081b0:	8800759c 	.word	0x8800759c
 80081b4:	7e37e43c 	.word	0x7e37e43c
 80081b8:	43500000 	.word	0x43500000
 80081bc:	ffff3cb0 	.word	0xffff3cb0
 80081c0:	8800759c 	.word	0x8800759c
 80081c4:	c2f8f359 	.word	0xc2f8f359
 80081c8:	3c900000 	.word	0x3c900000

080081cc <with_errno>:
 80081cc:	b570      	push	{r4, r5, r6, lr}
 80081ce:	4604      	mov	r4, r0
 80081d0:	460d      	mov	r5, r1
 80081d2:	4616      	mov	r6, r2
 80081d4:	f7fd f962 	bl	800549c <__errno>
 80081d8:	4629      	mov	r1, r5
 80081da:	6006      	str	r6, [r0, #0]
 80081dc:	4620      	mov	r0, r4
 80081de:	bd70      	pop	{r4, r5, r6, pc}

080081e0 <xflow>:
 80081e0:	b513      	push	{r0, r1, r4, lr}
 80081e2:	4604      	mov	r4, r0
 80081e4:	4619      	mov	r1, r3
 80081e6:	4610      	mov	r0, r2
 80081e8:	b10c      	cbz	r4, 80081ee <xflow+0xe>
 80081ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80081ee:	e9cd 2300 	strd	r2, r3, [sp]
 80081f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f6:	f7f8 f96f 	bl	80004d8 <__aeabi_dmul>
 80081fa:	2222      	movs	r2, #34	@ 0x22
 80081fc:	b002      	add	sp, #8
 80081fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008202:	f7ff bfe3 	b.w	80081cc <with_errno>

08008206 <__math_uflow>:
 8008206:	2200      	movs	r2, #0
 8008208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800820c:	f7ff bfe8 	b.w	80081e0 <xflow>

08008210 <__math_oflow>:
 8008210:	2200      	movs	r2, #0
 8008212:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008216:	f7ff bfe3 	b.w	80081e0 <xflow>
	...

0800821c <__ieee754_sqrt>:
 800821c:	4a65      	ldr	r2, [pc, #404]	@ (80083b4 <__ieee754_sqrt+0x198>)
 800821e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008222:	438a      	bics	r2, r1
 8008224:	4606      	mov	r6, r0
 8008226:	460f      	mov	r7, r1
 8008228:	460b      	mov	r3, r1
 800822a:	4604      	mov	r4, r0
 800822c:	d10e      	bne.n	800824c <__ieee754_sqrt+0x30>
 800822e:	4602      	mov	r2, r0
 8008230:	f7f8 f952 	bl	80004d8 <__aeabi_dmul>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f7 ff96 	bl	800016c <__adddf3>
 8008240:	4606      	mov	r6, r0
 8008242:	460f      	mov	r7, r1
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	2900      	cmp	r1, #0
 800824e:	dc0c      	bgt.n	800826a <__ieee754_sqrt+0x4e>
 8008250:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008254:	4302      	orrs	r2, r0
 8008256:	d0f5      	beq.n	8008244 <__ieee754_sqrt+0x28>
 8008258:	b189      	cbz	r1, 800827e <__ieee754_sqrt+0x62>
 800825a:	4602      	mov	r2, r0
 800825c:	f7f7 ff84 	bl	8000168 <__aeabi_dsub>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	f7f8 fa62 	bl	800072c <__aeabi_ddiv>
 8008268:	e7ea      	b.n	8008240 <__ieee754_sqrt+0x24>
 800826a:	150a      	asrs	r2, r1, #20
 800826c:	d115      	bne.n	800829a <__ieee754_sqrt+0x7e>
 800826e:	2100      	movs	r1, #0
 8008270:	e009      	b.n	8008286 <__ieee754_sqrt+0x6a>
 8008272:	0ae3      	lsrs	r3, r4, #11
 8008274:	3a15      	subs	r2, #21
 8008276:	0564      	lsls	r4, r4, #21
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0fa      	beq.n	8008272 <__ieee754_sqrt+0x56>
 800827c:	e7f7      	b.n	800826e <__ieee754_sqrt+0x52>
 800827e:	460a      	mov	r2, r1
 8008280:	e7fa      	b.n	8008278 <__ieee754_sqrt+0x5c>
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	3101      	adds	r1, #1
 8008286:	02d8      	lsls	r0, r3, #11
 8008288:	d5fb      	bpl.n	8008282 <__ieee754_sqrt+0x66>
 800828a:	1e48      	subs	r0, r1, #1
 800828c:	1a12      	subs	r2, r2, r0
 800828e:	f1c1 0020 	rsb	r0, r1, #32
 8008292:	fa24 f000 	lsr.w	r0, r4, r0
 8008296:	4303      	orrs	r3, r0
 8008298:	408c      	lsls	r4, r1
 800829a:	2700      	movs	r7, #0
 800829c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 80082a0:	2116      	movs	r1, #22
 80082a2:	07d2      	lsls	r2, r2, #31
 80082a4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80082a8:	463a      	mov	r2, r7
 80082aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082b2:	bf5c      	itt	pl
 80082b4:	005b      	lslpl	r3, r3, #1
 80082b6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80082ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082be:	bf58      	it	pl
 80082c0:	0064      	lslpl	r4, r4, #1
 80082c2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80082c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082ca:	0064      	lsls	r4, r4, #1
 80082cc:	1815      	adds	r5, r2, r0
 80082ce:	429d      	cmp	r5, r3
 80082d0:	bfde      	ittt	le
 80082d2:	182a      	addle	r2, r5, r0
 80082d4:	1b5b      	suble	r3, r3, r5
 80082d6:	183f      	addle	r7, r7, r0
 80082d8:	0fe5      	lsrs	r5, r4, #31
 80082da:	3901      	subs	r1, #1
 80082dc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80082e0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80082e4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80082e8:	d1f0      	bne.n	80082cc <__ieee754_sqrt+0xb0>
 80082ea:	460d      	mov	r5, r1
 80082ec:	2620      	movs	r6, #32
 80082ee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80082f2:	4293      	cmp	r3, r2
 80082f4:	eb00 0c01 	add.w	ip, r0, r1
 80082f8:	dc02      	bgt.n	8008300 <__ieee754_sqrt+0xe4>
 80082fa:	d113      	bne.n	8008324 <__ieee754_sqrt+0x108>
 80082fc:	45a4      	cmp	ip, r4
 80082fe:	d811      	bhi.n	8008324 <__ieee754_sqrt+0x108>
 8008300:	f1bc 0f00 	cmp.w	ip, #0
 8008304:	eb0c 0100 	add.w	r1, ip, r0
 8008308:	da3e      	bge.n	8008388 <__ieee754_sqrt+0x16c>
 800830a:	2900      	cmp	r1, #0
 800830c:	db3c      	blt.n	8008388 <__ieee754_sqrt+0x16c>
 800830e:	f102 0e01 	add.w	lr, r2, #1
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	4672      	mov	r2, lr
 8008316:	45a4      	cmp	ip, r4
 8008318:	bf88      	it	hi
 800831a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800831e:	eba4 040c 	sub.w	r4, r4, ip
 8008322:	4405      	add	r5, r0
 8008324:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008328:	3e01      	subs	r6, #1
 800832a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800832e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008332:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008336:	d1dc      	bne.n	80082f2 <__ieee754_sqrt+0xd6>
 8008338:	431c      	orrs	r4, r3
 800833a:	d01a      	beq.n	8008372 <__ieee754_sqrt+0x156>
 800833c:	4c1e      	ldr	r4, [pc, #120]	@ (80083b8 <__ieee754_sqrt+0x19c>)
 800833e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 80083bc <__ieee754_sqrt+0x1a0>
 8008342:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008346:	e9d9 2300 	ldrd	r2, r3, [r9]
 800834a:	f7f7 ff0d 	bl	8000168 <__aeabi_dsub>
 800834e:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f8 fb39 	bl	80009d0 <__aeabi_dcmple>
 800835e:	b140      	cbz	r0, 8008372 <__ieee754_sqrt+0x156>
 8008360:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008364:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008368:	f1b5 3fff 	cmp.w	r5, #4294967295
 800836c:	d10e      	bne.n	800838c <__ieee754_sqrt+0x170>
 800836e:	4635      	mov	r5, r6
 8008370:	3701      	adds	r7, #1
 8008372:	107b      	asrs	r3, r7, #1
 8008374:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008378:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800837c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008380:	086b      	lsrs	r3, r5, #1
 8008382:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8008386:	e75b      	b.n	8008240 <__ieee754_sqrt+0x24>
 8008388:	4696      	mov	lr, r2
 800838a:	e7c2      	b.n	8008312 <__ieee754_sqrt+0xf6>
 800838c:	f7f7 feee 	bl	800016c <__adddf3>
 8008390:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4650      	mov	r0, sl
 800839a:	4659      	mov	r1, fp
 800839c:	f7f8 fb0e 	bl	80009bc <__aeabi_dcmplt>
 80083a0:	b120      	cbz	r0, 80083ac <__ieee754_sqrt+0x190>
 80083a2:	1cab      	adds	r3, r5, #2
 80083a4:	bf08      	it	eq
 80083a6:	3701      	addeq	r7, #1
 80083a8:	3502      	adds	r5, #2
 80083aa:	e7e2      	b.n	8008372 <__ieee754_sqrt+0x156>
 80083ac:	1c6b      	adds	r3, r5, #1
 80083ae:	f023 0501 	bic.w	r5, r3, #1
 80083b2:	e7de      	b.n	8008372 <__ieee754_sqrt+0x156>
 80083b4:	7ff00000 	.word	0x7ff00000
 80083b8:	08008838 	.word	0x08008838
 80083bc:	08008830 	.word	0x08008830

080083c0 <_init>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr

080083cc <_fini>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr
