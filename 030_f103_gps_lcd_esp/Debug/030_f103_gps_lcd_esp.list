
030_f103_gps_lcd_esp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08008688  08008688  00009688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba0  08008ba0  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba0  08008ba0  00009ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba8  08008ba8  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bac  08008bac  00009bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008bb0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200001dc  08008d8c  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000de0  08008d8c  0000ade0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c110  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bf  00000000  00000000  00016315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  000184d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000880  00000000  00000000  00018fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018968  00000000  00000000  00019830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e992  00000000  00000000  00032198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870a5  00000000  00000000  00040b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7bcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  000c7c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cbcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008670 	.word	0x08008670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08008670 	.word	0x08008670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b098      	sub	sp, #96	@ 0x60
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	char data[80];

//	Ringbuf_init();

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8000d9a:	4929      	ldr	r1, [pc, #164]	@ (8000e40 <ESP_Init+0xb0>)
 8000d9c:	4829      	ldr	r0, [pc, #164]	@ (8000e44 <ESP_Init+0xb4>)
 8000d9e:	f001 f9a3 	bl	80020e8 <Uart_sendstring>
//	Uart_sendstring("RESETTING.", pc_uart);
	for (int i=0; i<5; i++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000da6:	e00c      	b.n	8000dc2 <ESP_Init+0x32>
	{
//		Uart_sendstring(".", pc_uart);
		for(int j=0;j<1160*4*1000;j++);
 8000da8:	2300      	movs	r3, #0
 8000daa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000dac:	e002      	b.n	8000db4 <ESP_Init+0x24>
 8000dae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000db0:	3301      	adds	r3, #1
 8000db2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000db6:	4a24      	ldr	r2, [pc, #144]	@ (8000e48 <ESP_Init+0xb8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	dbf8      	blt.n	8000dae <ESP_Init+0x1e>
	for (int i=0; i<5; i++)
 8000dbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	ddef      	ble.n	8000da8 <ESP_Init+0x18>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8000dc8:	481d      	ldr	r0, [pc, #116]	@ (8000e40 <ESP_Init+0xb0>)
 8000dca:	f001 f807 	bl	8001ddc <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 8000dce:	491c      	ldr	r1, [pc, #112]	@ (8000e40 <ESP_Init+0xb0>)
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <ESP_Init+0xbc>)
 8000dd2:	f001 f989 	bl	80020e8 <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 8000dd6:	bf00      	nop
 8000dd8:	4919      	ldr	r1, [pc, #100]	@ (8000e40 <ESP_Init+0xb0>)
 8000dda:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <ESP_Init+0xc0>)
 8000ddc:	f001 fa46 	bl	800226c <Wait_for>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f8      	beq.n	8000dd8 <ESP_Init+0x48>
//	Uart_sendstring("AT---->OK\n\n", pc_uart);


	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 8000de6:	4816      	ldr	r0, [pc, #88]	@ (8000e40 <ESP_Init+0xb0>)
 8000de8:	f000 fff8 	bl	8001ddc <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000dec:	4914      	ldr	r1, [pc, #80]	@ (8000e40 <ESP_Init+0xb0>)
 8000dee:	4819      	ldr	r0, [pc, #100]	@ (8000e54 <ESP_Init+0xc4>)
 8000df0:	f001 f97a 	bl	80020e8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000df4:	bf00      	nop
 8000df6:	4912      	ldr	r1, [pc, #72]	@ (8000e40 <ESP_Init+0xb0>)
 8000df8:	4815      	ldr	r0, [pc, #84]	@ (8000e50 <ESP_Init+0xc0>)
 8000dfa:	f001 fa37 	bl	800226c <Wait_for>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f8      	beq.n	8000df6 <ESP_Init+0x66>
//	Uart_sendstring("CW MODE---->1\n\n", pc_uart);


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush(wifi_uart);
 8000e04:	480e      	ldr	r0, [pc, #56]	@ (8000e40 <ESP_Init+0xb0>)
 8000e06:	f000 ffe9 	bl	8001ddc <Uart_flush>
//	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000e0a:	f107 0008 	add.w	r0, r7, #8
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4911      	ldr	r1, [pc, #68]	@ (8000e58 <ESP_Init+0xc8>)
 8000e14:	f004 fbd4 	bl	80055c0 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <ESP_Init+0xb0>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f962 	bl	80020e8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000e24:	bf00      	nop
 8000e26:	4906      	ldr	r1, [pc, #24]	@ (8000e40 <ESP_Init+0xb0>)
 8000e28:	4809      	ldr	r0, [pc, #36]	@ (8000e50 <ESP_Init+0xc0>)
 8000e2a:	f001 fa1f 	bl	800226c <Wait_for>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f8      	beq.n	8000e26 <ESP_Init+0x96>
//	while (!(Wait_for("OK\r\n", wifi_uart)));
//	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);

//	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);

}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3760      	adds	r7, #96	@ 0x60
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000ae4 	.word	0x20000ae4
 8000e44:	08008688 	.word	0x08008688
 8000e48:	0046cd00 	.word	0x0046cd00
 8000e4c:	08008694 	.word	0x08008694
 8000e50:	0800869c 	.word	0x0800869c
 8000e54:	080086a4 	.word	0x080086a4
 8000e58:	080086b4 	.word	0x080086b4

08000e5c <bufclr>:

void bufclr(char *buf) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	int len = strlen(buf);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff f973 	bl	8000150 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < len; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	e007      	b.n	8000e84 <bufclr+0x28>
		buf[i] = '\0';
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf3      	blt.n	8000e74 <bufclr+0x18>
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <ESP_Send_Multi>:

void ESP_Send_Multi(char *APIkey, int numberoffileds, float value[]) {
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	f5ad 7d41 	sub.w	sp, sp, #772	@ 0x304
 8000e9e:	af02      	add	r7, sp, #8
 8000ea0:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000ea4:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000ea8:	6018      	str	r0, [r3, #0]
 8000eaa:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000eae:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8000eb2:	6019      	str	r1, [r3, #0]
 8000eb4:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000eb8:	f5a3 733d 	sub.w	r3, r3, #756	@ 0x2f4
 8000ebc:	601a      	str	r2, [r3, #0]
	char local_buf[500] = { 0 };
 8000ebe:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f004 fbdb 	bl	800568a <memset>
	char local_buf2[30] = { 0 };
 8000ed4:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000ed8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000edc:	4618      	mov	r0, r3
 8000ede:	231e      	movs	r3, #30
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f004 fbd1 	bl	800568a <memset>
	char field_buf[200] = { 0 };
 8000ee8:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000eec:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	23c8      	movs	r3, #200	@ 0xc8
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f004 fbc7 	bl	800568a <memset>

	Uart_flush(wifi_uart);
 8000efc:	484f      	ldr	r0, [pc, #316]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000efe:	f000 ff6d 	bl	8001ddc <Uart_flush>
	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n", wifi_uart);
 8000f02:	494e      	ldr	r1, [pc, #312]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000f04:	484e      	ldr	r0, [pc, #312]	@ (8001040 <ESP_Send_Multi+0x1a8>)
 8000f06:	f001 f8ef 	bl	80020e8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)))
 8000f0a:	bf00      	nop
 8000f0c:	494b      	ldr	r1, [pc, #300]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000f0e:	484d      	ldr	r0, [pc, #308]	@ (8001044 <ESP_Send_Multi+0x1ac>)
 8000f10:	f001 f9ac 	bl	800226c <Wait_for>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f8      	beq.n	8000f0c <ESP_Send_Multi+0x74>
		;

	sprintf(local_buf, "GET /update?api_key=%s", APIkey);
 8000f1a:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000f1e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8000f22:	f107 00fc 	add.w	r0, r7, #252	@ 0xfc
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4947      	ldr	r1, [pc, #284]	@ (8001048 <ESP_Send_Multi+0x1b0>)
 8000f2a:	f004 fb49 	bl	80055c0 <siprintf>
	for (int i = 0; i < numberoffileds; i++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8000f34:	e026      	b.n	8000f84 <ESP_Send_Multi+0xec>
		sprintf(field_buf, "&field%d=%.6f", i + 1, value[i]);
 8000f36:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000f3a:	1c5c      	adds	r4, r3, #1
 8000f3c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	f507 723e 	add.w	r2, r7, #760	@ 0x2f8
 8000f46:	f5a2 723d 	sub.w	r2, r2, #756	@ 0x2f4
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fa69 	bl	8000428 <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	f107 0014 	add.w	r0, r7, #20
 8000f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f62:	4622      	mov	r2, r4
 8000f64:	4939      	ldr	r1, [pc, #228]	@ (800104c <ESP_Send_Multi+0x1b4>)
 8000f66:	f004 fb2b 	bl	80055c0 <siprintf>
		strcat(local_buf, field_buf);
 8000f6a:	f107 0214 	add.w	r2, r7, #20
 8000f6e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 fb90 	bl	800569a <strcat>
	for (int i = 0; i < numberoffileds; i++) {
 8000f7a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8000f84:	f507 733e 	add.w	r3, r7, #760	@ 0x2f8
 8000f88:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 8000f8c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbcf      	blt.n	8000f36 <ESP_Send_Multi+0x9e>
	}
	strcat(local_buf, "\r\n");
 8000f96:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f8d8 	bl	8000150 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <ESP_Send_Multi+0x1b8>)
 8000fac:	8811      	ldrh	r1, [r2, #0]
 8000fae:	7892      	ldrb	r2, [r2, #2]
 8000fb0:	8019      	strh	r1, [r3, #0]
 8000fb2:	709a      	strb	r2, [r3, #2]

	int len = strlen(local_buf);
 8000fb4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff f8c9 	bl	8000150 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
	sprintf(local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000fc4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc8:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8000fcc:	4921      	ldr	r1, [pc, #132]	@ (8001054 <ESP_Send_Multi+0x1bc>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 faf6 	bl	80055c0 <siprintf>
	Uart_sendstring(local_buf2,wifi_uart);
 8000fd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fd8:	4918      	ldr	r1, [pc, #96]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 f884 	bl	80020e8 <Uart_sendstring>
	while (!(Wait_for(">",wifi_uart)))
 8000fe0:	bf00      	nop
 8000fe2:	4916      	ldr	r1, [pc, #88]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000fe4:	481c      	ldr	r0, [pc, #112]	@ (8001058 <ESP_Send_Multi+0x1c0>)
 8000fe6:	f001 f941 	bl	800226c <Wait_for>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f8      	beq.n	8000fe2 <ESP_Send_Multi+0x14a>
		;

	Uart_sendstring(local_buf,wifi_uart);
 8000ff0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000ff4:	4911      	ldr	r1, [pc, #68]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 f876 	bl	80020e8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n",wifi_uart)))
 8000ffc:	bf00      	nop
 8000ffe:	490f      	ldr	r1, [pc, #60]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8001000:	4816      	ldr	r0, [pc, #88]	@ (800105c <ESP_Send_Multi+0x1c4>)
 8001002:	f001 f933 	bl	800226c <Wait_for>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f8      	beq.n	8000ffe <ESP_Send_Multi+0x166>
		;

	while (!(Wait_for("CLOSED",wifi_uart)))
 800100c:	bf00      	nop
 800100e:	490b      	ldr	r1, [pc, #44]	@ (800103c <ESP_Send_Multi+0x1a4>)
 8001010:	4813      	ldr	r0, [pc, #76]	@ (8001060 <ESP_Send_Multi+0x1c8>)
 8001012:	f001 f92b 	bl	800226c <Wait_for>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f8      	beq.n	800100e <ESP_Send_Multi+0x176>
		;

	bufclr(local_buf);
 800101c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff1b 	bl	8000e5c <bufclr>
	bufclr(local_buf2);
 8001026:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff16 	bl	8000e5c <bufclr>

//	Ringbuf_init();

}
 8001030:	bf00      	nop
 8001032:	f507 773f 	add.w	r7, r7, #764	@ 0x2fc
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	20000ae4 	.word	0x20000ae4
 8001040:	080086cc 	.word	0x080086cc
 8001044:	0800869c 	.word	0x0800869c
 8001048:	080086f8 	.word	0x080086f8
 800104c:	08008710 	.word	0x08008710
 8001050:	08008720 	.word	0x08008720
 8001054:	08008724 	.word	0x08008724
 8001058:	08008734 	.word	0x08008734
 800105c:	08008738 	.word	0x08008738
 8001060:	08008744 	.word	0x08008744
 8001064:	00000000 	.word	0x00000000

08001068 <decodeGGA>:
 @GGASTRUCT is the pointer to the GGA Structure (in the GPS Structure)
 @Returns 0 on success
 @ returns 1, 2 depending on where the return statement is excuted, check function for more details
 */

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga) {
 8001068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800106c:	b08c      	sub	sp, #48	@ 0x30
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001074:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <decodeGGA+0x17c>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 800107e:	e004      	b.n	800108a <decodeGGA+0x22>
		inx++;  // 1st ','
 8001080:	4b58      	ldr	r3, [pc, #352]	@ (80011e4 <decodeGGA+0x17c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a57      	ldr	r2, [pc, #348]	@ (80011e4 <decodeGGA+0x17c>)
 8001088:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800108a:	4b56      	ldr	r3, [pc, #344]	@ (80011e4 <decodeGGA+0x17c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b2c      	cmp	r3, #44	@ 0x2c
 8001098:	d1f2      	bne.n	8001080 <decodeGGA+0x18>
	inx++;
 800109a:	4b52      	ldr	r3, [pc, #328]	@ (80011e4 <decodeGGA+0x17c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a50      	ldr	r2, [pc, #320]	@ (80011e4 <decodeGGA+0x17c>)
 80010a2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010a4:	e004      	b.n	80010b0 <decodeGGA+0x48>
		inx++;  // After time ','
 80010a6:	4b4f      	ldr	r3, [pc, #316]	@ (80011e4 <decodeGGA+0x17c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a4d      	ldr	r2, [pc, #308]	@ (80011e4 <decodeGGA+0x17c>)
 80010ae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010b0:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <decodeGGA+0x17c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80010be:	d1f2      	bne.n	80010a6 <decodeGGA+0x3e>
	inx++;
 80010c0:	4b48      	ldr	r3, [pc, #288]	@ (80011e4 <decodeGGA+0x17c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	4a47      	ldr	r2, [pc, #284]	@ (80011e4 <decodeGGA+0x17c>)
 80010c8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010ca:	e004      	b.n	80010d6 <decodeGGA+0x6e>
		inx++;  // after latitude ','
 80010cc:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <decodeGGA+0x17c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a44      	ldr	r2, [pc, #272]	@ (80011e4 <decodeGGA+0x17c>)
 80010d4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010d6:	4b43      	ldr	r3, [pc, #268]	@ (80011e4 <decodeGGA+0x17c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80010e4:	d1f2      	bne.n	80010cc <decodeGGA+0x64>
	inx++;
 80010e6:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <decodeGGA+0x17c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a3d      	ldr	r2, [pc, #244]	@ (80011e4 <decodeGGA+0x17c>)
 80010ee:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010f0:	e004      	b.n	80010fc <decodeGGA+0x94>
		inx++;  // after NS ','
 80010f2:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <decodeGGA+0x17c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a3a      	ldr	r2, [pc, #232]	@ (80011e4 <decodeGGA+0x17c>)
 80010fa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <decodeGGA+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b2c      	cmp	r3, #44	@ 0x2c
 800110a:	d1f2      	bne.n	80010f2 <decodeGGA+0x8a>
	inx++;
 800110c:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <decodeGGA+0x17c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a34      	ldr	r2, [pc, #208]	@ (80011e4 <decodeGGA+0x17c>)
 8001114:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001116:	e004      	b.n	8001122 <decodeGGA+0xba>
		inx++;  // after longitude ','
 8001118:	4b32      	ldr	r3, [pc, #200]	@ (80011e4 <decodeGGA+0x17c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a31      	ldr	r2, [pc, #196]	@ (80011e4 <decodeGGA+0x17c>)
 8001120:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001122:	4b30      	ldr	r3, [pc, #192]	@ (80011e4 <decodeGGA+0x17c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001130:	d1f2      	bne.n	8001118 <decodeGGA+0xb0>
	inx++;
 8001132:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <decodeGGA+0x17c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	4a2a      	ldr	r2, [pc, #168]	@ (80011e4 <decodeGGA+0x17c>)
 800113a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800113c:	e004      	b.n	8001148 <decodeGGA+0xe0>
		inx++;  // after EW ','
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <decodeGGA+0x17c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a27      	ldr	r2, [pc, #156]	@ (80011e4 <decodeGGA+0x17c>)
 8001146:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <decodeGGA+0x17c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b2c      	cmp	r3, #44	@ 0x2c
 8001156:	d1f2      	bne.n	800113e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <decodeGGA+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <decodeGGA+0x17c>)
 8001160:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2')
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <decodeGGA+0x17c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b31      	cmp	r3, #49	@ 0x31
 8001170:	d00f      	beq.n	8001192 <decodeGGA+0x12a>
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <decodeGGA+0x17c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b32      	cmp	r3, #50	@ 0x32
 8001180:	d007      	beq.n	8001192 <decodeGGA+0x12a>
			|| (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <decodeGGA+0x17c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b36      	cmp	r3, #54	@ 0x36
 8001190:	d106      	bne.n	80011a0 <decodeGGA+0x138>
			{
		gga->isfixValid = 1;   // fix available
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2201      	movs	r2, #1
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
		inx = 0; // reset the index. We will start from the inx=0 and extract information now
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <decodeGGA+0x17c>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
	} else {
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',')
 800119e:	e009      	b.n	80011b4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
		return 1;  // return error
 80011a6:	2301      	movs	r3, #1
 80011a8:	e368      	b.n	800187c <decodeGGA+0x814>
		inx++;  // 1st ','
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <decodeGGA+0x17c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <decodeGGA+0x17c>)
 80011b2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <decodeGGA+0x17c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b2c      	cmp	r3, #44	@ 0x2c
 80011c2:	d1f2      	bne.n	80011aa <decodeGGA+0x142>

	/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)
	inx++;   // reach the first number in time
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <decodeGGA+0x17c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <decodeGGA+0x17c>)
 80011cc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	220c      	movs	r2, #12
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fa57 	bl	800568a <memset>
	i = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80011e0:	e016      	b.n	8001210 <decodeGGA+0x1a8>
 80011e2:	bf00      	nop
 80011e4:	200001f8 	.word	0x200001f8
	{
		buffer[i] = GGAbuffer[inx];
 80011e8:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <decodeGGA+0x338>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	7819      	ldrb	r1, [r3, #0]
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
		i++;
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001206:	4b66      	ldr	r3, [pc, #408]	@ (80013a0 <decodeGGA+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a64      	ldr	r2, [pc, #400]	@ (80013a0 <decodeGGA+0x338>)
 800120e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001210:	4b63      	ldr	r3, [pc, #396]	@ (80013a0 <decodeGGA+0x338>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b2c      	cmp	r3, #44	@ 0x2c
 800121e:	d1e3      	bne.n	80011e8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer) / 10000) + GMT / 100; // get the hours from the 6 digit number
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fc27 	bl	8004a78 <atoi>
 800122a:	4603      	mov	r3, r0
 800122c:	4a5d      	ldr	r2, [pc, #372]	@ (80013a4 <decodeGGA+0x33c>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1312      	asrs	r2, r2, #12
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	4b5b      	ldr	r3, [pc, #364]	@ (80013a8 <decodeGGA+0x340>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	495b      	ldr	r1, [pc, #364]	@ (80013ac <decodeGGA+0x344>)
 800123e:	fb81 0103 	smull	r0, r1, r1, r3
 8001242:	1149      	asrs	r1, r1, #5
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	4413      	add	r3, r2
 800124a:	4a59      	ldr	r2, [pc, #356]	@ (80013b0 <decodeGGA+0x348>)
 800124c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer) / 100) % 100) + GMT % 100; // get the minutes from the 6 digit number
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fc10 	bl	8004a78 <atoi>
 8001258:	4603      	mov	r3, r0
 800125a:	4a54      	ldr	r2, [pc, #336]	@ (80013ac <decodeGGA+0x344>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1152      	asrs	r2, r2, #5
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	4a51      	ldr	r2, [pc, #324]	@ (80013ac <decodeGGA+0x344>)
 8001268:	fb82 1203 	smull	r1, r2, r2, r3
 800126c:	1151      	asrs	r1, r2, #5
 800126e:	17da      	asrs	r2, r3, #31
 8001270:	1a8a      	subs	r2, r1, r2
 8001272:	2164      	movs	r1, #100	@ 0x64
 8001274:	fb01 f202 	mul.w	r2, r1, r2
 8001278:	1a9a      	subs	r2, r3, r2
 800127a:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <decodeGGA+0x340>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <decodeGGA+0x344>)
 8001280:	fb83 0301 	smull	r0, r3, r3, r1
 8001284:	1158      	asrs	r0, r3, #5
 8001286:	17cb      	asrs	r3, r1, #31
 8001288:	1ac3      	subs	r3, r0, r3
 800128a:	2064      	movs	r0, #100	@ 0x64
 800128c:	fb00 f303 	mul.w	r3, r0, r3
 8001290:	1acb      	subs	r3, r1, r3
 8001292:	4413      	add	r3, r2
 8001294:	4a47      	ldr	r2, [pc, #284]	@ (80013b4 <decodeGGA+0x34c>)
 8001296:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) {
 8001298:	4b46      	ldr	r3, [pc, #280]	@ (80013b4 <decodeGGA+0x34c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b3b      	cmp	r3, #59	@ 0x3b
 800129e:	dd09      	ble.n	80012b4 <decodeGGA+0x24c>
		min = min - 60;
 80012a0:	4b44      	ldr	r3, [pc, #272]	@ (80013b4 <decodeGGA+0x34c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b3c      	subs	r3, #60	@ 0x3c
 80012a6:	4a43      	ldr	r2, [pc, #268]	@ (80013b4 <decodeGGA+0x34c>)
 80012a8:	6013      	str	r3, [r2, #0]
		hr++;
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <decodeGGA+0x348>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a3f      	ldr	r2, [pc, #252]	@ (80013b0 <decodeGGA+0x348>)
 80012b2:	6013      	str	r3, [r2, #0]
	}
	if (hr < 0) {
 80012b4:	4b3e      	ldr	r3, [pc, #248]	@ (80013b0 <decodeGGA+0x348>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da09      	bge.n	80012d0 <decodeGGA+0x268>
		hr = 24 + hr;
 80012bc:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <decodeGGA+0x348>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3318      	adds	r3, #24
 80012c2:	4a3b      	ldr	r2, [pc, #236]	@ (80013b0 <decodeGGA+0x348>)
 80012c4:	6013      	str	r3, [r2, #0]
		daychange--;
 80012c6:	4b3c      	ldr	r3, [pc, #240]	@ (80013b8 <decodeGGA+0x350>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a3a      	ldr	r2, [pc, #232]	@ (80013b8 <decodeGGA+0x350>)
 80012ce:	6013      	str	r3, [r2, #0]
	}
	if (hr >= 24) {
 80012d0:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <decodeGGA+0x348>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b17      	cmp	r3, #23
 80012d6:	dd09      	ble.n	80012ec <decodeGGA+0x284>
		hr = hr - 24;
 80012d8:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <decodeGGA+0x348>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3b18      	subs	r3, #24
 80012de:	4a34      	ldr	r2, [pc, #208]	@ (80013b0 <decodeGGA+0x348>)
 80012e0:	6013      	str	r3, [r2, #0]
		daychange++;
 80012e2:	4b35      	ldr	r3, [pc, #212]	@ (80013b8 <decodeGGA+0x350>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a33      	ldr	r2, [pc, #204]	@ (80013b8 <decodeGGA+0x350>)
 80012ea:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <decodeGGA+0x348>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	619a      	str	r2, [r3, #24]
	gga->tim.min = min;
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <decodeGGA+0x34c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	61da      	str	r2, [r3, #28]
	gga->tim.sec = atoi(buffer) % 100;
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fbb9 	bl	8004a78 <atoi>
 8001306:	4602      	mov	r2, r0
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <decodeGGA+0x344>)
 800130a:	fb83 1302 	smull	r1, r3, r3, r2
 800130e:	1159      	asrs	r1, r3, #5
 8001310:	17d3      	asrs	r3, r2, #31
 8001312:	1acb      	subs	r3, r1, r3
 8001314:	2164      	movs	r1, #100	@ 0x64
 8001316:	fb01 f303 	mul.w	r3, r1, r3
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	6213      	str	r3, [r2, #32]

	/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <decodeGGA+0x338>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a1e      	ldr	r2, [pc, #120]	@ (80013a0 <decodeGGA+0x338>)
 8001328:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	220c      	movs	r2, #12
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f004 f9a9 	bl	800568a <memset>
	i = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 800133c:	e013      	b.n	8001366 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800133e:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <decodeGGA+0x338>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	7819      	ldrb	r1, [r3, #0]
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001350:	4413      	add	r3, r2
 8001352:	460a      	mov	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
		i++;
 8001356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001358:	3301      	adds	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <decodeGGA+0x338>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <decodeGGA+0x338>)
 8001364:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after lattitude ','
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <decodeGGA+0x338>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b2c      	cmp	r3, #44	@ 0x2c
 8001374:	d1e3      	bne.n	800133e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6)
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe fee8 	bl	8000150 <strlen>
 8001380:	4603      	mov	r3, r0
 8001382:	2b05      	cmp	r3, #5
 8001384:	d801      	bhi.n	800138a <decodeGGA+0x322>
		return 2;  // If the buffer length is not appropriate, return error
 8001386:	2302      	movs	r3, #2
 8001388:	e278      	b.n	800187c <decodeGGA+0x814>
	int16_t num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fb72 	bl	8004a78 <atoi>
 8001394:	4603      	mov	r3, r0
 8001396:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 800139c:	e011      	b.n	80013c2 <decodeGGA+0x35a>
 800139e:	bf00      	nop
 80013a0:	200001f8 	.word	0x200001f8
 80013a4:	68db8bad 	.word	0x68db8bad
 80013a8:	20000000 	.word	0x20000000
 80013ac:	51eb851f 	.word	0x51eb851f
 80013b0:	200001fc 	.word	0x200001fc
 80013b4:	20000200 	.word	0x20000200
 80013b8:	20000210 	.word	0x20000210
		j++;   // Figure out how many digits before the decimal
 80013bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013be:	3301      	adds	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 80013c2:	f107 020c 	add.w	r2, r7, #12
 80013c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80013ce:	d1f5      	bne.n	80013bc <decodeGGA+0x354>
	j++;
 80013d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d2:	3301      	adds	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4618      	mov	r0, r3
 80013dc:	f7fe feb8 	bl	8000150 <strlen>
 80013e0:	4602      	mov	r2, r0
 80013e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	623b      	str	r3, [r7, #32]
	int dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80013e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	4413      	add	r3, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fb41 	bl	8004a78 <atoi>
 80013f6:	61f8      	str	r0, [r7, #28]
	float lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80013f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f801 	bl	8000404 <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b5a      	ldr	r3, [pc, #360]	@ (8001570 <decodeGGA+0x508>)
 8001408:	f7ff f990 	bl	800072c <__aeabi_ddiv>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4690      	mov	r8, r2
 8001412:	4699      	mov	r9, r3
 8001414:	69f8      	ldr	r0, [r7, #28]
 8001416:	f7fe fff5 	bl	8000404 <__aeabi_i2d>
 800141a:	4604      	mov	r4, r0
 800141c:	460d      	mov	r5, r1
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	3302      	adds	r3, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f7fe ffee 	bl	8000404 <__aeabi_i2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	f04f 0000 	mov.w	r0, #0
 8001430:	4950      	ldr	r1, [pc, #320]	@ (8001574 <decodeGGA+0x50c>)
 8001432:	f006 fa11 	bl	8007858 <pow>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f975 	bl	800072c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4640      	mov	r0, r8
 8001448:	4649      	mov	r1, r9
 800144a:	f7fe fe8f 	bl	800016c <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb17 	bl	8000a88 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]
	// Turn 'lat' dd.mmmm format into 'test1' dd.dddd format
	gga->lcation.test1 = 0; // Reset
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
	gga->lcation.test1 += (int) (lat / 1.0); // Plus the degree
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685c      	ldr	r4, [r3, #4]
 800146a:	69b8      	ldr	r0, [r7, #24]
 800146c:	f7ff fc6a 	bl	8000d44 <__aeabi_f2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc12 	bl	8000c9c <__aeabi_i2f>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fb59 	bl	8000b34 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	605a      	str	r2, [r3, #4]
	gga->lcation.test1 += (lat - gga->lcation.test1) / 0.6; // Plus the decimal
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ffca 	bl	8000428 <__aeabi_f2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4619      	mov	r1, r3
 800149e:	69b8      	ldr	r0, [r7, #24]
 80014a0:	f7ff fb46 	bl	8000b30 <__aeabi_fsub>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe ffbe 	bl	8000428 <__aeabi_f2d>
 80014ac:	a32e      	add	r3, pc, #184	@ (adr r3, 8001568 <decodeGGA+0x500>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f93b 	bl	800072c <__aeabi_ddiv>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4620      	mov	r0, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	f7fe fe55 	bl	800016c <__adddf3>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fadd 	bl	8000a88 <__aeabi_d2f>
 80014ce:	4602      	mov	r2, r0
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	605a      	str	r2, [r3, #4]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	601a      	str	r2, [r3, #0]
	inx++;
 80014da:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <decodeGGA+0x510>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <decodeGGA+0x510>)
 80014e2:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <decodeGGA+0x510>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	721a      	strb	r2, [r3, #8]

	/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <decodeGGA+0x510>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001578 <decodeGGA+0x510>)
 80014fc:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <decodeGGA+0x510>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <decodeGGA+0x510>)
 8001506:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	220c      	movs	r2, #12
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f004 f8ba 	bl	800568a <memset>
	i = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 800151a:	e013      	b.n	8001544 <decodeGGA+0x4dc>
	{
		buffer[i] = GGAbuffer[inx];
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <decodeGGA+0x510>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	7819      	ldrb	r1, [r3, #0]
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	4413      	add	r3, r2
 8001530:	460a      	mov	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
		i++;
 8001534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001536:	3301      	adds	r3, #1
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <decodeGGA+0x510>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <decodeGGA+0x510>)
 8001542:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the we reach the after longitude ','
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <decodeGGA+0x510>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b2c      	cmp	r3, #44	@ 0x2c
 8001552:	d1e3      	bne.n	800151c <decodeGGA+0x4b4>
	}
	num = (atoi(buffer)); // change the buffer to the number. It will only convert upto decimal
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fa8d 	bl	8004a78 <atoi>
 800155e:	4603      	mov	r3, r0
 8001560:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 8001566:	e00c      	b.n	8001582 <decodeGGA+0x51a>
 8001568:	33333333 	.word	0x33333333
 800156c:	3fe33333 	.word	0x3fe33333
 8001570:	40590000 	.word	0x40590000
 8001574:	40240000 	.word	0x40240000
 8001578:	200001f8 	.word	0x200001f8
		j++;  // Figure out how many digits before the decimal
 800157c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157e:	3301      	adds	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 8001582:	f107 020c 	add.w	r2, r7, #12
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	4413      	add	r3, r2
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b2e      	cmp	r3, #46	@ 0x2e
 800158e:	d1f5      	bne.n	800157c <decodeGGA+0x514>
	j++;
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	3301      	adds	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer)) - j; // calculate the number of digit after decimal
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fdd8 	bl	8000150 <strlen>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j); // conver the decimal part a a separate number
 80015a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015aa:	f107 020c 	add.w	r2, r7, #12
 80015ae:	4413      	add	r3, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fa61 	bl	8004a78 <atoi>
 80015b6:	61f8      	str	r0, [r7, #28]
	lat = (num / 100.0) + (dec / pow(10, (declen + 2))); // 1234.56789 = 12.3456789
 80015b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff21 	bl	8000404 <__aeabi_i2d>
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4bb2      	ldr	r3, [pc, #712]	@ (8001890 <decodeGGA+0x828>)
 80015c8:	f7ff f8b0 	bl	800072c <__aeabi_ddiv>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4690      	mov	r8, r2
 80015d2:	4699      	mov	r9, r3
 80015d4:	69f8      	ldr	r0, [r7, #28]
 80015d6:	f7fe ff15 	bl	8000404 <__aeabi_i2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	3302      	adds	r3, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff0e 	bl	8000404 <__aeabi_i2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	49a8      	ldr	r1, [pc, #672]	@ (8001894 <decodeGGA+0x82c>)
 80015f2:	f006 f931 	bl	8007858 <pow>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7ff f895 	bl	800072c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe fdaf 	bl	800016c <__adddf3>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fa37 	bl	8000a88 <__aeabi_d2f>
 800161a:	4603      	mov	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]
	// Turn 'lat' dd.mmmm format into 'test2' dd.dddd format
	gga->lcation.test2 = 0; // Reset
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
	gga->lcation.test2 += (int) (lat / 1.0); // Plus the degree
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691c      	ldr	r4, [r3, #16]
 800162a:	69b8      	ldr	r0, [r7, #24]
 800162c:	f7ff fb8a 	bl	8000d44 <__aeabi_f2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb32 	bl	8000c9c <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4619      	mov	r1, r3
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff fa79 	bl	8000b34 <__addsf3>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	611a      	str	r2, [r3, #16]
	gga->lcation.test2 += (lat - gga->lcation.test2) / 0.6; // Plus the decimal
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe feea 	bl	8000428 <__aeabi_f2d>
 8001654:	4604      	mov	r4, r0
 8001656:	460d      	mov	r5, r1
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4619      	mov	r1, r3
 800165e:	69b8      	ldr	r0, [r7, #24]
 8001660:	f7ff fa66 	bl	8000b30 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe fede 	bl	8000428 <__aeabi_f2d>
 800166c:	a386      	add	r3, pc, #536	@ (adr r3, 8001888 <decodeGGA+0x820>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7ff f85b 	bl	800072c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fd75 	bl	800016c <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff f9fd 	bl	8000a88 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	611a      	str	r2, [r3, #16]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	60da      	str	r2, [r3, #12]
	inx++;
 800169a:	4b7f      	ldr	r3, [pc, #508]	@ (8001898 <decodeGGA+0x830>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	4a7d      	ldr	r2, [pc, #500]	@ (8001898 <decodeGGA+0x830>)
 80016a2:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80016a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <decodeGGA+0x830>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	751a      	strb	r2, [r3, #20]

	/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80016b4:	4b78      	ldr	r3, [pc, #480]	@ (8001898 <decodeGGA+0x830>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	4a77      	ldr	r2, [pc, #476]	@ (8001898 <decodeGGA+0x830>)
 80016bc:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80016be:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <decodeGGA+0x830>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	4a74      	ldr	r2, [pc, #464]	@ (8001898 <decodeGGA+0x830>)
 80016c6:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80016c8:	4b73      	ldr	r3, [pc, #460]	@ (8001898 <decodeGGA+0x830>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a72      	ldr	r2, [pc, #456]	@ (8001898 <decodeGGA+0x830>)
 80016d0:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80016d2:	4b71      	ldr	r3, [pc, #452]	@ (8001898 <decodeGGA+0x830>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a6f      	ldr	r2, [pc, #444]	@ (8001898 <decodeGGA+0x830>)
 80016da:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	220c      	movs	r2, #12
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 ffd0 	bl	800568a <memset>
	i = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 80016ee:	e013      	b.n	8001718 <decodeGGA+0x6b0>
	{
		buffer[i] = GGAbuffer[inx];
 80016f0:	4b69      	ldr	r3, [pc, #420]	@ (8001898 <decodeGGA+0x830>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	7819      	ldrb	r1, [r3, #0]
 80016fc:	f107 020c 	add.w	r2, r7, #12
 8001700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
		i++;
 8001708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800170e:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <decodeGGA+0x830>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	4a60      	ldr	r2, [pc, #384]	@ (8001898 <decodeGGA+0x830>)
 8001716:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') // copy upto the ',' after number of satellites
 8001718:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <decodeGGA+0x830>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b2c      	cmp	r3, #44	@ 0x2c
 8001726:	d1e3      	bne.n	80016f0 <decodeGGA+0x688>
	}
	gga->numofsat = atoi(buffer); // convert the buffer to number and save into the structure
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f003 f9a3 	bl	8004a78 <atoi>
 8001732:	4602      	mov	r2, r0
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30

	/***************** skip HDOP  *********************/
	inx++;
 8001738:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <decodeGGA+0x830>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <decodeGGA+0x830>)
 8001740:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 8001742:	e004      	b.n	800174e <decodeGGA+0x6e6>
		inx++;
 8001744:	4b54      	ldr	r3, [pc, #336]	@ (8001898 <decodeGGA+0x830>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a53      	ldr	r2, [pc, #332]	@ (8001898 <decodeGGA+0x830>)
 800174c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800174e:	4b52      	ldr	r3, [pc, #328]	@ (8001898 <decodeGGA+0x830>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b2c      	cmp	r3, #44	@ 0x2c
 800175c:	d1f2      	bne.n	8001744 <decodeGGA+0x6dc>

	/*************** Altitude calculation ********************/
	inx++;
 800175e:	4b4e      	ldr	r3, [pc, #312]	@ (8001898 <decodeGGA+0x830>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a4c      	ldr	r2, [pc, #304]	@ (8001898 <decodeGGA+0x830>)
 8001766:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	220c      	movs	r2, #12
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f003 ff8a 	bl	800568a <memset>
	i = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') {
 800177a:	e013      	b.n	80017a4 <decodeGGA+0x73c>
		buffer[i] = GGAbuffer[inx];
 800177c:	4b46      	ldr	r3, [pc, #280]	@ (8001898 <decodeGGA+0x830>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	7819      	ldrb	r1, [r3, #0]
 8001788:	f107 020c 	add.w	r2, r7, #12
 800178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178e:	4413      	add	r3, r2
 8001790:	460a      	mov	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
		i++;
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	3301      	adds	r3, #1
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 800179a:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <decodeGGA+0x830>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	4a3d      	ldr	r2, [pc, #244]	@ (8001898 <decodeGGA+0x830>)
 80017a2:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') {
 80017a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <decodeGGA+0x830>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b2c      	cmp	r3, #44	@ 0x2c
 80017b2:	d1e3      	bne.n	800177c <decodeGGA+0x714>
	}
	num = (atoi(buffer));
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f95d 	bl	8004a78 <atoi>
 80017be:	4603      	mov	r3, r0
 80017c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 80017c6:	e002      	b.n	80017ce <decodeGGA+0x766>
		j++;
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ca:	3301      	adds	r3, #1
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.')
 80017ce:	f107 020c 	add.w	r2, r7, #12
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80017da:	d1f5      	bne.n	80017c8 <decodeGGA+0x760>
	j++;
 80017dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017de:	3301      	adds	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer)) - j;
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcb2 	bl	8000150 <strlen>
 80017ec:	4602      	mov	r2, r0
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	623b      	str	r3, [r7, #32]
	dec = atoi((char*) buffer + j);
 80017f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	4413      	add	r3, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 f93b 	bl	8004a78 <atoi>
 8001802:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec / pow(10, (declen)));
 8001804:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fdfb 	bl	8000404 <__aeabi_i2d>
 800180e:	4604      	mov	r4, r0
 8001810:	460d      	mov	r5, r1
 8001812:	69f8      	ldr	r0, [r7, #28]
 8001814:	f7fe fdf6 	bl	8000404 <__aeabi_i2d>
 8001818:	4680      	mov	r8, r0
 800181a:	4689      	mov	r9, r1
 800181c:	6a38      	ldr	r0, [r7, #32]
 800181e:	f7fe fdf1 	bl	8000404 <__aeabi_i2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	491a      	ldr	r1, [pc, #104]	@ (8001894 <decodeGGA+0x82c>)
 800182c:	f006 f814 	bl	8007858 <pow>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe ff78 	bl	800072c <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fc92 	bl	800016c <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f91a 	bl	8000a88 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28

	inx++;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <decodeGGA+0x830>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3301      	adds	r3, #1
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <decodeGGA+0x830>)
 8001866:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <decodeGGA+0x830>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	return 0;
 800187a:	2300      	movs	r3, #0

}
 800187c:	4618      	mov	r0, r3
 800187e:	3730      	adds	r7, #48	@ 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001886:	bf00      	nop
 8001888:	33333333 	.word	0x33333333
 800188c:	3fe33333 	.word	0x3fe33333
 8001890:	40590000 	.word	0x40590000
 8001894:	40240000 	.word	0x40240000
 8001898:	200001f8 	.word	0x200001f8

0800189c <decodeRMC>:

int decodeRMC(char *RMCbuffer, RMCSTRUCT *rmc) {
 800189c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018a0:	b090      	sub	sp, #64	@ 0x40
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
	inx = 0;
 80018a8:	4b92      	ldr	r3, [pc, #584]	@ (8001af4 <decodeRMC+0x258>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (RMCbuffer[inx] != ',')
 80018b2:	e004      	b.n	80018be <decodeRMC+0x22>
		inx++;  // 1st ,
 80018b4:	4b8f      	ldr	r3, [pc, #572]	@ (8001af4 <decodeRMC+0x258>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a8e      	ldr	r2, [pc, #568]	@ (8001af4 <decodeRMC+0x258>)
 80018bc:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018be:	4b8d      	ldr	r3, [pc, #564]	@ (8001af4 <decodeRMC+0x258>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b2c      	cmp	r3, #44	@ 0x2c
 80018cc:	d1f2      	bne.n	80018b4 <decodeRMC+0x18>
	inx++;
 80018ce:	4b89      	ldr	r3, [pc, #548]	@ (8001af4 <decodeRMC+0x258>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	4a87      	ldr	r2, [pc, #540]	@ (8001af4 <decodeRMC+0x258>)
 80018d6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018d8:	e004      	b.n	80018e4 <decodeRMC+0x48>
		inx++;  // After time ,
 80018da:	4b86      	ldr	r3, [pc, #536]	@ (8001af4 <decodeRMC+0x258>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a84      	ldr	r2, [pc, #528]	@ (8001af4 <decodeRMC+0x258>)
 80018e2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80018e4:	4b83      	ldr	r3, [pc, #524]	@ (8001af4 <decodeRMC+0x258>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b2c      	cmp	r3, #44	@ 0x2c
 80018f2:	d1f2      	bne.n	80018da <decodeRMC+0x3e>
	inx++;
 80018f4:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <decodeRMC+0x258>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001af4 <decodeRMC+0x258>)
 80018fc:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A') // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80018fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001af4 <decodeRMC+0x258>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b41      	cmp	r3, #65	@ 0x41
 800190c:	d10d      	bne.n	800192a <decodeRMC+0x8e>
			{
		rmc->isValid = 1;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	615a      	str	r2, [r3, #20]
	} else {
		rmc->isValid = 0;
		return 1;
	}
	inx++;
 8001914:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <decodeRMC+0x258>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a76      	ldr	r2, [pc, #472]	@ (8001af4 <decodeRMC+0x258>)
 800191c:	6013      	str	r3, [r2, #0]
	inx++;
 800191e:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <decodeRMC+0x258>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a73      	ldr	r2, [pc, #460]	@ (8001af4 <decodeRMC+0x258>)
 8001926:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001928:	e009      	b.n	800193e <decodeRMC+0xa2>
		rmc->isValid = 0;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
		return 1;
 8001930:	2301      	movs	r3, #1
 8001932:	e1d5      	b.n	8001ce0 <decodeRMC+0x444>
		inx++;  // after latitude,
 8001934:	4b6f      	ldr	r3, [pc, #444]	@ (8001af4 <decodeRMC+0x258>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a6e      	ldr	r2, [pc, #440]	@ (8001af4 <decodeRMC+0x258>)
 800193c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800193e:	4b6d      	ldr	r3, [pc, #436]	@ (8001af4 <decodeRMC+0x258>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b2c      	cmp	r3, #44	@ 0x2c
 800194c:	d1f2      	bne.n	8001934 <decodeRMC+0x98>
	inx++;
 800194e:	4b69      	ldr	r3, [pc, #420]	@ (8001af4 <decodeRMC+0x258>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a67      	ldr	r2, [pc, #412]	@ (8001af4 <decodeRMC+0x258>)
 8001956:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001958:	e004      	b.n	8001964 <decodeRMC+0xc8>
		inx++;  // after NS ,
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <decodeRMC+0x258>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	4a64      	ldr	r2, [pc, #400]	@ (8001af4 <decodeRMC+0x258>)
 8001962:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001964:	4b63      	ldr	r3, [pc, #396]	@ (8001af4 <decodeRMC+0x258>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b2c      	cmp	r3, #44	@ 0x2c
 8001972:	d1f2      	bne.n	800195a <decodeRMC+0xbe>
	inx++;
 8001974:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <decodeRMC+0x258>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a5e      	ldr	r2, [pc, #376]	@ (8001af4 <decodeRMC+0x258>)
 800197c:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800197e:	e004      	b.n	800198a <decodeRMC+0xee>
		inx++;  // after longitude ,
 8001980:	4b5c      	ldr	r3, [pc, #368]	@ (8001af4 <decodeRMC+0x258>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a5b      	ldr	r2, [pc, #364]	@ (8001af4 <decodeRMC+0x258>)
 8001988:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800198a:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <decodeRMC+0x258>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b2c      	cmp	r3, #44	@ 0x2c
 8001998:	d1f2      	bne.n	8001980 <decodeRMC+0xe4>
	inx++;
 800199a:	4b56      	ldr	r3, [pc, #344]	@ (8001af4 <decodeRMC+0x258>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a54      	ldr	r2, [pc, #336]	@ (8001af4 <decodeRMC+0x258>)
 80019a2:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019a4:	e004      	b.n	80019b0 <decodeRMC+0x114>
		inx++;  // after EW ,
 80019a6:	4b53      	ldr	r3, [pc, #332]	@ (8001af4 <decodeRMC+0x258>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	4a51      	ldr	r2, [pc, #324]	@ (8001af4 <decodeRMC+0x258>)
 80019ae:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80019b0:	4b50      	ldr	r3, [pc, #320]	@ (8001af4 <decodeRMC+0x258>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80019be:	d1f2      	bne.n	80019a6 <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80019c0:	4b4c      	ldr	r3, [pc, #304]	@ (8001af4 <decodeRMC+0x258>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a4b      	ldr	r2, [pc, #300]	@ (8001af4 <decodeRMC+0x258>)
 80019c8:	6013      	str	r3, [r2, #0]
	i = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	220c      	movs	r2, #12
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 fe57 	bl	800568a <memset>
	while (RMCbuffer[inx] != ',') {
 80019dc:	e013      	b.n	8001a06 <decodeRMC+0x16a>
		buffer[i] = RMCbuffer[inx];
 80019de:	4b45      	ldr	r3, [pc, #276]	@ (8001af4 <decodeRMC+0x258>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	7819      	ldrb	r1, [r3, #0]
 80019ea:	f107 0208 	add.w	r2, r7, #8
 80019ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f0:	4413      	add	r3, r2
 80019f2:	460a      	mov	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
		i++;
 80019f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019f8:	3301      	adds	r3, #1
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 80019fc:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <decodeRMC+0x258>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	4a3c      	ldr	r2, [pc, #240]	@ (8001af4 <decodeRMC+0x258>)
 8001a04:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <decodeRMC+0x258>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a14:	d1e3      	bne.n	80019de <decodeRMC+0x142>
	}

	if (strlen(buffer) > 0) {          // if the speed have some data
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d055      	beq.n	8001acc <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001a20:	f107 0308 	add.w	r3, r7, #8
 8001a24:	4618      	mov	r0, r3
 8001a26:	f003 f827 	bl	8004a78 <atoi>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	867b      	strh	r3, [r7, #50]	@ 0x32
		int j = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.')
 8001a32:	e002      	b.n	8001a3a <decodeRMC+0x19e>
			j++;   // same as above
 8001a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a36:	3301      	adds	r3, #1
 8001a38:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (buffer[j] != '.')
 8001a3a:	f107 0208 	add.w	r2, r7, #8
 8001a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a46:	d1f5      	bne.n	8001a34 <decodeRMC+0x198>
		j++;
 8001a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
		int declen = (strlen(buffer)) - j;
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fb7c 	bl	8000150 <strlen>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		int dec = atoi((char*) buffer + j);
 8001a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a62:	f107 0208 	add.w	r2, r7, #8
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f805 	bl	8004a78 <atoi>
 8001a6e:	62b8      	str	r0, [r7, #40]	@ 0x28
		float lat = num + (dec / pow(10, (declen)));
 8001a70:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fcc5 	bl	8000404 <__aeabi_i2d>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	460d      	mov	r5, r1
 8001a7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a80:	f7fe fcc0 	bl	8000404 <__aeabi_i2d>
 8001a84:	4680      	mov	r8, r0
 8001a86:	4689      	mov	r9, r1
 8001a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001a8a:	f7fe fcbb 	bl	8000404 <__aeabi_i2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	4918      	ldr	r1, [pc, #96]	@ (8001af8 <decodeRMC+0x25c>)
 8001a98:	f005 fede 	bl	8007858 <pow>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4640      	mov	r0, r8
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	f7fe fe42 	bl	800072c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fb5c 	bl	800016c <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7fe ffe4 	bl	8000a88 <__aeabi_d2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
		rmc->speed = lat;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	e003      	b.n	8001ad4 <decodeRMC+0x238>
	} else
		rmc->speed = 0;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <decodeRMC+0x258>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <decodeRMC+0x258>)
 8001adc:	6013      	str	r3, [r2, #0]
	i = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fdcd 	bl	800568a <memset>
	while (RMCbuffer[inx] != ',') {
 8001af0:	e018      	b.n	8001b24 <decodeRMC+0x288>
 8001af2:	bf00      	nop
 8001af4:	200001f8 	.word	0x200001f8
 8001af8:	40240000 	.word	0x40240000
		buffer[i] = RMCbuffer[inx];
 8001afc:	4b7b      	ldr	r3, [pc, #492]	@ (8001cec <decodeRMC+0x450>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	7819      	ldrb	r1, [r3, #0]
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b0e:	4413      	add	r3, r2
 8001b10:	460a      	mov	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
		i++;
 8001b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b16:	3301      	adds	r3, #1
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001b1a:	4b74      	ldr	r3, [pc, #464]	@ (8001cec <decodeRMC+0x450>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a72      	ldr	r2, [pc, #456]	@ (8001cec <decodeRMC+0x450>)
 8001b22:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001b24:	4b71      	ldr	r3, [pc, #452]	@ (8001cec <decodeRMC+0x450>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b2c      	cmp	r3, #44	@ 0x2c
 8001b32:	d1e3      	bne.n	8001afc <decodeRMC+0x260>
	}

	if (strlen(buffer) > 0) {  // if the course have some data
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d055      	beq.n	8001bea <decodeRMC+0x34e>
		int16_t num = (atoi(buffer)); // convert the course data into the number
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff98 	bl	8004a78 <atoi>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	847b      	strh	r3, [r7, #34]	@ 0x22
		int j = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.')
 8001b50:	e002      	b.n	8001b58 <decodeRMC+0x2bc>
			j++;   // same as above
 8001b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b54:	3301      	adds	r3, #1
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
		while (buffer[j] != '.')
 8001b58:	f107 0208 	add.w	r2, r7, #8
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b64:	d1f5      	bne.n	8001b52 <decodeRMC+0x2b6>
		j++;
 8001b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b68:	3301      	adds	r3, #1
 8001b6a:	637b      	str	r3, [r7, #52]	@ 0x34
		int declen = (strlen(buffer)) - j;
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe faed 	bl	8000150 <strlen>
 8001b76:	4602      	mov	r2, r0
 8001b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	61fb      	str	r3, [r7, #28]
		int dec = atoi((char*) buffer + j);
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	f107 0208 	add.w	r2, r7, #8
 8001b84:	4413      	add	r3, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 ff76 	bl	8004a78 <atoi>
 8001b8c:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec / pow(10, (declen)));
 8001b8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc36 	bl	8000404 <__aeabi_i2d>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
 8001b9c:	69b8      	ldr	r0, [r7, #24]
 8001b9e:	f7fe fc31 	bl	8000404 <__aeabi_i2d>
 8001ba2:	4680      	mov	r8, r0
 8001ba4:	4689      	mov	r9, r1
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f7fe fc2c 	bl	8000404 <__aeabi_i2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	494e      	ldr	r1, [pc, #312]	@ (8001cf0 <decodeRMC+0x454>)
 8001bb6:	f005 fe4f 	bl	8007858 <pow>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4640      	mov	r0, r8
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	f7fe fdb3 	bl	800072c <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4620      	mov	r0, r4
 8001bcc:	4629      	mov	r1, r5
 8001bce:	f7fe facd 	bl	800016c <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7fe ff55 	bl	8000a88 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	e003      	b.n	8001bf2 <decodeRMC+0x356>
	} else {
		rmc->course = 0;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
	}

	// Get Date
	inx++;
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <decodeRMC+0x450>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8001cec <decodeRMC+0x450>)
 8001bfa:	6013      	str	r3, [r2, #0]
	i = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	memset(buffer, '\0', 12);
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	220c      	movs	r2, #12
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fd3e 	bl	800568a <memset>
	while (RMCbuffer[inx] != ',') {
 8001c0e:	e013      	b.n	8001c38 <decodeRMC+0x39c>
		buffer[i] = RMCbuffer[inx];
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <decodeRMC+0x450>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	7819      	ldrb	r1, [r3, #0]
 8001c1c:	f107 0208 	add.w	r2, r7, #8
 8001c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c22:	4413      	add	r3, r2
 8001c24:	460a      	mov	r2, r1
 8001c26:	701a      	strb	r2, [r3, #0]
		i++;
 8001c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		inx++;
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cec <decodeRMC+0x450>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a2d      	ldr	r2, [pc, #180]	@ (8001cec <decodeRMC+0x450>)
 8001c36:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') {
 8001c38:	4b2c      	ldr	r3, [pc, #176]	@ (8001cec <decodeRMC+0x450>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b2c      	cmp	r3, #44	@ 0x2c
 8001c46:	d1e3      	bne.n	8001c10 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer) / 10000;  // extract 28
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 ff13 	bl	8004a78 <atoi>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <decodeRMC+0x458>)
 8001c56:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5a:	1312      	asrs	r2, r2, #12
 8001c5c:	17db      	asrs	r3, r3, #31
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a25      	ldr	r2, [pc, #148]	@ (8001cf8 <decodeRMC+0x45c>)
 8001c62:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer) / 100) % 100;  // extract 02
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 ff05 	bl	8004a78 <atoi>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <decodeRMC+0x460>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	1152      	asrs	r2, r2, #5
 8001c78:	17db      	asrs	r3, r3, #31
 8001c7a:	1ad2      	subs	r2, r2, r3
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <decodeRMC+0x460>)
 8001c7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c82:	1159      	asrs	r1, r3, #5
 8001c84:	17d3      	asrs	r3, r2, #31
 8001c86:	1acb      	subs	r3, r1, r3
 8001c88:	2164      	movs	r1, #100	@ 0x64
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4a1b      	ldr	r2, [pc, #108]	@ (8001d00 <decodeRMC+0x464>)
 8001c92:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer) % 100;  // extract 22
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 feed 	bl	8004a78 <atoi>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <decodeRMC+0x460>)
 8001ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca6:	1159      	asrs	r1, r3, #5
 8001ca8:	17d3      	asrs	r3, r2, #31
 8001caa:	1acb      	subs	r3, r1, r3
 8001cac:	2164      	movs	r1, #100	@ 0x64
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <decodeRMC+0x468>)
 8001cb6:	6013      	str	r3, [r2, #0]

	day = day + daychange;   // correction due to GMT shift
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <decodeRMC+0x45c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <decodeRMC+0x46c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf8 <decodeRMC+0x45c>)
 8001cc4:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <decodeRMC+0x45c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <decodeRMC+0x464>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <decodeRMC+0x468>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	609a      	str	r2, [r3, #8]

	return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3740      	adds	r7, #64	@ 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cea:	bf00      	nop
 8001cec:	200001f8 	.word	0x200001f8
 8001cf0:	40240000 	.word	0x40240000
 8001cf4:	68db8bad 	.word	0x68db8bad
 8001cf8:	20000204 	.word	0x20000204
 8001cfc:	51eb851f 	.word	0x51eb851f
 8001d00:	20000208 	.word	0x20000208
 8001d04:	2000020c 	.word	0x2000020c
 8001d08:	20000210 	.word	0x20000210

08001d0c <Ringbuf_init>:
ring_buffer *_rx_buffer2;
ring_buffer *_tx_buffer2;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	_rx_buffer1 = &rx_buffer1;
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <Ringbuf_init+0x64>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <Ringbuf_init+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
	_tx_buffer1 = &tx_buffer1;
 8001d16:	4b18      	ldr	r3, [pc, #96]	@ (8001d78 <Ringbuf_init+0x6c>)
 8001d18:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <Ringbuf_init+0x70>)
 8001d1a:	601a      	str	r2, [r3, #0]
	_rx_buffer2 = &rx_buffer2;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <Ringbuf_init+0x74>)
 8001d1e:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <Ringbuf_init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
	_tx_buffer2 = &tx_buffer2;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <Ringbuf_init+0x7c>)
 8001d24:	4a19      	ldr	r2, [pc, #100]	@ (8001d8c <Ringbuf_init+0x80>)
 8001d26:	601a      	str	r2, [r3, #0]

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(gps_uart, UART_IT_ERR);
 8001d28:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <Ringbuf_init+0x84>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <Ringbuf_init+0x84>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	615a      	str	r2, [r3, #20]
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_ERR);
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <Ringbuf_init+0x88>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <Ringbuf_init+0x88>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(gps_uart, UART_IT_RXNE);
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <Ringbuf_init+0x84>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <Ringbuf_init+0x84>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_RXNE);
 8001d58:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <Ringbuf_init+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <Ringbuf_init+0x88>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	60da      	str	r2, [r3, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000a38 	.word	0x20000a38
 8001d74:	20000218 	.word	0x20000218
 8001d78:	20000a3c 	.word	0x20000a3c
 8001d7c:	20000420 	.word	0x20000420
 8001d80:	20000a40 	.word	0x20000a40
 8001d84:	20000628 	.word	0x20000628
 8001d88:	20000a44 	.word	0x20000a44
 8001d8c:	20000830 	.word	0x20000830
 8001d90:	20000a9c 	.word	0x20000a9c
 8001d94:	20000ae4 	.word	0x20000ae4

08001d98 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int) (buffer->head + 1) % UART_BUFFER_SIZE;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db0:	60fb      	str	r3, [r7, #12]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != buffer->tail) {
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d009      	beq.n	8001dd2 <store_char+0x3a>
		buffer->buffer[buffer->head] = c;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	79f9      	ldrb	r1, [r7, #7]
 8001dc8:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <Uart_flush>:
		buffertocopyinto[indx] = buffertocopyfrom[i];
		indx++;
	}
}

void Uart_flush(UART_HandleTypeDef *uart) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <Uart_flush+0x68>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <Uart_flush+0x34>
		memset(_rx_buffer1->buffer, '\0', UART_BUFFER_SIZE);
 8001dec:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <Uart_flush+0x6c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fc47 	bl	800568a <memset>
		_rx_buffer1->head = 0;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <Uart_flush+0x6c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		_rx_buffer1->tail = 0;
 8001e06:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <Uart_flush+0x6c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}
	if (uart == wifi_uart) {
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <Uart_flush+0x70>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <Uart_flush+0x60>
		memset(_rx_buffer2->buffer, '\0', UART_BUFFER_SIZE);
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <Uart_flush+0x74>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fc31 	bl	800568a <memset>
		_rx_buffer2->head = 0;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <Uart_flush+0x74>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
		_rx_buffer2->tail = 0;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <Uart_flush+0x74>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000a9c 	.word	0x20000a9c
 8001e48:	20000a38 	.word	0x20000a38
 8001e4c:	20000ae4 	.word	0x20000ae4
 8001e50:	20000a40 	.word	0x20000a40

08001e54 <Uart_peek>:

int Uart_peek(UART_HandleTypeDef *uart) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <Uart_peek+0x78>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d114      	bne.n	8001e8e <Uart_peek+0x3a>
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <Uart_peek+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <Uart_peek+0x7c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d102      	bne.n	8001e7e <Uart_peek+0x2a>
			return -1;
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	e020      	b.n	8001ec0 <Uart_peek+0x6c>
		} else {
			return _rx_buffer1->buffer[_rx_buffer1->tail];
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <Uart_peek+0x7c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <Uart_peek+0x7c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	e018      	b.n	8001ec0 <Uart_peek+0x6c>
		}
	}
	else if (uart == wifi_uart) {
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a10      	ldr	r2, [pc, #64]	@ (8001ed4 <Uart_peek+0x80>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d114      	bne.n	8001ec0 <Uart_peek+0x6c>
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <Uart_peek+0x84>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <Uart_peek+0x84>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d102      	bne.n	8001eb0 <Uart_peek+0x5c>
			return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	e007      	b.n	8001ec0 <Uart_peek+0x6c>
		} else {
			return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <Uart_peek+0x84>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <Uart_peek+0x84>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	e7ff      	b.n	8001ec0 <Uart_peek+0x6c>
		}
	}
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000a9c 	.word	0x20000a9c
 8001ed0:	20000a38 	.word	0x20000a38
 8001ed4:	20000ae4 	.word	0x20000ae4
 8001ed8:	20000a40 	.word	0x20000a40

08001edc <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart) {
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a28      	ldr	r2, [pc, #160]	@ (8001f88 <Uart_read+0xac>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d121      	bne.n	8001f30 <Uart_read+0x54>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer1->head == _rx_buffer1->tail) {
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <Uart_read+0xb0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <Uart_read+0xb0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d102      	bne.n	8001f06 <Uart_read+0x2a>
			return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	e03a      	b.n	8001f7c <Uart_read+0xa0>
		} else {
			unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <Uart_read+0xb0>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <Uart_read+0xb0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	73bb      	strb	r3, [r7, #14]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001f16:	4b1d      	ldr	r3, [pc, #116]	@ (8001f8c <Uart_read+0xb0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <Uart_read+0xb0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8001f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			return c;
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	e025      	b.n	8001f7c <Uart_read+0xa0>
		}
	}

	else if (uart == wifi_uart) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <Uart_read+0xb4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d121      	bne.n	8001f7c <Uart_read+0xa0>
		// if the head isn't ahead of the tail, we don't have any characters
		if (_rx_buffer2->head == _rx_buffer2->tail) {
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <Uart_read+0xb8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <Uart_read+0xb8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d102      	bne.n	8001f52 <Uart_read+0x76>
			return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f50:	e014      	b.n	8001f7c <Uart_read+0xa0>
		} else {
			unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <Uart_read+0xb8>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <Uart_read+0xb8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	73fb      	strb	r3, [r7, #15]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <Uart_read+0xb8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <Uart_read+0xb8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8001f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8001f74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			return c;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	e7ff      	b.n	8001f7c <Uart_read+0xa0>
		}
	}
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000a9c 	.word	0x20000a9c
 8001f8c:	20000a38 	.word	0x20000a38
 8001f90:	20000ae4 	.word	0x20000ae4
 8001f94:	20000a40 	.word	0x20000a40

08001f98 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
	if (c >= 0) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db54      	blt.n	8002052 <Uart_write+0xba>
		if (uart == gps_uart) {
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4a2c      	ldr	r2, [pc, #176]	@ (800205c <Uart_write+0xc4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d126      	bne.n	8001ffe <Uart_write+0x66>
			int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <Uart_write+0xc8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbe:	60bb      	str	r3, [r7, #8]

			// If the output buffer is full, there's nothing for it other than to
			// wait for the interrupt handler to empty it a bit
			// ???: return 0 here instead?
			while (i == _tx_buffer1->tail)
 8001fc0:	bf00      	nop
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <Uart_write+0xc8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d0f8      	beq.n	8001fc2 <Uart_write+0x2a>
				;

			_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t) c;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <Uart_write+0xc8>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <Uart_write+0xc8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	b2c9      	uxtb	r1, r1
 8001fe0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer1->head = i;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <Uart_write+0xc8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

			__HAL_UART_ENABLE_IT(gps_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <Uart_write+0xc4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <Uart_write+0xc4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ffa:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_TXE); // Enable UART transmission interrupt
		}
	}
}
 8001ffc:	e029      	b.n	8002052 <Uart_write+0xba>
		else if (uart == wifi_uart) {
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	@ (8002064 <Uart_write+0xcc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d125      	bne.n	8002052 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <Uart_write+0xd0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002014:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail)
 8002016:	bf00      	nop
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <Uart_write+0xd0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	429a      	cmp	r2, r3
 8002024:	d0f8      	beq.n	8002018 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t) c;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <Uart_write+0xd0>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <Uart_write+0xd0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	b2c9      	uxtb	r1, r1
 8002036:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <Uart_write+0xd0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			__HAL_UART_ENABLE_IT(wifi_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8002042:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <Uart_write+0xcc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <Uart_write+0xcc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002050:	60da      	str	r2, [r3, #12]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000a9c 	.word	0x20000a9c
 8002060:	20000a3c 	.word	0x20000a3c
 8002064:	20000ae4 	.word	0x20000ae4
 8002068:	20000a44 	.word	0x20000a44

0800206c <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart) {
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	if (uart == gps_uart)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a18      	ldr	r2, [pc, #96]	@ (80020d8 <IsDataAvailable+0x6c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d111      	bne.n	80020a0 <IsDataAvailable+0x34>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 800207c:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <IsDataAvailable+0x70>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <IsDataAvailable+0x70>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800208e:	b29b      	uxth	r3, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer1->head
 8002094:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002098:	b29b      	uxth	r3, r3
				- _rx_buffer1->tail) % UART_BUFFER_SIZE;
 800209a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209e:	e015      	b.n	80020cc <IsDataAvailable+0x60>
	else if (uart == wifi_uart)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <IsDataAvailable+0x74>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <IsDataAvailable+0x60>
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <IsDataAvailable+0x78>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <IsDataAvailable+0x78>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	b29b      	uxth	r3, r3
		return (uint16_t) (UART_BUFFER_SIZE + _rx_buffer2->head
 80020c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020c4:	b29b      	uxth	r3, r3
				- _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80020c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ca:	e7ff      	b.n	80020cc <IsDataAvailable+0x60>
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000a9c 	.word	0x20000a9c
 80020dc:	20000a38 	.word	0x20000a38
 80020e0:	20000ae4 	.word	0x20000ae4
 80020e4:	20000a40 	.word	0x20000a40

080020e8 <Uart_sendstring>:
		buffertosave[indx] = Uart_read(uart); // save the data into the buffer... increments the tail
	}
	return 1;
}

void Uart_sendstring(const char *s, UART_HandleTypeDef *uart) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
	while (*s)
 80020f2:	e007      	b.n	8002104 <Uart_sendstring+0x1c>
		Uart_write(*s++, uart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff4a 	bl	8001f98 <Uart_write>
	while (*s)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f3      	bne.n	80020f4 <Uart_sendstring+0xc>
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <Copy_upto>:

	while (*s)
		Uart_write(*s++, uart);
}

int Copy_upto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
	int so_far = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
	int len = strlen(string);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7fe f811 	bl	8000150 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]

	again: while (Uart_peek(uart) != string[so_far]) {
 8002136:	e03d      	b.n	80021b4 <Copy_upto+0x9c>
		if (uart == gps_uart) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a47      	ldr	r2, [pc, #284]	@ (8002258 <Copy_upto+0x140>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d115      	bne.n	800216c <Copy_upto+0x54>
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8002140:	4b46      	ldr	r3, [pc, #280]	@ (800225c <Copy_upto+0x144>)
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	4b45      	ldr	r3, [pc, #276]	@ (800225c <Copy_upto+0x144>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	68b8      	ldr	r0, [r7, #8]
 8002150:	4403      	add	r3, r0
 8002152:	5c8a      	ldrb	r2, [r1, r2]
 8002154:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8002156:	4b41      	ldr	r3, [pc, #260]	@ (800225c <Copy_upto+0x144>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <Copy_upto+0x144>)
 8002162:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8002164:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8002168:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		if (uart == wifi_uart) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3c      	ldr	r2, [pc, #240]	@ (8002260 <Copy_upto+0x148>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d115      	bne.n	80021a0 <Copy_upto+0x88>
			buffertocopyinto[indx] = _rx_buffer2->buffer[_rx_buffer2->tail];
 8002174:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <Copy_upto+0x14c>)
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <Copy_upto+0x14c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	68b8      	ldr	r0, [r7, #8]
 8002184:	4403      	add	r3, r0
 8002186:	5c8a      	ldrb	r2, [r1, r2]
 8002188:	701a      	strb	r2, [r3, #0]
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <Copy_upto+0x14c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <Copy_upto+0x14c>)
 8002196:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;
 8002198:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 800219c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		indx++;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
		while (!IsDataAvailable(uart))
 80021a6:	bf00      	nop
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff5f 	bl	800206c <IsDataAvailable>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f9      	beq.n	80021a8 <Copy_upto+0x90>
	again: while (Uart_peek(uart) != string[so_far]) {
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fe4d 	bl	8001e54 <Uart_peek>
 80021ba:	4601      	mov	r1, r0
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4299      	cmp	r1, r3
 80021c6:	d1b7      	bne.n	8002138 <Copy_upto+0x20>
			;
	}
	while (Uart_peek(uart) == string[so_far]) {
 80021c8:	e029      	b.n	800221e <Copy_upto+0x106>
		so_far++;
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fe83 	bl	8001edc <Uart_read>
 80021d6:	4601      	mov	r1, r0
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	61ba      	str	r2, [r7, #24]
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	b2ca      	uxtb	r2, r1
 80021e6:	701a      	strb	r2, [r3, #0]
		if (so_far == len)
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d101      	bne.n	80021f4 <Copy_upto+0xdc>
			return 1;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e02c      	b.n	800224e <Copy_upto+0x136>
		timeout = TIMEOUT_DEF;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <Copy_upto+0x150>)
 80021f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021fa:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 80021fc:	bf00      	nop
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff34 	bl	800206c <IsDataAvailable>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d103      	bne.n	8002212 <Copy_upto+0xfa>
 800220a:	4b17      	ldr	r3, [pc, #92]	@ (8002268 <Copy_upto+0x150>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f5      	bne.n	80021fe <Copy_upto+0xe6>
			;
		if (timeout == 0)
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <Copy_upto+0x150>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <Copy_upto+0x106>
			return 0;
 800221a:	2300      	movs	r3, #0
 800221c:	e017      	b.n	800224e <Copy_upto+0x136>
	while (Uart_peek(uart) == string[so_far]) {
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff fe18 	bl	8001e54 <Uart_peek>
 8002224:	4601      	mov	r1, r0
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4299      	cmp	r1, r3
 8002230:	d0cb      	beq.n	80021ca <Copy_upto+0xb2>
	}

	if (so_far != len) {
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	429a      	cmp	r2, r3
 8002238:	d002      	beq.n	8002240 <Copy_upto+0x128>
		so_far = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
		goto again;
 800223e:	e77a      	b.n	8002136 <Copy_upto+0x1e>
	}

	if (so_far == len)
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	429a      	cmp	r2, r3
 8002246:	d101      	bne.n	800224c <Copy_upto+0x134>
		return 1;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <Copy_upto+0x136>
	else
		return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000a9c 	.word	0x20000a9c
 800225c:	20000a38 	.word	0x20000a38
 8002260:	20000ae4 	.word	0x20000ae4
 8002264:	20000a40 	.word	0x20000a40
 8002268:	20000214 	.word	0x20000214

0800226c <Wait_for>:

int Wait_for(char *string, UART_HandleTypeDef *uart) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	int so_far = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
	int len = strlen(string);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fd ff68 	bl	8000150 <strlen>
 8002280:	4603      	mov	r3, r0
 8002282:	60bb      	str	r3, [r7, #8]
	again: timeout = TIMEOUT_DEF;
 8002284:	4b57      	ldr	r3, [pc, #348]	@ (80023e4 <Wait_for+0x178>)
 8002286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800228a:	801a      	strh	r2, [r3, #0]
	// let's wait for the data to show up
	while ((!IsDataAvailable(uart)) && timeout)
 800228c:	bf00      	nop
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f7ff feec 	bl	800206c <IsDataAvailable>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <Wait_for+0x36>
 800229a:	4b52      	ldr	r3, [pc, #328]	@ (80023e4 <Wait_for+0x178>)
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f5      	bne.n	800228e <Wait_for+0x22>
		;
	if (timeout == 0)
 80022a2:	4b50      	ldr	r3, [pc, #320]	@ (80023e4 <Wait_for+0x178>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d139      	bne.n	800231e <Wait_for+0xb2>
		return 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e096      	b.n	80023dc <Wait_for+0x170>
	// peek in the rx_buffer to see if we get the string
	while (Uart_peek(uart) != string[so_far]) {
		if (uart == gps_uart) {
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4a4d      	ldr	r2, [pc, #308]	@ (80023e8 <Wait_for+0x17c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d117      	bne.n	80022e6 <Wait_for+0x7a>
			if (_rx_buffer1->tail != _rx_buffer1->head) {
 80022b6:	4b4d      	ldr	r3, [pc, #308]	@ (80023ec <Wait_for+0x180>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022be:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <Wait_for+0x180>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d00b      	beq.n	80022e2 <Wait_for+0x76>
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 80022ca:	4b48      	ldr	r3, [pc, #288]	@ (80023ec <Wait_for+0x180>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	4b45      	ldr	r3, [pc, #276]	@ (80023ec <Wait_for+0x180>)
 80022d6:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 80022d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 80022dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80022e0:	e001      	b.n	80022e6 <Wait_for+0x7a>
			} else
				return 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e07a      	b.n	80023dc <Wait_for+0x170>
		}
		if (uart == wifi_uart) {
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <Wait_for+0x184>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d117      	bne.n	800231e <Wait_for+0xb2>
			if (_rx_buffer2->tail != _rx_buffer2->head) {
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <Wait_for+0x188>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80022f6:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <Wait_for+0x188>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022fe:	429a      	cmp	r2, r3
 8002300:	d00b      	beq.n	800231a <Wait_for+0xae>
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8002302:	4b3c      	ldr	r3, [pc, #240]	@ (80023f4 <Wait_for+0x188>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	4b39      	ldr	r3, [pc, #228]	@ (80023f4 <Wait_for+0x188>)
 800230e:	681b      	ldr	r3, [r3, #0]
						% UART_BUFFER_SIZE;  // increment the tail
 8002310:	f3c2 0208 	ubfx	r2, r2, #0, #9
				_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8002314:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002318:	e001      	b.n	800231e <Wait_for+0xb2>
			} else
				return 0;
 800231a:	2300      	movs	r3, #0
 800231c:	e05e      	b.n	80023dc <Wait_for+0x170>
	while (Uart_peek(uart) != string[so_far]) {
 800231e:	6838      	ldr	r0, [r7, #0]
 8002320:	f7ff fd98 	bl	8001e54 <Uart_peek>
 8002324:	4601      	mov	r1, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4299      	cmp	r1, r3
 8002330:	d1bd      	bne.n	80022ae <Wait_for+0x42>
		}
	}
	// if we got the first letter of the string
	while (Uart_peek(uart) == string[so_far]) {
 8002332:	e03b      	b.n	80023ac <Wait_for+0x140>
		// now we will peek for the other letters too
		so_far++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	60fb      	str	r3, [r7, #12]
		if (uart == gps_uart) {
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <Wait_for+0x17c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <Wait_for+0xec>
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <Wait_for+0x180>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	4b27      	ldr	r3, [pc, #156]	@ (80023ec <Wait_for+0x180>)
 800234e:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 8002350:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer1->tail = (unsigned int) (_rx_buffer1->tail + 1)
 8002354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		if (uart == wifi_uart) {
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <Wait_for+0x184>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10a      	bne.n	8002376 <Wait_for+0x10a>
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8002360:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <Wait_for+0x188>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <Wait_for+0x188>)
 800236c:	681b      	ldr	r3, [r3, #0]
					% UART_BUFFER_SIZE;  // increment the tail
 800236e:	f3c2 0208 	ubfx	r2, r2, #0, #9
			_rx_buffer2->tail = (unsigned int) (_rx_buffer2->tail + 1)
 8002372:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		}
		if (so_far == len)
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d101      	bne.n	8002382 <Wait_for+0x116>
			return 1;
 800237e:	2301      	movs	r3, #1
 8002380:	e02c      	b.n	80023dc <Wait_for+0x170>
		timeout = TIMEOUT_DEF;
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <Wait_for+0x178>)
 8002384:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002388:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable(uart)) && timeout)
 800238a:	bf00      	nop
 800238c:	6838      	ldr	r0, [r7, #0]
 800238e:	f7ff fe6d 	bl	800206c <IsDataAvailable>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <Wait_for+0x134>
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <Wait_for+0x178>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f5      	bne.n	800238c <Wait_for+0x120>
			;
		if (timeout == 0)
 80023a0:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <Wait_for+0x178>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <Wait_for+0x140>
			return 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	e017      	b.n	80023dc <Wait_for+0x170>
	while (Uart_peek(uart) == string[so_far]) {
 80023ac:	6838      	ldr	r0, [r7, #0]
 80023ae:	f7ff fd51 	bl	8001e54 <Uart_peek>
 80023b2:	4601      	mov	r1, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4299      	cmp	r1, r3
 80023be:	d0b9      	beq.n	8002334 <Wait_for+0xc8>
	}
	if (so_far != len) {
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d002      	beq.n	80023ce <Wait_for+0x162>
		so_far = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
		goto again;
 80023cc:	e75a      	b.n	8002284 <Wait_for+0x18>
	}
	if (so_far == len)
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d101      	bne.n	80023da <Wait_for+0x16e>
		return 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <Wait_for+0x170>
	else
		return 0;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000214 	.word	0x20000214
 80023e8:	20000a9c 	.word	0x20000a9c
 80023ec:	20000a38 	.word	0x20000a38
 80023f0:	20000ae4 	.word	0x20000ae4
 80023f4:	20000a40 	.word	0x20000a40

080023f8 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d023      	beq.n	8002462 <Uart_isr+0x6a>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01e      	beq.n	8002462 <Uart_isr+0x6a>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->SR; /* Read status register */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	73fb      	strb	r3, [r7, #15]
		if (huart == gps_uart) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a3f      	ldr	r2, [pc, #252]	@ (8002534 <Uart_isr+0x13c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d107      	bne.n	800244a <Uart_isr+0x52>
			store_char(c, _rx_buffer1);  // store data in buffer
 800243a:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <Uart_isr+0x140>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	4611      	mov	r1, r2
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fca8 	bl	8001d98 <store_char>
		} else if (huart == wifi_uart) {
			store_char(c, _rx_buffer2);  // store data in buffer
		}
		return;
 8002448:	e06d      	b.n	8002526 <Uart_isr+0x12e>
		} else if (huart == wifi_uart) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a3b      	ldr	r2, [pc, #236]	@ (800253c <Uart_isr+0x144>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d169      	bne.n	8002526 <Uart_isr+0x12e>
			store_char(c, _rx_buffer2);  // store data in buffer
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <Uart_isr+0x148>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc9c 	bl	8001d98 <store_char>
		return;
 8002460:	e061      	b.n	8002526 <Uart_isr+0x12e>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002468:	2b00      	cmp	r3, #0
 800246a:	d05f      	beq.n	800252c <Uart_isr+0x134>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b00      	cmp	r3, #0
 8002474:	d05a      	beq.n	800252c <Uart_isr+0x134>
		if (huart == gps_uart) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a2e      	ldr	r2, [pc, #184]	@ (8002534 <Uart_isr+0x13c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d127      	bne.n	80024ce <Uart_isr+0xd6>
			if (tx_buffer1.head == tx_buffer1.tail) {
 800247e:	4b31      	ldr	r3, [pc, #196]	@ (8002544 <Uart_isr+0x14c>)
 8002480:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002484:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <Uart_isr+0x14c>)
 8002486:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800248a:	429a      	cmp	r2, r3
 800248c:	d108      	bne.n	80024a0 <Uart_isr+0xa8>
				// Buffer empty, so disable interrupts
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800249c:	60da      	str	r2, [r3, #12]
				huart->Instance->SR;
				huart->Instance->DR = c;

			}
		}
		return;
 800249e:	e044      	b.n	800252a <Uart_isr+0x132>
				unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80024a0:	4b28      	ldr	r3, [pc, #160]	@ (8002544 <Uart_isr+0x14c>)
 80024a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024a6:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <Uart_isr+0x14c>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	737b      	strb	r3, [r7, #13]
				tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80024ac:	4b25      	ldr	r3, [pc, #148]	@ (8002544 <Uart_isr+0x14c>)
 80024ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b8:	4a22      	ldr	r2, [pc, #136]	@ (8002544 <Uart_isr+0x14c>)
 80024ba:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
				huart->Instance->SR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	7b7a      	ldrb	r2, [r7, #13]
 80024ca:	605a      	str	r2, [r3, #4]
		return;
 80024cc:	e02d      	b.n	800252a <Uart_isr+0x132>
		else if (huart == wifi_uart) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <Uart_isr+0x144>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d129      	bne.n	800252a <Uart_isr+0x132>
			if (tx_buffer2.head == tx_buffer2.tail) {
 80024d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <Uart_isr+0x150>)
 80024d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <Uart_isr+0x150>)
 80024de:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d108      	bne.n	80024f8 <Uart_isr+0x100>
				__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024f4:	60da      	str	r2, [r3, #12]
		return;
 80024f6:	e018      	b.n	800252a <Uart_isr+0x132>
				unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <Uart_isr+0x150>)
 80024fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80024fe:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <Uart_isr+0x150>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	73bb      	strb	r3, [r7, #14]
				tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8002504:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <Uart_isr+0x150>)
 8002506:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <Uart_isr+0x150>)
 8002512:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
				huart->Instance->SR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
				huart->Instance->DR = c;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	7bba      	ldrb	r2, [r7, #14]
 8002522:	605a      	str	r2, [r3, #4]
		return;
 8002524:	e001      	b.n	800252a <Uart_isr+0x132>
		return;
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <Uart_isr+0x134>
		return;
 800252a:	bf00      	nop
	}
}
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000a9c 	.word	0x20000a9c
 8002538:	20000a38 	.word	0x20000a38
 800253c:	20000ae4 	.word	0x20000ae4
 8002540:	20000a40 	.word	0x20000a40
 8002544:	20000420 	.word	0x20000420
 8002548:	20000830 	.word	0x20000830

0800254c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f023 030f 	bic.w	r3, r3, #15
 800255c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	f043 030c 	orr.w	r3, r3, #12
 800256a:	b2db      	uxtb	r3, r3
 800256c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	b2db      	uxtb	r3, r3
 8002576:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	f043 030c 	orr.w	r3, r3, #12
 800257e:	b2db      	uxtb	r3, r3
 8002580:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	b2db      	uxtb	r3, r3
 800258a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800258c:	f107 0208 	add.w	r2, r7, #8
 8002590:	2364      	movs	r3, #100	@ 0x64
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2304      	movs	r3, #4
 8002596:	214e      	movs	r1, #78	@ 0x4e
 8002598:	4803      	ldr	r0, [pc, #12]	@ (80025a8 <lcd_send_cmd+0x5c>)
 800259a:	f001 fa27 	bl	80039ec <HAL_I2C_Master_Transmit>
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000a48 	.word	0x20000a48

080025ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f023 030f 	bic.w	r3, r3, #15
 80025bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	f043 030d 	orr.w	r3, r3, #13
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	f043 0309 	orr.w	r3, r3, #9
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	f043 030d 	orr.w	r3, r3, #13
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	f043 0309 	orr.w	r3, r3, #9
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2364      	movs	r3, #100	@ 0x64
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2304      	movs	r3, #4
 80025f6:	214e      	movs	r1, #78	@ 0x4e
 80025f8:	4803      	ldr	r0, [pc, #12]	@ (8002608 <lcd_send_data+0x5c>)
 80025fa:	f001 f9f7 	bl	80039ec <HAL_I2C_Master_Transmit>
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000a48 	.word	0x20000a48

0800260c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    switch (row)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <lcd_put_cur+0x18>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d005      	beq.n	800262e <lcd_put_cur+0x22>
 8002622:	e009      	b.n	8002638 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800262a:	603b      	str	r3, [r7, #0]
            break;
 800262c:	e004      	b.n	8002638 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002634:	603b      	str	r3, [r7, #0]
            break;
 8002636:	bf00      	nop
    }

    lcd_send_cmd (col);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff85 	bl	800254c <lcd_send_cmd>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <lcd_init>:


void lcd_init (void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800264e:	2032      	movs	r0, #50	@ 0x32
 8002650:	f000 fdba 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002654:	2030      	movs	r0, #48	@ 0x30
 8002656:	f7ff ff79 	bl	800254c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800265a:	2005      	movs	r0, #5
 800265c:	f000 fdb4 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002660:	2030      	movs	r0, #48	@ 0x30
 8002662:	f7ff ff73 	bl	800254c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002666:	2001      	movs	r0, #1
 8002668:	f000 fdae 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800266c:	2030      	movs	r0, #48	@ 0x30
 800266e:	f7ff ff6d 	bl	800254c <lcd_send_cmd>
	HAL_Delay(10);
 8002672:	200a      	movs	r0, #10
 8002674:	f000 fda8 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002678:	2020      	movs	r0, #32
 800267a:	f7ff ff67 	bl	800254c <lcd_send_cmd>
	HAL_Delay(10);
 800267e:	200a      	movs	r0, #10
 8002680:	f000 fda2 	bl	80031c8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002684:	2028      	movs	r0, #40	@ 0x28
 8002686:	f7ff ff61 	bl	800254c <lcd_send_cmd>
	HAL_Delay(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f000 fd9c 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002690:	2008      	movs	r0, #8
 8002692:	f7ff ff5b 	bl	800254c <lcd_send_cmd>
	HAL_Delay(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f000 fd96 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff ff55 	bl	800254c <lcd_send_cmd>
	HAL_Delay(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f000 fd90 	bl	80031c8 <HAL_Delay>
	HAL_Delay(1);
 80026a8:	2001      	movs	r0, #1
 80026aa:	f000 fd8d 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80026ae:	2006      	movs	r0, #6
 80026b0:	f7ff ff4c 	bl	800254c <lcd_send_cmd>
	HAL_Delay(1);
 80026b4:	2001      	movs	r0, #1
 80026b6:	f000 fd87 	bl	80031c8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80026ba:	200c      	movs	r0, #12
 80026bc:	f7ff ff46 	bl	800254c <lcd_send_cmd>
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80026cc:	e006      	b.n	80026dc <lcd_send_string+0x18>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff68 	bl	80025ac <lcd_send_data>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f4      	bne.n	80026ce <lcd_send_string+0xa>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <led_on>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void led_on() {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026fa:	4802      	ldr	r0, [pc, #8]	@ (8002704 <led_on+0x14>)
 80026fc:	f001 f81a 	bl	8003734 <HAL_GPIO_WritePin>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40011000 	.word	0x40011000

08002708 <led_off>:
void led_off() {
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002712:	4802      	ldr	r0, [pc, #8]	@ (800271c <led_off+0x14>)
 8002714:	f001 f80e 	bl	8003734 <HAL_GPIO_WritePin>
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40011000 	.word	0x40011000

08002720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002726:	f000 fced 	bl	8003104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800272a:	f000 f965 	bl	80029f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800272e:	f000 fa2b 	bl	8002b88 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002732:	f000 f9a7 	bl	8002a84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002736:	f000 f9d3 	bl	8002ae0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800273a:	f000 f9fb 	bl	8002b34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800273e:	f7ff ff84 	bl	800264a <lcd_init>
	Ringbuf_init();
 8002742:	f7ff fae3 	bl	8001d0c <Ringbuf_init>
	HAL_Delay(500);
 8002746:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800274a:	f000 fd3d 	bl	80031c8 <HAL_Delay>
	ESP_Init(WIFI_SSID, WIFI_PASSWORD);
 800274e:	4990      	ldr	r1, [pc, #576]	@ (8002990 <main+0x270>)
 8002750:	4890      	ldr	r0, [pc, #576]	@ (8002994 <main+0x274>)
 8002752:	f7fe fb1d 	bl	8000d90 <ESP_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(100);
 8002756:	2064      	movs	r0, #100	@ 0x64
 8002758:	f000 fd36 	bl	80031c8 <HAL_Delay>
		if (master_count++ > 10000)
 800275c:	4b8e      	ldr	r3, [pc, #568]	@ (8002998 <main+0x278>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	498d      	ldr	r1, [pc, #564]	@ (8002998 <main+0x278>)
 8002764:	600a      	str	r2, [r1, #0]
 8002766:	f242 7210 	movw	r2, #10000	@ 0x2710
 800276a:	4293      	cmp	r3, r2
 800276c:	d902      	bls.n	8002774 <main+0x54>
			master_count = 0;
 800276e:	4b8a      	ldr	r3, [pc, #552]	@ (8002998 <main+0x278>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
		master_toggle = (master_count / 10) % 2;
 8002774:	4b88      	ldr	r3, [pc, #544]	@ (8002998 <main+0x278>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a88      	ldr	r2, [pc, #544]	@ (800299c <main+0x27c>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <main+0x280>)
 800278a:	701a      	strb	r2, [r3, #0]
		if (master_toggle == 0)
 800278c:	4b84      	ldr	r3, [pc, #528]	@ (80029a0 <main+0x280>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d102      	bne.n	800279a <main+0x7a>
			led_off();
 8002794:	f7ff ffb8 	bl	8002708 <led_off>
 8002798:	e001      	b.n	800279e <main+0x7e>
		else
			led_on();
 800279a:	f7ff ffa9 	bl	80026f0 <led_on>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Wait_for("GGA", gps_uart) == 1) {
 800279e:	4981      	ldr	r1, [pc, #516]	@ (80029a4 <main+0x284>)
 80027a0:	4881      	ldr	r0, [pc, #516]	@ (80029a8 <main+0x288>)
 80027a2:	f7ff fd63 	bl	800226c <Wait_for>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d116      	bne.n	80027da <main+0xba>
			VCCTimeout = 5000; // Reset the VCC Timeout indicating the GGA is being received
 80027ac:	4b7f      	ldr	r3, [pc, #508]	@ (80029ac <main+0x28c>)
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	601a      	str	r2, [r3, #0]
			Copy_upto("*", GGA, gps_uart);
 80027b4:	4a7b      	ldr	r2, [pc, #492]	@ (80029a4 <main+0x284>)
 80027b6:	497e      	ldr	r1, [pc, #504]	@ (80029b0 <main+0x290>)
 80027b8:	487e      	ldr	r0, [pc, #504]	@ (80029b4 <main+0x294>)
 80027ba:	f7ff fcad 	bl	8002118 <Copy_upto>
			if (decodeGGA(GGA, &gpsData.ggastruct) == 0) {
 80027be:	497e      	ldr	r1, [pc, #504]	@ (80029b8 <main+0x298>)
 80027c0:	487b      	ldr	r0, [pc, #492]	@ (80029b0 <main+0x290>)
 80027c2:	f7fe fc51 	bl	8001068 <decodeGGA>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <main+0xb4>
				flagGGA = 2;  // 2 indicates the data is valid
 80027cc:	4b7b      	ldr	r3, [pc, #492]	@ (80029bc <main+0x29c>)
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e002      	b.n	80027da <main+0xba>
//				led_on();
			} else {
				flagGGA = 1;  // 1 indicates the data is invalid
 80027d4:	4b79      	ldr	r3, [pc, #484]	@ (80029bc <main+0x29c>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
//				led_off();
			}
		}
		if (Wait_for("RMC", gps_uart) == 1) {
 80027da:	4972      	ldr	r1, [pc, #456]	@ (80029a4 <main+0x284>)
 80027dc:	4878      	ldr	r0, [pc, #480]	@ (80029c0 <main+0x2a0>)
 80027de:	f7ff fd45 	bl	800226c <Wait_for>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d116      	bne.n	8002816 <main+0xf6>
			VCCTimeout = 5000; // Reset the VCC Timeout indicating the RMC is being received
 80027e8:	4b70      	ldr	r3, [pc, #448]	@ (80029ac <main+0x28c>)
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	601a      	str	r2, [r3, #0]
			Copy_upto("*", RMC, gps_uart);
 80027f0:	4a6c      	ldr	r2, [pc, #432]	@ (80029a4 <main+0x284>)
 80027f2:	4974      	ldr	r1, [pc, #464]	@ (80029c4 <main+0x2a4>)
 80027f4:	486f      	ldr	r0, [pc, #444]	@ (80029b4 <main+0x294>)
 80027f6:	f7ff fc8f 	bl	8002118 <Copy_upto>
			if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) {
 80027fa:	4973      	ldr	r1, [pc, #460]	@ (80029c8 <main+0x2a8>)
 80027fc:	4871      	ldr	r0, [pc, #452]	@ (80029c4 <main+0x2a4>)
 80027fe:	f7ff f84d 	bl	800189c <decodeRMC>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <main+0xf0>
				flagRMC = 2;  // 2 indicates the data is valid
 8002808:	4b70      	ldr	r3, [pc, #448]	@ (80029cc <main+0x2ac>)
 800280a:	2202      	movs	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e002      	b.n	8002816 <main+0xf6>
//				led_on();
			} else {
				flagRMC = 1;  // 1 indicates the data is invalid
 8002810:	4b6e      	ldr	r3, [pc, #440]	@ (80029cc <main+0x2ac>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]
//				led_off();
			}
		}
		if ((flagGGA == 2) | (flagRMC == 2)) {
 8002816:	4b69      	ldr	r3, [pc, #420]	@ (80029bc <main+0x29c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b02      	cmp	r3, #2
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b69      	ldr	r3, [pc, #420]	@ (80029cc <main+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	bf0c      	ite	eq
 800282c:	2301      	moveq	r3, #1
 800282e:	2300      	movne	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4313      	orrs	r3, r2
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d034      	beq.n	80028a4 <main+0x184>
			#endif
					lcd_send_string(lcdBuffer);
#else
			//			lcd_blank();

			memset(lcdBuffer, '\0', 50);
 800283a:	2232      	movs	r2, #50	@ 0x32
 800283c:	2100      	movs	r1, #0
 800283e:	4864      	ldr	r0, [pc, #400]	@ (80029d0 <main+0x2b0>)
 8002840:	f002 ff23 	bl	800568a <memset>
			lcd_put_cur(0, 0);
 8002844:	2100      	movs	r1, #0
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fee0 	bl	800260c <lcd_put_cur>
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test1,
 800284c:	4b5a      	ldr	r3, [pc, #360]	@ (80029b8 <main+0x298>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fd fde9 	bl	8000428 <__aeabi_f2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.NS);
 800285a:	4957      	ldr	r1, [pc, #348]	@ (80029b8 <main+0x298>)
 800285c:	7a09      	ldrb	r1, [r1, #8]
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test1,
 800285e:	9100      	str	r1, [sp, #0]
 8002860:	495c      	ldr	r1, [pc, #368]	@ (80029d4 <main+0x2b4>)
 8002862:	485b      	ldr	r0, [pc, #364]	@ (80029d0 <main+0x2b0>)
 8002864:	f002 feac 	bl	80055c0 <siprintf>
			lcd_send_string(lcdBuffer);
 8002868:	4859      	ldr	r0, [pc, #356]	@ (80029d0 <main+0x2b0>)
 800286a:	f7ff ff2b 	bl	80026c4 <lcd_send_string>

			memset(lcdBuffer, '\0', 50);
 800286e:	2232      	movs	r2, #50	@ 0x32
 8002870:	2100      	movs	r1, #0
 8002872:	4857      	ldr	r0, [pc, #348]	@ (80029d0 <main+0x2b0>)
 8002874:	f002 ff09 	bl	800568a <memset>
			lcd_put_cur(1, 0);
 8002878:	2100      	movs	r1, #0
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff fec6 	bl	800260c <lcd_put_cur>
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test2,
 8002880:	4b4d      	ldr	r3, [pc, #308]	@ (80029b8 <main+0x298>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fdcf 	bl	8000428 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
					gpsData.ggastruct.lcation.EW);
 800288e:	494a      	ldr	r1, [pc, #296]	@ (80029b8 <main+0x298>)
 8002890:	7d09      	ldrb	r1, [r1, #20]
			sprintf(lcdBuffer, "%.6f %c    ", gpsData.ggastruct.lcation.test2,
 8002892:	9100      	str	r1, [sp, #0]
 8002894:	494f      	ldr	r1, [pc, #316]	@ (80029d4 <main+0x2b4>)
 8002896:	484e      	ldr	r0, [pc, #312]	@ (80029d0 <main+0x2b0>)
 8002898:	f002 fe92 	bl	80055c0 <siprintf>
			lcd_send_string(lcdBuffer);
 800289c:	484c      	ldr	r0, [pc, #304]	@ (80029d0 <main+0x2b0>)
 800289e:	f7ff ff11 	bl	80026c4 <lcd_send_string>
 80028a2:	e01f      	b.n	80028e4 <main+0x1c4>
#endif
		} else if ((flagGGA == 1) | (flagRMC == 1)) {
 80028a4:	4b45      	ldr	r3, [pc, #276]	@ (80029bc <main+0x29c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b46      	ldr	r3, [pc, #280]	@ (80029cc <main+0x2ac>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	bf0c      	ite	eq
 80028ba:	2301      	moveq	r3, #1
 80028bc:	2300      	movne	r3, #0
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <main+0x1c4>
			// Instead of clearing the display, it's better if we print spaces.
			// This will avoid the "refreshing" part
			//			lcd_blank();
			lcd_put_cur(0, 0);
 80028c8:	2100      	movs	r1, #0
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7ff fe9e 	bl	800260c <lcd_put_cur>
			lcd_send_string("   NO FIX YET   ");
 80028d0:	4841      	ldr	r0, [pc, #260]	@ (80029d8 <main+0x2b8>)
 80028d2:	f7ff fef7 	bl	80026c4 <lcd_send_string>
			lcd_put_cur(1, 0);
 80028d6:	2100      	movs	r1, #0
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff fe97 	bl	800260c <lcd_put_cur>
			lcd_send_string("   Please wait  ");
 80028de:	483f      	ldr	r0, [pc, #252]	@ (80029dc <main+0x2bc>)
 80028e0:	f7ff fef0 	bl	80026c4 <lcd_send_string>
		}
		if (VCCTimeout <= 0) {
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <main+0x28c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	dc18      	bgt.n	800291e <main+0x1fe>
			VCCTimeout = 5000;  // Reset the timeout
 80028ec:	4b2f      	ldr	r3, [pc, #188]	@ (80029ac <main+0x28c>)
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	601a      	str	r2, [r3, #0]
			//reset flags
			flagGGA = flagRMC = 0;
 80028f4:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <main+0x2ac>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <main+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2f      	ldr	r2, [pc, #188]	@ (80029bc <main+0x29c>)
 8002900:	6013      	str	r3, [r2, #0]
			// You are here means the VCC is less, or maybe there is some connection issue
			// Check the VCC, also you can try connecting to the external 5V
			//			lcd_blank();
			lcd_put_cur(0, 0);
 8002902:	2100      	movs	r1, #0
 8002904:	2000      	movs	r0, #0
 8002906:	f7ff fe81 	bl	800260c <lcd_put_cur>
			lcd_send_string("    VCC Issue   ");
 800290a:	4835      	ldr	r0, [pc, #212]	@ (80029e0 <main+0x2c0>)
 800290c:	f7ff feda 	bl	80026c4 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002910:	2100      	movs	r1, #0
 8002912:	2001      	movs	r0, #1
 8002914:	f7ff fe7a 	bl	800260c <lcd_put_cur>
			lcd_send_string("Check Connection");
 8002918:	4832      	ldr	r0, [pc, #200]	@ (80029e4 <main+0x2c4>)
 800291a:	f7ff fed3 	bl	80026c4 <lcd_send_string>
		}
		// Send AT commands, feed data to Thingspeak server
		master_atcnt = master_count / 10 / 15;
 800291e:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <main+0x278>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <main+0x2c8>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <main+0x2cc>)
 800292e:	701a      	strb	r2, [r3, #0]
#define check1 ((flagGGA==2)|(flagRMC==2))&(prev_atcnt < master_atcnt)
		if (check1) {
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <main+0x29c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <main+0x2ac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	4b27      	ldr	r3, [pc, #156]	@ (80029f0 <main+0x2d0>)
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <main+0x2cc>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	bf34      	ite	cc
 800295e:	2301      	movcc	r3, #1
 8002960:	2300      	movcs	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	400b      	ands	r3, r1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00c      	beq.n	8002984 <main+0x264>
			Value_Buf[0] = gpsData.ggastruct.lcation.test1;
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <main+0x298>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a21      	ldr	r2, [pc, #132]	@ (80029f4 <main+0x2d4>)
 8002970:	6013      	str	r3, [r2, #0]
			Value_Buf[1] = gpsData.ggastruct.lcation.test2;
 8002972:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <main+0x298>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <main+0x2d4>)
 8002978:	6053      	str	r3, [r2, #4]
			ESP_Send_Multi(API_KEY, 2, Value_Buf);
 800297a:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <main+0x2d4>)
 800297c:	2102      	movs	r1, #2
 800297e:	4804      	ldr	r0, [pc, #16]	@ (8002990 <main+0x270>)
 8002980:	f7fe fa8a 	bl	8000e98 <ESP_Send_Multi>
		}
		prev_atcnt = master_atcnt;
 8002984:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <main+0x2cc>)
 8002986:	781a      	ldrb	r2, [r3, #0]
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <main+0x2d0>)
 800298a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800298c:	e6e3      	b.n	8002756 <main+0x36>
 800298e:	bf00      	nop
 8002990:	0800874c 	.word	0x0800874c
 8002994:	08008758 	.word	0x08008758
 8002998:	20000c7c 	.word	0x20000c7c
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	20000c80 	.word	0x20000c80
 80029a4:	20000a9c 	.word	0x20000a9c
 80029a8:	0800875c 	.word	0x0800875c
 80029ac:	20000004 	.word	0x20000004
 80029b0:	20000b2c 	.word	0x20000b2c
 80029b4:	08008760 	.word	0x08008760
 80029b8:	20000bf4 	.word	0x20000bf4
 80029bc:	20000c40 	.word	0x20000c40
 80029c0:	08008764 	.word	0x08008764
 80029c4:	20000b90 	.word	0x20000b90
 80029c8:	20000c28 	.word	0x20000c28
 80029cc:	20000c44 	.word	0x20000c44
 80029d0:	20000c48 	.word	0x20000c48
 80029d4:	08008768 	.word	0x08008768
 80029d8:	08008774 	.word	0x08008774
 80029dc:	08008788 	.word	0x08008788
 80029e0:	0800879c 	.word	0x0800879c
 80029e4:	080087b0 	.word	0x080087b0
 80029e8:	1b4e81b5 	.word	0x1b4e81b5
 80029ec:	20000c81 	.word	0x20000c81
 80029f0:	20000c82 	.word	0x20000c82
 80029f4:	20000c84 	.word	0x20000c84

080029f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b090      	sub	sp, #64	@ 0x40
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0318 	add.w	r3, r7, #24
 8002a02:	2228      	movs	r2, #40	@ 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fe3f 	bl	800568a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002a36:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8002a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fb2b 	bl	800409c <HAL_RCC_OscConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a4c:	f000 f8f4 	bl	8002c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	230f      	movs	r3, #15
 8002a52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a54:	2302      	movs	r3, #2
 8002a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fd98 	bl	80045a0 <HAL_RCC_ClockConfig>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a76:	f000 f8df 	bl	8002c38 <Error_Handler>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3740      	adds	r7, #64	@ 0x40
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a88:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <MX_I2C1_Init+0x54>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a90:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <MX_I2C1_Init+0x58>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002aa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002aae:	4b09      	ldr	r3, [pc, #36]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ac0:	4804      	ldr	r0, [pc, #16]	@ (8002ad4 <MX_I2C1_Init+0x50>)
 8002ac2:	f000 fe4f 	bl	8003764 <HAL_I2C_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002acc:	f000 f8b4 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000a48 	.word	0x20000a48
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	000186a0 	.word	0x000186a0

08002ae0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <MX_USART1_UART_Init+0x50>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002aec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	@ (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b18:	f001 fed0 	bl	80048bc <HAL_UART_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b22:	f000 f889 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000a9c 	.word	0x20000a9c
 8002b30:	40013800 	.word	0x40013800

08002b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <MX_USART2_UART_Init+0x50>)
 8002b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b3e:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <MX_USART2_UART_Init+0x4c>)
 8002b6c:	f001 fea6 	bl	80048bc <HAL_UART_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b76:	f000 f85f 	bl	8002c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000ae4 	.word	0x20000ae4
 8002b84:	40004400 	.word	0x40004400

08002b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bba:	f043 0320 	orr.w	r3, r3, #32
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b15      	ldr	r3, [pc, #84]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be4:	4b12      	ldr	r3, [pc, #72]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4a11      	ldr	r2, [pc, #68]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6193      	str	r3, [r2, #24]
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c30 <MX_GPIO_Init+0xa8>)
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c02:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <MX_GPIO_Init+0xac>)
 8002c04:	f000 fd96 	bl	8003734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4804      	ldr	r0, [pc, #16]	@ (8002c34 <MX_GPIO_Init+0xac>)
 8002c22:	f000 fc03 	bl	800342c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40011000 	.word	0x40011000

08002c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3c:	b672      	cpsid	i
}
 8002c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <Error_Handler+0x8>

08002c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6193      	str	r3, [r2, #24]
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <HAL_MspInit+0x5c>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_MspInit+0x60>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_MspInit+0x60>)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40010000 	.word	0x40010000

08002ca8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <HAL_I2C_MspInit+0x90>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d132      	bne.n	8002d2e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	6193      	str	r3, [r2, #24]
 8002cd4:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ce0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce6:	2312      	movs	r3, #18
 8002ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4812      	ldr	r0, [pc, #72]	@ (8002d40 <HAL_I2C_MspInit+0x98>)
 8002cf6:	f000 fb99 	bl	800342c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002cfa:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <HAL_I2C_MspInit+0x9c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	4a0c      	ldr	r2, [pc, #48]	@ (8002d44 <HAL_I2C_MspInit+0x9c>)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4a08      	ldr	r2, [pc, #32]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d20:	61d3      	str	r3, [r2, #28]
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_I2C_MspInit+0x94>)
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d2e:	bf00      	nop
 8002d30:	3728      	adds	r7, #40	@ 0x28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010c00 	.word	0x40010c00
 8002d44:	40010000 	.word	0x40010000

08002d48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	@ 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a45      	ldr	r2, [pc, #276]	@ (8002e78 <HAL_UART_MspInit+0x130>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d146      	bne.n	8002df6 <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d68:	4b44      	ldr	r3, [pc, #272]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4a43      	ldr	r2, [pc, #268]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d72:	6193      	str	r3, [r2, #24]
 8002d74:	4b41      	ldr	r3, [pc, #260]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	4b3e      	ldr	r3, [pc, #248]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a3d      	ldr	r2, [pc, #244]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d98:	2340      	movs	r3, #64	@ 0x40
 8002d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4619      	mov	r1, r3
 8002daa:	4835      	ldr	r0, [pc, #212]	@ (8002e80 <HAL_UART_MspInit+0x138>)
 8002dac:	f000 fb3e 	bl	800342c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db4:	2300      	movs	r3, #0
 8002db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482f      	ldr	r0, [pc, #188]	@ (8002e80 <HAL_UART_MspInit+0x138>)
 8002dc4:	f000 fb32 	bl	800342c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e84 <HAL_UART_MspInit+0x13c>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dde:	4a29      	ldr	r2, [pc, #164]	@ (8002e84 <HAL_UART_MspInit+0x13c>)
 8002de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2025      	movs	r0, #37	@ 0x25
 8002dea:	f000 fae8 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dee:	2025      	movs	r0, #37	@ 0x25
 8002df0:	f000 fb01 	bl	80033f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002df4:	e03c      	b.n	8002e70 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a23      	ldr	r2, [pc, #140]	@ (8002e88 <HAL_UART_MspInit+0x140>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d137      	bne.n	8002e70 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e00:	4b1e      	ldr	r3, [pc, #120]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a1d      	ldr	r2, [pc, #116]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b18      	ldr	r3, [pc, #96]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_UART_MspInit+0x134>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e30:	2304      	movs	r3, #4
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4812      	ldr	r0, [pc, #72]	@ (8002e8c <HAL_UART_MspInit+0x144>)
 8002e44:	f000 faf2 	bl	800342c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e48:	2308      	movs	r3, #8
 8002e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480c      	ldr	r0, [pc, #48]	@ (8002e8c <HAL_UART_MspInit+0x144>)
 8002e5c:	f000 fae6 	bl	800342c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	2026      	movs	r0, #38	@ 0x26
 8002e66:	f000 faaa 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e6a:	2026      	movs	r0, #38	@ 0x26
 8002e6c:	f000 fac3 	bl	80033f6 <HAL_NVIC_EnableIRQ>
}
 8002e70:	bf00      	nop
 8002e72:	3730      	adds	r7, #48	@ 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010c00 	.word	0x40010c00
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40004400 	.word	0x40004400
 8002e8c:	40010800 	.word	0x40010800

08002e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <NMI_Handler+0x4>

08002e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <HardFault_Handler+0x4>

08002ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea4:	bf00      	nop
 8002ea6:	e7fd      	b.n	8002ea4 <MemManage_Handler+0x4>

08002ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eac:	bf00      	nop
 8002eae:	e7fd      	b.n	8002eac <BusFault_Handler+0x4>

08002eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <UsageFault_Handler+0x4>

08002eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (timeout > 0)
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <SysTick_Handler+0x20>)
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <SysTick_Handler+0x18>
		timeout--;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <SysTick_Handler+0x20>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b02      	ldr	r3, [pc, #8]	@ (8002efc <SysTick_Handler+0x20>)
 8002ef2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef4:	f000 f94c 	bl	8003190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000214 	.word	0x20000214

08002f00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002f04:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <USART1_IRQHandler+0x10>)
 8002f06:	f7ff fa77 	bl	80023f8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  /* USER CODE END USART1_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000a9c 	.word	0x20000a9c

08002f14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002f18:	4802      	ldr	r0, [pc, #8]	@ (8002f24 <USART2_IRQHandler+0x10>)
 8002f1a:	f7ff fa6d 	bl	80023f8 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
#endif
  /* USER CODE END USART2_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000ae4 	.word	0x20000ae4

08002f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return 1;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <_kill>:

int _kill(int pid, int sig)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f40:	f002 fc04 	bl	800574c <__errno>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2216      	movs	r2, #22
 8002f48:	601a      	str	r2, [r3, #0]
  return -1;
 8002f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_exit>:

void _exit (int status)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff ffe7 	bl	8002f36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <_exit+0x12>

08002f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e00a      	b.n	8002f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f7e:	f3af 8000 	nop.w
 8002f82:	4601      	mov	r1, r0
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	60ba      	str	r2, [r7, #8]
 8002f8a:	b2ca      	uxtb	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	dbf0      	blt.n	8002f7e <_read+0x12>
  }

  return len;
 8002f9c:	687b      	ldr	r3, [r7, #4]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e009      	b.n	8002fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60ba      	str	r2, [r7, #8]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dbf1      	blt.n	8002fb8 <_write+0x12>
  }
  return len;
 8002fd4:	687b      	ldr	r3, [r7, #4]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_close>:

int _close(int file)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003004:	605a      	str	r2, [r3, #4]
  return 0;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <_isatty>:

int _isatty(int file)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800301a:	2301      	movs	r3, #1
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
	...

08003040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003048:	4a14      	ldr	r2, [pc, #80]	@ (800309c <_sbrk+0x5c>)
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <_sbrk+0x60>)
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <_sbrk+0x64>)
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <_sbrk+0x68>)
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	429a      	cmp	r2, r3
 800306e:	d207      	bcs.n	8003080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003070:	f002 fb6c 	bl	800574c <__errno>
 8003074:	4603      	mov	r3, r0
 8003076:	220c      	movs	r2, #12
 8003078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	e009      	b.n	8003094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003080:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <_sbrk+0x64>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <_sbrk+0x64>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <_sbrk+0x64>)
 8003090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20005000 	.word	0x20005000
 80030a0:	00000400 	.word	0x00000400
 80030a4:	20000c8c 	.word	0x20000c8c
 80030a8:	20000de0 	.word	0x20000de0

080030ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030b8:	f7ff fff8 	bl	80030ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030bc:	480b      	ldr	r0, [pc, #44]	@ (80030ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80030be:	490c      	ldr	r1, [pc, #48]	@ (80030f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030c0:	4a0c      	ldr	r2, [pc, #48]	@ (80030f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c4:	e002      	b.n	80030cc <LoopCopyDataInit>

080030c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ca:	3304      	adds	r3, #4

080030cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030d0:	d3f9      	bcc.n	80030c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030d2:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030d4:	4c09      	ldr	r4, [pc, #36]	@ (80030fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d8:	e001      	b.n	80030de <LoopFillZerobss>

080030da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030dc:	3204      	adds	r2, #4

080030de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030e0:	d3fb      	bcc.n	80030da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030e2:	f002 fb39 	bl	8005758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030e6:	f7ff fb1b 	bl	8002720 <main>
  bx lr
 80030ea:	4770      	bx	lr
  ldr r0, =_sdata
 80030ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80030f4:	08008bb0 	.word	0x08008bb0
  ldr r2, =_sbss
 80030f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80030fc:	20000de0 	.word	0x20000de0

08003100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003100:	e7fe      	b.n	8003100 <ADC1_2_IRQHandler>
	...

08003104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003108:	4b08      	ldr	r3, [pc, #32]	@ (800312c <HAL_Init+0x28>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a07      	ldr	r2, [pc, #28]	@ (800312c <HAL_Init+0x28>)
 800310e:	f043 0310 	orr.w	r3, r3, #16
 8003112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003114:	2003      	movs	r0, #3
 8003116:	f000 f947 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800311a:	200f      	movs	r0, #15
 800311c:	f000 f808 	bl	8003130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003120:	f7ff fd90 	bl	8002c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40022000 	.word	0x40022000

08003130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003138:	4b12      	ldr	r3, [pc, #72]	@ (8003184 <HAL_InitTick+0x54>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <HAL_InitTick+0x58>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003146:	fbb3 f3f1 	udiv	r3, r3, r1
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f95f 	bl	8003412 <HAL_SYSTICK_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e00e      	b.n	800317c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b0f      	cmp	r3, #15
 8003162:	d80a      	bhi.n	800317a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003164:	2200      	movs	r2, #0
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	f000 f927 	bl	80033be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003170:	4a06      	ldr	r2, [pc, #24]	@ (800318c <HAL_InitTick+0x5c>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000008 	.word	0x20000008
 8003188:	20000010 	.word	0x20000010
 800318c:	2000000c 	.word	0x2000000c

08003190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <HAL_IncTick+0x1c>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_IncTick+0x20>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	4a03      	ldr	r2, [pc, #12]	@ (80031b0 <HAL_IncTick+0x20>)
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000010 	.word	0x20000010
 80031b0:	20000c90 	.word	0x20000c90

080031b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b02      	ldr	r3, [pc, #8]	@ (80031c4 <HAL_GetTick+0x10>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000c90 	.word	0x20000c90

080031c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d005      	beq.n	80031ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_Delay+0x44>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ee:	bf00      	nop
 80031f0:	f7ff ffe0 	bl	80031b4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d8f7      	bhi.n	80031f0 <HAL_Delay+0x28>
  {
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000010 	.word	0x20000010

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4906      	ldr	r1, [pc, #24]	@ (80032a8 <__NVIC_EnableIRQ+0x34>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	@ (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	@ (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
         );
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	@ 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003374:	d301      	bcc.n	800337a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003376:	2301      	movs	r3, #1
 8003378:	e00f      	b.n	800339a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <SysTick_Config+0x40>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003382:	210f      	movs	r1, #15
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f7ff ff90 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <SysTick_Config+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003392:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <SysTick_Config+0x40>)
 8003394:	2207      	movs	r2, #7
 8003396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000e010 	.word	0xe000e010

080033a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff2d 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d0:	f7ff ff42 	bl	8003258 <__NVIC_GetPriorityGrouping>
 80033d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	6978      	ldr	r0, [r7, #20]
 80033dc:	f7ff ff90 	bl	8003300 <NVIC_EncodePriority>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff5f 	bl	80032ac <__NVIC_SetPriority>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff35 	bl	8003274 <__NVIC_EnableIRQ>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffa2 	bl	8003364 <SysTick_Config>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800342c:	b480      	push	{r7}
 800342e:	b08b      	sub	sp, #44	@ 0x2c
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800343a:	2300      	movs	r3, #0
 800343c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800343e:	e169      	b.n	8003714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003440:	2201      	movs	r2, #1
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	429a      	cmp	r2, r3
 800345a:	f040 8158 	bne.w	800370e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a9a      	ldr	r2, [pc, #616]	@ (80036cc <HAL_GPIO_Init+0x2a0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d05e      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003468:	4a98      	ldr	r2, [pc, #608]	@ (80036cc <HAL_GPIO_Init+0x2a0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d875      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800346e:	4a98      	ldr	r2, [pc, #608]	@ (80036d0 <HAL_GPIO_Init+0x2a4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d058      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003474:	4a96      	ldr	r2, [pc, #600]	@ (80036d0 <HAL_GPIO_Init+0x2a4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d86f      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800347a:	4a96      	ldr	r2, [pc, #600]	@ (80036d4 <HAL_GPIO_Init+0x2a8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d052      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003480:	4a94      	ldr	r2, [pc, #592]	@ (80036d4 <HAL_GPIO_Init+0x2a8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d869      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 8003486:	4a94      	ldr	r2, [pc, #592]	@ (80036d8 <HAL_GPIO_Init+0x2ac>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d04c      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 800348c:	4a92      	ldr	r2, [pc, #584]	@ (80036d8 <HAL_GPIO_Init+0x2ac>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d863      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 8003492:	4a92      	ldr	r2, [pc, #584]	@ (80036dc <HAL_GPIO_Init+0x2b0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d046      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
 8003498:	4a90      	ldr	r2, [pc, #576]	@ (80036dc <HAL_GPIO_Init+0x2b0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d85d      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 800349e:	2b12      	cmp	r3, #18
 80034a0:	d82a      	bhi.n	80034f8 <HAL_GPIO_Init+0xcc>
 80034a2:	2b12      	cmp	r3, #18
 80034a4:	d859      	bhi.n	800355a <HAL_GPIO_Init+0x12e>
 80034a6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <HAL_GPIO_Init+0x80>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	08003527 	.word	0x08003527
 80034b0:	08003501 	.word	0x08003501
 80034b4:	08003513 	.word	0x08003513
 80034b8:	08003555 	.word	0x08003555
 80034bc:	0800355b 	.word	0x0800355b
 80034c0:	0800355b 	.word	0x0800355b
 80034c4:	0800355b 	.word	0x0800355b
 80034c8:	0800355b 	.word	0x0800355b
 80034cc:	0800355b 	.word	0x0800355b
 80034d0:	0800355b 	.word	0x0800355b
 80034d4:	0800355b 	.word	0x0800355b
 80034d8:	0800355b 	.word	0x0800355b
 80034dc:	0800355b 	.word	0x0800355b
 80034e0:	0800355b 	.word	0x0800355b
 80034e4:	0800355b 	.word	0x0800355b
 80034e8:	0800355b 	.word	0x0800355b
 80034ec:	0800355b 	.word	0x0800355b
 80034f0:	08003509 	.word	0x08003509
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	4a79      	ldr	r2, [pc, #484]	@ (80036e0 <HAL_GPIO_Init+0x2b4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034fe:	e02c      	b.n	800355a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	623b      	str	r3, [r7, #32]
          break;
 8003506:	e029      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	3304      	adds	r3, #4
 800350e:	623b      	str	r3, [r7, #32]
          break;
 8003510:	e024      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	3308      	adds	r3, #8
 8003518:	623b      	str	r3, [r7, #32]
          break;
 800351a:	e01f      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	330c      	adds	r3, #12
 8003522:	623b      	str	r3, [r7, #32]
          break;
 8003524:	e01a      	b.n	800355c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800352e:	2304      	movs	r3, #4
 8003530:	623b      	str	r3, [r7, #32]
          break;
 8003532:	e013      	b.n	800355c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800353c:	2308      	movs	r3, #8
 800353e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	611a      	str	r2, [r3, #16]
          break;
 8003546:	e009      	b.n	800355c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003548:	2308      	movs	r3, #8
 800354a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	615a      	str	r2, [r3, #20]
          break;
 8003552:	e003      	b.n	800355c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003554:	2300      	movs	r3, #0
 8003556:	623b      	str	r3, [r7, #32]
          break;
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x130>
          break;
 800355a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2bff      	cmp	r3, #255	@ 0xff
 8003560:	d801      	bhi.n	8003566 <HAL_GPIO_Init+0x13a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	e001      	b.n	800356a <HAL_GPIO_Init+0x13e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2bff      	cmp	r3, #255	@ 0xff
 8003570:	d802      	bhi.n	8003578 <HAL_GPIO_Init+0x14c>
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	e002      	b.n	800357e <HAL_GPIO_Init+0x152>
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	3b08      	subs	r3, #8
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	210f      	movs	r1, #15
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	6a39      	ldr	r1, [r7, #32]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	fa01 f303 	lsl.w	r3, r1, r3
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80b1 	beq.w	800370e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035ac:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	@ (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b4a      	ldr	r3, [pc, #296]	@ (80036e4 <HAL_GPIO_Init+0x2b8>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035c4:	4a48      	ldr	r2, [pc, #288]	@ (80036e8 <HAL_GPIO_Init+0x2bc>)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	220f      	movs	r2, #15
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a40      	ldr	r2, [pc, #256]	@ (80036ec <HAL_GPIO_Init+0x2c0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_GPIO_Init+0x1ec>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3f      	ldr	r2, [pc, #252]	@ (80036f0 <HAL_GPIO_Init+0x2c4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00d      	beq.n	8003614 <HAL_GPIO_Init+0x1e8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3e      	ldr	r2, [pc, #248]	@ (80036f4 <HAL_GPIO_Init+0x2c8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_GPIO_Init+0x1e4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3d      	ldr	r2, [pc, #244]	@ (80036f8 <HAL_GPIO_Init+0x2cc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_GPIO_Init+0x1e0>
 8003608:	2303      	movs	r3, #3
 800360a:	e006      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 800360c:	2304      	movs	r3, #4
 800360e:	e004      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003610:	2302      	movs	r3, #2
 8003612:	e002      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_GPIO_Init+0x1ee>
 8003618:	2300      	movs	r3, #0
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	f002 0203 	and.w	r2, r2, #3
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	4093      	lsls	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800362a:	492f      	ldr	r1, [pc, #188]	@ (80036e8 <HAL_GPIO_Init+0x2bc>)
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003644:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	492c      	ldr	r1, [pc, #176]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	608b      	str	r3, [r1, #8]
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003652:	4b2a      	ldr	r3, [pc, #168]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	43db      	mvns	r3, r3
 800365a:	4928      	ldr	r1, [pc, #160]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 800365c:	4013      	ands	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800366c:	4b23      	ldr	r3, [pc, #140]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	4922      	ldr	r1, [pc, #136]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	60cb      	str	r3, [r1, #12]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800367a:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	491e      	ldr	r1, [pc, #120]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 8003684:	4013      	ands	r3, r2
 8003686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4918      	ldr	r1, [pc, #96]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4914      	ldr	r1, [pc, #80]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d021      	beq.n	8003700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80036bc:	4b0f      	ldr	r3, [pc, #60]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
 80036c8:	e021      	b.n	800370e <HAL_GPIO_Init+0x2e2>
 80036ca:	bf00      	nop
 80036cc:	10320000 	.word	0x10320000
 80036d0:	10310000 	.word	0x10310000
 80036d4:	10220000 	.word	0x10220000
 80036d8:	10210000 	.word	0x10210000
 80036dc:	10120000 	.word	0x10120000
 80036e0:	10110000 	.word	0x10110000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010800 	.word	0x40010800
 80036f0:	40010c00 	.word	0x40010c00
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_GPIO_Init+0x304>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	43db      	mvns	r3, r3
 8003708:	4909      	ldr	r1, [pc, #36]	@ (8003730 <HAL_GPIO_Init+0x304>)
 800370a:	4013      	ands	r3, r2
 800370c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	3301      	adds	r3, #1
 8003712:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f ae8e 	bne.w	8003440 <HAL_GPIO_Init+0x14>
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	372c      	adds	r7, #44	@ 0x2c
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr
 8003730:	40010400 	.word	0x40010400

08003734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
 8003740:	4613      	mov	r3, r2
 8003742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003744:	787b      	ldrb	r3, [r7, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	041a      	lsls	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e12b      	b.n	80039ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff fa8c 	bl	8002ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	@ 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c8:	f001 f832 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a81      	ldr	r2, [pc, #516]	@ (80039d8 <HAL_I2C_Init+0x274>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d807      	bhi.n	80037e8 <HAL_I2C_Init+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a80      	ldr	r2, [pc, #512]	@ (80039dc <HAL_I2C_Init+0x278>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e006      	b.n	80037f6 <HAL_I2C_Init+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a7d      	ldr	r2, [pc, #500]	@ (80039e0 <HAL_I2C_Init+0x27c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e7      	b.n	80039ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a78      	ldr	r2, [pc, #480]	@ (80039e4 <HAL_I2C_Init+0x280>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a6a      	ldr	r2, [pc, #424]	@ (80039d8 <HAL_I2C_Init+0x274>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <HAL_I2C_Init+0xd4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	e009      	b.n	800384c <HAL_I2C_Init+0xe8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	4a69      	ldr	r2, [pc, #420]	@ (80039e8 <HAL_I2C_Init+0x284>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800385e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	495c      	ldr	r1, [pc, #368]	@ (80039d8 <HAL_I2C_Init+0x274>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d819      	bhi.n	80038a0 <HAL_I2C_Init+0x13c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb1 f3f3 	udiv	r3, r1, r3
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003880:	400b      	ands	r3, r1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_I2C_Init+0x138>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e59      	subs	r1, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb1 f3f3 	udiv	r3, r1, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389a:	e051      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 800389c:	2304      	movs	r3, #4
 800389e:	e04f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <HAL_I2C_Init+0x168>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e012      	b.n	80038f2 <HAL_I2C_Init+0x18e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x196>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e022      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <HAL_I2C_Init+0x1bc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e58      	subs	r0, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	fbb0 f3f3 	udiv	r3, r0, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800396e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6911      	ldr	r1, [r2, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	430b      	orrs	r3, r1
 8003982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	000186a0 	.word	0x000186a0
 80039dc:	001e847f 	.word	0x001e847f
 80039e0:	003d08ff 	.word	0x003d08ff
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
 80039fc:	4613      	mov	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff fbd8 	bl	80031b4 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 80e0 	bne.w	8003bd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4970      	ldr	r1, [pc, #448]	@ (8003be0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f964 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0d3      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x50>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d007      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2221      	movs	r2, #33	@ 0x21
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a50      	ldr	r2, [pc, #320]	@ (8003be4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f89c 	bl	8003be8 <I2C_MasterRequestWrite>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ad0:	e066      	b.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa22 	bl	8003f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa19 	bl	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d194      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d006      	beq.n	8003c12 <I2C_MasterRequestWrite+0x2a>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <I2C_MasterRequestWrite+0x2a>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c10:	d108      	bne.n	8003c24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e00b      	b.n	8003c3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	2b12      	cmp	r3, #18
 8003c2a:	d107      	bne.n	8003c3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f84f 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c62:	d103      	bne.n	8003c6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e035      	b.n	8003cdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c78:	d108      	bne.n	8003c8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	e01b      	b.n	8003cc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	11db      	asrs	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 030f 	orn	r3, r3, #15
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	490e      	ldr	r1, [pc, #56]	@ (8003ce4 <I2C_MasterRequestWrite+0xfc>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f898 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e010      	b.n	8003cdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4907      	ldr	r1, [pc, #28]	@ (8003ce8 <I2C_MasterRequestWrite+0x100>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f888 	bl	8003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	00010008 	.word	0x00010008
 8003ce8:	00010002 	.word	0x00010002

08003cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	e048      	b.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d044      	beq.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7ff fa55 	bl	80031b4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d139      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	0c1b      	lsrs	r3, r3, #16
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10d      	bne.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4013      	ands	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	e00c      	b.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d116      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	f043 0220 	orr.w	r2, r3, #32
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e023      	b.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d10d      	bne.n	8003db6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	43da      	mvns	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	e00c      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d093      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dee:	e071      	b.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfe:	d123      	bne.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	f043 0204 	orr.w	r2, r3, #4
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e067      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d041      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7ff f9b0 	bl	80031b4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d302      	bcc.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d136      	bne.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e021      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10c      	bne.n	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e00b      	b.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af6d 	bne.w	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2c:	e034      	b.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f886 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e034      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d028      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f46:	f7ff f935 	bl	80031b4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d302      	bcc.n	8003f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d11d      	bne.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	2b80      	cmp	r3, #128	@ 0x80
 8003f68:	d016      	beq.n	8003f98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa2:	2b80      	cmp	r3, #128	@ 0x80
 8003fa4:	d1c3      	bne.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fbc:	e034      	b.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f83e 	bl	8004040 <I2C_IsAcknowledgeFailed>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e034      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d028      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7ff f8ed 	bl	80031b4 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11d      	bne.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d016      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d1c3      	bne.n	8003fbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004056:	d11b      	bne.n	8004090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f043 0204 	orr.w	r2, r3, #4
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e000      	b.n	8004092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e272      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8087 	beq.w	80041ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040bc:	4b92      	ldr	r3, [pc, #584]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d00c      	beq.n	80040e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d112      	bne.n	80040fa <HAL_RCC_OscConfig+0x5e>
 80040d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e0:	d10b      	bne.n	80040fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e2:	4b89      	ldr	r3, [pc, #548]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d06c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x12c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d168      	bne.n	80041c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e24c      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x76>
 8004104:	4b80      	ldr	r3, [pc, #512]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7f      	ldr	r2, [pc, #508]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800410a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e02e      	b.n	8004170 <HAL_RCC_OscConfig+0xd4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x98>
 800411a:	4b7b      	ldr	r3, [pc, #492]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a7a      	ldr	r2, [pc, #488]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	4b78      	ldr	r3, [pc, #480]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a77      	ldr	r2, [pc, #476]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800412c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e01d      	b.n	8004170 <HAL_RCC_OscConfig+0xd4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800413c:	d10c      	bne.n	8004158 <HAL_RCC_OscConfig+0xbc>
 800413e:	4b72      	ldr	r3, [pc, #456]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a71      	ldr	r2, [pc, #452]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b6f      	ldr	r3, [pc, #444]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a6e      	ldr	r2, [pc, #440]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0xd4>
 8004158:	4b6b      	ldr	r3, [pc, #428]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a6a      	ldr	r2, [pc, #424]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800415e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b68      	ldr	r3, [pc, #416]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a67      	ldr	r2, [pc, #412]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800416a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800416e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7ff f81c 	bl	80031b4 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004180:	f7ff f818 	bl	80031b4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	@ 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e200      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b5d      	ldr	r3, [pc, #372]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0xe4>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7ff f808 	bl	80031b4 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a8:	f7ff f804 	bl	80031b4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	@ 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e1ec      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	4b53      	ldr	r3, [pc, #332]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x10c>
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d063      	beq.n	800429e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041e2:	4b49      	ldr	r3, [pc, #292]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d11c      	bne.n	8004228 <HAL_RCC_OscConfig+0x18c>
 80041ee:	4b46      	ldr	r3, [pc, #280]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fa:	4b43      	ldr	r3, [pc, #268]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCC_OscConfig+0x176>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1c0      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004212:	4b3d      	ldr	r3, [pc, #244]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4939      	ldr	r1, [pc, #228]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	e03a      	b.n	800429e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004230:	4b36      	ldr	r3, [pc, #216]	@ (800430c <HAL_RCC_OscConfig+0x270>)
 8004232:	2201      	movs	r2, #1
 8004234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7fe ffbd 	bl	80031b4 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423e:	f7fe ffb9 	bl	80031b4 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1a1      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004250:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b2a      	ldr	r3, [pc, #168]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	4927      	ldr	r1, [pc, #156]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]
 8004270:	e015      	b.n	800429e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b26      	ldr	r3, [pc, #152]	@ (800430c <HAL_RCC_OscConfig+0x270>)
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe ff9c 	bl	80031b4 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004280:	f7fe ff98 	bl	80031b4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e180      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004292:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d03a      	beq.n	8004320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d019      	beq.n	80042e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b2:	4b17      	ldr	r3, [pc, #92]	@ (8004310 <HAL_RCC_OscConfig+0x274>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b8:	f7fe ff7c 	bl	80031b4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c0:	f7fe ff78 	bl	80031b4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e160      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042de:	2001      	movs	r0, #1
 80042e0:	f000 face 	bl	8004880 <RCC_Delay>
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_OscConfig+0x274>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fe ff62 	bl	80031b4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f2:	e00f      	b.n	8004314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fe ff5e 	bl	80031b4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d908      	bls.n	8004314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e146      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	42420000 	.word	0x42420000
 8004310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004314:	4b92      	ldr	r3, [pc, #584]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e9      	bne.n	80042f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 80a6 	beq.w	800447a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004332:	4b8b      	ldr	r3, [pc, #556]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10d      	bne.n	800435a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433e:	4b88      	ldr	r3, [pc, #544]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4a87      	ldr	r2, [pc, #540]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004348:	61d3      	str	r3, [r2, #28]
 800434a:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435a:	4b82      	ldr	r3, [pc, #520]	@ (8004564 <HAL_RCC_OscConfig+0x4c8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d118      	bne.n	8004398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004366:	4b7f      	ldr	r3, [pc, #508]	@ (8004564 <HAL_RCC_OscConfig+0x4c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a7e      	ldr	r2, [pc, #504]	@ (8004564 <HAL_RCC_OscConfig+0x4c8>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004372:	f7fe ff1f 	bl	80031b4 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fe ff1b 	bl	80031b4 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	@ 0x64
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e103      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	4b75      	ldr	r3, [pc, #468]	@ (8004564 <HAL_RCC_OscConfig+0x4c8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x312>
 80043a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	e02d      	b.n	800440a <HAL_RCC_OscConfig+0x36e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x334>
 80043b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4a69      	ldr	r2, [pc, #420]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	6213      	str	r3, [r2, #32]
 80043c2:	4b67      	ldr	r3, [pc, #412]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4a66      	ldr	r2, [pc, #408]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043c8:	f023 0304 	bic.w	r3, r3, #4
 80043cc:	6213      	str	r3, [r2, #32]
 80043ce:	e01c      	b.n	800440a <HAL_RCC_OscConfig+0x36e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d10c      	bne.n	80043f2 <HAL_RCC_OscConfig+0x356>
 80043d8:	4b61      	ldr	r3, [pc, #388]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4a60      	ldr	r2, [pc, #384]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043de:	f043 0304 	orr.w	r3, r3, #4
 80043e2:	6213      	str	r3, [r2, #32]
 80043e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4a5d      	ldr	r2, [pc, #372]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6213      	str	r3, [r2, #32]
 80043f0:	e00b      	b.n	800440a <HAL_RCC_OscConfig+0x36e>
 80043f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4a5a      	ldr	r2, [pc, #360]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6213      	str	r3, [r2, #32]
 80043fe:	4b58      	ldr	r3, [pc, #352]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4a57      	ldr	r2, [pc, #348]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	f023 0304 	bic.w	r3, r3, #4
 8004408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d015      	beq.n	800443e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fe fecf 	bl	80031b4 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fe fecb 	bl	80031b4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0b1      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	4b4b      	ldr	r3, [pc, #300]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ee      	beq.n	800441a <HAL_RCC_OscConfig+0x37e>
 800443c:	e014      	b.n	8004468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443e:	f7fe feb9 	bl	80031b4 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004444:	e00a      	b.n	800445c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004446:	f7fe feb5 	bl	80031b4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e09b      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445c:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ee      	bne.n	8004446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446e:	4b3c      	ldr	r3, [pc, #240]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4a3b      	ldr	r2, [pc, #236]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004484:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d061      	beq.n	8004554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d146      	bne.n	8004526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004498:	4b33      	ldr	r3, [pc, #204]	@ (8004568 <HAL_RCC_OscConfig+0x4cc>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fe fe89 	bl	80031b4 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fe fe85 	bl	80031b4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e06d      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044b8:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044cc:	d108      	bne.n	80044e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4921      	ldr	r1, [pc, #132]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a19      	ldr	r1, [r3, #32]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	430b      	orrs	r3, r1
 80044f2:	491b      	ldr	r1, [pc, #108]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <HAL_RCC_OscConfig+0x4cc>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fe fe59 	bl	80031b4 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004506:	f7fe fe55 	bl	80031b4 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e03d      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x46a>
 8004524:	e035      	b.n	8004592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <HAL_RCC_OscConfig+0x4cc>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fe42 	bl	80031b4 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fe3e 	bl	80031b4 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e026      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x498>
 8004552:	e01e      	b.n	8004592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e019      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
 8004560:	40021000 	.word	0x40021000
 8004564:	40007000 	.word	0x40007000
 8004568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_RCC_OscConfig+0x500>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	429a      	cmp	r2, r3
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0d0      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d910      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b67      	ldr	r3, [pc, #412]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	4965      	ldr	r1, [pc, #404]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b63      	ldr	r3, [pc, #396]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b8      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045fc:	4b59      	ldr	r3, [pc, #356]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a58      	ldr	r2, [pc, #352]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004614:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800461e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b50      	ldr	r3, [pc, #320]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	494d      	ldr	r1, [pc, #308]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d040      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b47      	ldr	r3, [pc, #284]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d115      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e073      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06b      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b39      	ldr	r3, [pc, #228]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4936      	ldr	r1, [pc, #216]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fe fd90 	bl	80031b4 <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fe fd8c 	bl	80031b4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e053      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d210      	bcs.n	80046f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b24      	ldr	r3, [pc, #144]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	4922      	ldr	r1, [pc, #136]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4916      	ldr	r1, [pc, #88]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471a:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	490e      	ldr	r1, [pc, #56]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800472e:	f000 f821 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004732:	4602      	mov	r2, r0
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	490a      	ldr	r1, [pc, #40]	@ (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	5ccb      	ldrb	r3, [r1, r3]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	4a09      	ldr	r2, [pc, #36]	@ (800476c <HAL_RCC_ClockConfig+0x1cc>)
 8004748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_RCC_ClockConfig+0x1d0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fcee 	bl	8003130 <HAL_InitTick>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40022000 	.word	0x40022000
 8004764:	40021000 	.word	0x40021000
 8004768:	080087c4 	.word	0x080087c4
 800476c:	20000008 	.word	0x20000008
 8004770:	2000000c 	.word	0x2000000c

08004774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800478e:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x94>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b04      	cmp	r3, #4
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0x30>
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x36>
 80047a2:	e027      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047a4:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_RCC_GetSysClockFreq+0x98>)
 80047a6:	613b      	str	r3, [r7, #16]
      break;
 80047a8:	e027      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	0c9b      	lsrs	r3, r3, #18
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	4a17      	ldr	r2, [pc, #92]	@ (8004810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
 80047b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047c2:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x94>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	0c5b      	lsrs	r3, r3, #17
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	4a11      	ldr	r2, [pc, #68]	@ (8004814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
 80047d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <HAL_RCC_GetSysClockFreq+0x98>)
 80047d6:	fb03 f202 	mul.w	r2, r3, r2
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e004      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047e8:	fb02 f303 	mul.w	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	613b      	str	r3, [r7, #16]
      break;
 80047f2:	e002      	b.n	80047fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCC_GetSysClockFreq+0x98>)
 80047f6:	613b      	str	r3, [r7, #16]
      break;
 80047f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047fa:	693b      	ldr	r3, [r7, #16]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	007a1200 	.word	0x007a1200
 8004810:	080087dc 	.word	0x080087dc
 8004814:	080087ec 	.word	0x080087ec
 8004818:	003d0900 	.word	0x003d0900

0800481c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004820:	4b02      	ldr	r3, [pc, #8]	@ (800482c <HAL_RCC_GetHCLKFreq+0x10>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004834:	f7ff fff2 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b05      	ldr	r3, [pc, #20]	@ (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	080087d4 	.word	0x080087d4

08004858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800485c:	f7ff ffde 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0adb      	lsrs	r3, r3, #11
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	@ (800487c <HAL_RCC_GetPCLK2Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	080087d4 	.word	0x080087d4

08004880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004888:	4b0a      	ldr	r3, [pc, #40]	@ (80048b4 <RCC_Delay+0x34>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <RCC_Delay+0x38>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	0a5b      	lsrs	r3, r3, #9
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800489c:	bf00      	nop
  }
  while (Delay --);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	60fa      	str	r2, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f9      	bne.n	800489c <RCC_Delay+0x1c>
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr
 80048b4:	20000008 	.word	0x20000008
 80048b8:	10624dd3 	.word	0x10624dd3

080048bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e042      	b.n	8004954 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fe fa30 	bl	8002d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f82b 	bl	800495c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004996:	f023 030c 	bic.w	r3, r3, #12
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <UART_SetConfig+0x114>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d103      	bne.n	80049cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7ff ff48 	bl	8004858 <HAL_RCC_GetPCLK2Freq>
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	e002      	b.n	80049d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7ff ff30 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80049d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009a      	lsls	r2, r3, #2
 80049dc:	441a      	add	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	4a22      	ldr	r2, [pc, #136]	@ (8004a74 <UART_SetConfig+0x118>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	0119      	lsls	r1, r3, #4
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009a      	lsls	r2, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a08:	4b1a      	ldr	r3, [pc, #104]	@ (8004a74 <UART_SetConfig+0x118>)
 8004a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2064      	movs	r0, #100	@ 0x64
 8004a12:	fb00 f303 	mul.w	r3, r0, r3
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	3332      	adds	r3, #50	@ 0x32
 8004a1c:	4a15      	ldr	r2, [pc, #84]	@ (8004a74 <UART_SetConfig+0x118>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a28:	4419      	add	r1, r3
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <UART_SetConfig+0x118>)
 8004a42:	fba3 0302 	umull	r0, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2064      	movs	r0, #100	@ 0x64
 8004a4a:	fb00 f303 	mul.w	r3, r0, r3
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	3332      	adds	r3, #50	@ 0x32
 8004a54:	4a07      	ldr	r2, [pc, #28]	@ (8004a74 <UART_SetConfig+0x118>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	440a      	add	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40013800 	.word	0x40013800
 8004a74:	51eb851f 	.word	0x51eb851f

08004a78 <atoi>:
 8004a78:	220a      	movs	r2, #10
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	f000 b87a 	b.w	8004b74 <strtol>

08004a80 <_strtol_l.isra.0>:
 8004a80:	2b24      	cmp	r3, #36	@ 0x24
 8004a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a86:	4686      	mov	lr, r0
 8004a88:	4690      	mov	r8, r2
 8004a8a:	d801      	bhi.n	8004a90 <_strtol_l.isra.0+0x10>
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <_strtol_l.isra.0+0x1e>
 8004a90:	f000 fe5c 	bl	800574c <__errno>
 8004a94:	2316      	movs	r3, #22
 8004a96:	6003      	str	r3, [r0, #0]
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9e:	460d      	mov	r5, r1
 8004aa0:	4833      	ldr	r0, [pc, #204]	@ (8004b70 <_strtol_l.isra.0+0xf0>)
 8004aa2:	462a      	mov	r2, r5
 8004aa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aa8:	5d06      	ldrb	r6, [r0, r4]
 8004aaa:	f016 0608 	ands.w	r6, r6, #8
 8004aae:	d1f8      	bne.n	8004aa2 <_strtol_l.isra.0+0x22>
 8004ab0:	2c2d      	cmp	r4, #45	@ 0x2d
 8004ab2:	d110      	bne.n	8004ad6 <_strtol_l.isra.0+0x56>
 8004ab4:	2601      	movs	r6, #1
 8004ab6:	782c      	ldrb	r4, [r5, #0]
 8004ab8:	1c95      	adds	r5, r2, #2
 8004aba:	f033 0210 	bics.w	r2, r3, #16
 8004abe:	d115      	bne.n	8004aec <_strtol_l.isra.0+0x6c>
 8004ac0:	2c30      	cmp	r4, #48	@ 0x30
 8004ac2:	d10d      	bne.n	8004ae0 <_strtol_l.isra.0+0x60>
 8004ac4:	782a      	ldrb	r2, [r5, #0]
 8004ac6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004aca:	2a58      	cmp	r2, #88	@ 0x58
 8004acc:	d108      	bne.n	8004ae0 <_strtol_l.isra.0+0x60>
 8004ace:	786c      	ldrb	r4, [r5, #1]
 8004ad0:	3502      	adds	r5, #2
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	e00a      	b.n	8004aec <_strtol_l.isra.0+0x6c>
 8004ad6:	2c2b      	cmp	r4, #43	@ 0x2b
 8004ad8:	bf04      	itt	eq
 8004ada:	782c      	ldrbeq	r4, [r5, #0]
 8004adc:	1c95      	addeq	r5, r2, #2
 8004ade:	e7ec      	b.n	8004aba <_strtol_l.isra.0+0x3a>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f6      	bne.n	8004ad2 <_strtol_l.isra.0+0x52>
 8004ae4:	2c30      	cmp	r4, #48	@ 0x30
 8004ae6:	bf14      	ite	ne
 8004ae8:	230a      	movne	r3, #10
 8004aea:	2308      	moveq	r3, #8
 8004aec:	2200      	movs	r2, #0
 8004aee:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004af2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004af6:	fbbc f9f3 	udiv	r9, ip, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	fb03 ca19 	mls	sl, r3, r9, ip
 8004b00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004b04:	2f09      	cmp	r7, #9
 8004b06:	d80f      	bhi.n	8004b28 <_strtol_l.isra.0+0xa8>
 8004b08:	463c      	mov	r4, r7
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	dd1b      	ble.n	8004b46 <_strtol_l.isra.0+0xc6>
 8004b0e:	1c57      	adds	r7, r2, #1
 8004b10:	d007      	beq.n	8004b22 <_strtol_l.isra.0+0xa2>
 8004b12:	4581      	cmp	r9, r0
 8004b14:	d314      	bcc.n	8004b40 <_strtol_l.isra.0+0xc0>
 8004b16:	d101      	bne.n	8004b1c <_strtol_l.isra.0+0x9c>
 8004b18:	45a2      	cmp	sl, r4
 8004b1a:	db11      	blt.n	8004b40 <_strtol_l.isra.0+0xc0>
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	fb00 4003 	mla	r0, r0, r3, r4
 8004b22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b26:	e7eb      	b.n	8004b00 <_strtol_l.isra.0+0x80>
 8004b28:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b2c:	2f19      	cmp	r7, #25
 8004b2e:	d801      	bhi.n	8004b34 <_strtol_l.isra.0+0xb4>
 8004b30:	3c37      	subs	r4, #55	@ 0x37
 8004b32:	e7ea      	b.n	8004b0a <_strtol_l.isra.0+0x8a>
 8004b34:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004b38:	2f19      	cmp	r7, #25
 8004b3a:	d804      	bhi.n	8004b46 <_strtol_l.isra.0+0xc6>
 8004b3c:	3c57      	subs	r4, #87	@ 0x57
 8004b3e:	e7e4      	b.n	8004b0a <_strtol_l.isra.0+0x8a>
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	e7ed      	b.n	8004b22 <_strtol_l.isra.0+0xa2>
 8004b46:	1c53      	adds	r3, r2, #1
 8004b48:	d108      	bne.n	8004b5c <_strtol_l.isra.0+0xdc>
 8004b4a:	2322      	movs	r3, #34	@ 0x22
 8004b4c:	4660      	mov	r0, ip
 8004b4e:	f8ce 3000 	str.w	r3, [lr]
 8004b52:	f1b8 0f00 	cmp.w	r8, #0
 8004b56:	d0a0      	beq.n	8004a9a <_strtol_l.isra.0+0x1a>
 8004b58:	1e69      	subs	r1, r5, #1
 8004b5a:	e006      	b.n	8004b6a <_strtol_l.isra.0+0xea>
 8004b5c:	b106      	cbz	r6, 8004b60 <_strtol_l.isra.0+0xe0>
 8004b5e:	4240      	negs	r0, r0
 8004b60:	f1b8 0f00 	cmp.w	r8, #0
 8004b64:	d099      	beq.n	8004a9a <_strtol_l.isra.0+0x1a>
 8004b66:	2a00      	cmp	r2, #0
 8004b68:	d1f6      	bne.n	8004b58 <_strtol_l.isra.0+0xd8>
 8004b6a:	f8c8 1000 	str.w	r1, [r8]
 8004b6e:	e794      	b.n	8004a9a <_strtol_l.isra.0+0x1a>
 8004b70:	080087ef 	.word	0x080087ef

08004b74 <strtol>:
 8004b74:	4613      	mov	r3, r2
 8004b76:	460a      	mov	r2, r1
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4802      	ldr	r0, [pc, #8]	@ (8004b84 <strtol+0x10>)
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f7ff bf7f 	b.w	8004a80 <_strtol_l.isra.0>
 8004b82:	bf00      	nop
 8004b84:	20000020 	.word	0x20000020

08004b88 <__cvt>:
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8e:	461d      	mov	r5, r3
 8004b90:	bfbb      	ittet	lt
 8004b92:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004b96:	461d      	movlt	r5, r3
 8004b98:	2300      	movge	r3, #0
 8004b9a:	232d      	movlt	r3, #45	@ 0x2d
 8004b9c:	b088      	sub	sp, #32
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	bfb8      	it	lt
 8004ba2:	4614      	movlt	r4, r2
 8004ba4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ba6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ba8:	7013      	strb	r3, [r2, #0]
 8004baa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004bac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004bb0:	f023 0820 	bic.w	r8, r3, #32
 8004bb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bb8:	d005      	beq.n	8004bc6 <__cvt+0x3e>
 8004bba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004bbe:	d100      	bne.n	8004bc2 <__cvt+0x3a>
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e000      	b.n	8004bc8 <__cvt+0x40>
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	aa07      	add	r2, sp, #28
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	aa06      	add	r2, sp, #24
 8004bce:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004bd2:	e9cd 3600 	strd	r3, r6, [sp]
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f000 fe7d 	bl	80058d8 <_dtoa_r>
 8004bde:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004be2:	4607      	mov	r7, r0
 8004be4:	d119      	bne.n	8004c1a <__cvt+0x92>
 8004be6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d50e      	bpl.n	8004c0a <__cvt+0x82>
 8004bec:	eb00 0906 	add.w	r9, r0, r6
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8004bfc:	b108      	cbz	r0, 8004c02 <__cvt+0x7a>
 8004bfe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c02:	2230      	movs	r2, #48	@ 0x30
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	454b      	cmp	r3, r9
 8004c08:	d31e      	bcc.n	8004c48 <__cvt+0xc0>
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	9b07      	ldr	r3, [sp, #28]
 8004c0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004c10:	1bdb      	subs	r3, r3, r7
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	b008      	add	sp, #32
 8004c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c1e:	eb00 0906 	add.w	r9, r0, r6
 8004c22:	d1e5      	bne.n	8004bf0 <__cvt+0x68>
 8004c24:	7803      	ldrb	r3, [r0, #0]
 8004c26:	2b30      	cmp	r3, #48	@ 0x30
 8004c28:	d10a      	bne.n	8004c40 <__cvt+0xb8>
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4620      	mov	r0, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	f7fb feb9 	bl	80009a8 <__aeabi_dcmpeq>
 8004c36:	b918      	cbnz	r0, 8004c40 <__cvt+0xb8>
 8004c38:	f1c6 0601 	rsb	r6, r6, #1
 8004c3c:	f8ca 6000 	str.w	r6, [sl]
 8004c40:	f8da 3000 	ldr.w	r3, [sl]
 8004c44:	4499      	add	r9, r3
 8004c46:	e7d3      	b.n	8004bf0 <__cvt+0x68>
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	9107      	str	r1, [sp, #28]
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e7d9      	b.n	8004c04 <__cvt+0x7c>

08004c50 <__exponent>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	2900      	cmp	r1, #0
 8004c54:	bfb6      	itet	lt
 8004c56:	232d      	movlt	r3, #45	@ 0x2d
 8004c58:	232b      	movge	r3, #43	@ 0x2b
 8004c5a:	4249      	neglt	r1, r1
 8004c5c:	2909      	cmp	r1, #9
 8004c5e:	7002      	strb	r2, [r0, #0]
 8004c60:	7043      	strb	r3, [r0, #1]
 8004c62:	dd29      	ble.n	8004cb8 <__exponent+0x68>
 8004c64:	f10d 0307 	add.w	r3, sp, #7
 8004c68:	461d      	mov	r5, r3
 8004c6a:	270a      	movs	r7, #10
 8004c6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004c70:	461a      	mov	r2, r3
 8004c72:	fb07 1416 	mls	r4, r7, r6, r1
 8004c76:	3430      	adds	r4, #48	@ 0x30
 8004c78:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	2c63      	cmp	r4, #99	@ 0x63
 8004c80:	4631      	mov	r1, r6
 8004c82:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c86:	dcf1      	bgt.n	8004c6c <__exponent+0x1c>
 8004c88:	3130      	adds	r1, #48	@ 0x30
 8004c8a:	1e94      	subs	r4, r2, #2
 8004c8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c90:	4623      	mov	r3, r4
 8004c92:	1c41      	adds	r1, r0, #1
 8004c94:	42ab      	cmp	r3, r5
 8004c96:	d30a      	bcc.n	8004cae <__exponent+0x5e>
 8004c98:	f10d 0309 	add.w	r3, sp, #9
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	42ac      	cmp	r4, r5
 8004ca0:	bf88      	it	hi
 8004ca2:	2300      	movhi	r3, #0
 8004ca4:	3302      	adds	r3, #2
 8004ca6:	4403      	add	r3, r0
 8004ca8:	1a18      	subs	r0, r3, r0
 8004caa:	b003      	add	sp, #12
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004cb2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004cb6:	e7ed      	b.n	8004c94 <__exponent+0x44>
 8004cb8:	2330      	movs	r3, #48	@ 0x30
 8004cba:	3130      	adds	r1, #48	@ 0x30
 8004cbc:	7083      	strb	r3, [r0, #2]
 8004cbe:	70c1      	strb	r1, [r0, #3]
 8004cc0:	1d03      	adds	r3, r0, #4
 8004cc2:	e7f1      	b.n	8004ca8 <__exponent+0x58>

08004cc4 <_printf_float>:
 8004cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc8:	b091      	sub	sp, #68	@ 0x44
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004cd0:	4616      	mov	r6, r2
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	4605      	mov	r5, r0
 8004cd6:	f000 fcef 	bl	80056b8 <_localeconv_r>
 8004cda:	6803      	ldr	r3, [r0, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	9308      	str	r3, [sp, #32]
 8004ce0:	f7fb fa36 	bl	8000150 <strlen>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cec:	9009      	str	r0, [sp, #36]	@ 0x24
 8004cee:	3307      	adds	r3, #7
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	f103 0208 	add.w	r2, r3, #8
 8004cf8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004cfc:	f8d4 b000 	ldr.w	fp, [r4]
 8004d00:	f8c8 2000 	str.w	r2, [r8]
 8004d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8004f90 <_printf_float+0x2cc>)
 8004d20:	f7fb fe74 	bl	8000a0c <__aeabi_dcmpun>
 8004d24:	bb70      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	4b98      	ldr	r3, [pc, #608]	@ (8004f90 <_printf_float+0x2cc>)
 8004d30:	f7fb fe4e 	bl	80009d0 <__aeabi_dcmple>
 8004d34:	bb30      	cbnz	r0, 8004d84 <_printf_float+0xc0>
 8004d36:	2200      	movs	r2, #0
 8004d38:	2300      	movs	r3, #0
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb fe3d 	bl	80009bc <__aeabi_dcmplt>
 8004d42:	b110      	cbz	r0, 8004d4a <_printf_float+0x86>
 8004d44:	232d      	movs	r3, #45	@ 0x2d
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d4a:	4a92      	ldr	r2, [pc, #584]	@ (8004f94 <_printf_float+0x2d0>)
 8004d4c:	4b92      	ldr	r3, [pc, #584]	@ (8004f98 <_printf_float+0x2d4>)
 8004d4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d52:	bf8c      	ite	hi
 8004d54:	4690      	movhi	r8, r2
 8004d56:	4698      	movls	r8, r3
 8004d58:	2303      	movs	r3, #3
 8004d5a:	f04f 0900 	mov.w	r9, #0
 8004d5e:	6123      	str	r3, [r4, #16]
 8004d60:	f02b 0304 	bic.w	r3, fp, #4
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	4633      	mov	r3, r6
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	9700      	str	r7, [sp, #0]
 8004d6e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004d70:	f000 f9d4 	bl	800511c <_printf_common>
 8004d74:	3001      	adds	r0, #1
 8004d76:	f040 8090 	bne.w	8004e9a <_printf_float+0x1d6>
 8004d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7e:	b011      	add	sp, #68	@ 0x44
 8004d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fe3e 	bl	8000a0c <__aeabi_dcmpun>
 8004d90:	b148      	cbz	r0, 8004da6 <_printf_float+0xe2>
 8004d92:	464b      	mov	r3, r9
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bfb8      	it	lt
 8004d98:	232d      	movlt	r3, #45	@ 0x2d
 8004d9a:	4a80      	ldr	r2, [pc, #512]	@ (8004f9c <_printf_float+0x2d8>)
 8004d9c:	bfb8      	it	lt
 8004d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004da2:	4b7f      	ldr	r3, [pc, #508]	@ (8004fa0 <_printf_float+0x2dc>)
 8004da4:	e7d3      	b.n	8004d4e <_printf_float+0x8a>
 8004da6:	6863      	ldr	r3, [r4, #4]
 8004da8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	d13f      	bne.n	8004e30 <_printf_float+0x16c>
 8004db0:	2306      	movs	r3, #6
 8004db2:	6063      	str	r3, [r4, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	9206      	str	r2, [sp, #24]
 8004dbe:	aa0e      	add	r2, sp, #56	@ 0x38
 8004dc0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004dc4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004dc6:	9203      	str	r2, [sp, #12]
 8004dc8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004dcc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	464b      	mov	r3, r9
 8004dda:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ddc:	f7ff fed4 	bl	8004b88 <__cvt>
 8004de0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004de2:	4680      	mov	r8, r0
 8004de4:	2947      	cmp	r1, #71	@ 0x47
 8004de6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004de8:	d128      	bne.n	8004e3c <_printf_float+0x178>
 8004dea:	1cc8      	adds	r0, r1, #3
 8004dec:	db02      	blt.n	8004df4 <_printf_float+0x130>
 8004dee:	6863      	ldr	r3, [r4, #4]
 8004df0:	4299      	cmp	r1, r3
 8004df2:	dd40      	ble.n	8004e76 <_printf_float+0x1b2>
 8004df4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004df8:	fa5f fa8a 	uxtb.w	sl, sl
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	3901      	subs	r1, #1
 8004e00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e04:	910d      	str	r1, [sp, #52]	@ 0x34
 8004e06:	f7ff ff23 	bl	8004c50 <__exponent>
 8004e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	1813      	adds	r3, r2, r0
 8004e10:	2a01      	cmp	r2, #1
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	dc02      	bgt.n	8004e1c <_printf_float+0x158>
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	07d2      	lsls	r2, r2, #31
 8004e1a:	d501      	bpl.n	8004e20 <_printf_float+0x15c>
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d09e      	beq.n	8004d66 <_printf_float+0xa2>
 8004e28:	232d      	movs	r3, #45	@ 0x2d
 8004e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e2e:	e79a      	b.n	8004d66 <_printf_float+0xa2>
 8004e30:	2947      	cmp	r1, #71	@ 0x47
 8004e32:	d1bf      	bne.n	8004db4 <_printf_float+0xf0>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1bd      	bne.n	8004db4 <_printf_float+0xf0>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e7ba      	b.n	8004db2 <_printf_float+0xee>
 8004e3c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e40:	d9dc      	bls.n	8004dfc <_printf_float+0x138>
 8004e42:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e46:	d118      	bne.n	8004e7a <_printf_float+0x1b6>
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	dd0b      	ble.n	8004e66 <_printf_float+0x1a2>
 8004e4e:	6121      	str	r1, [r4, #16]
 8004e50:	b913      	cbnz	r3, 8004e58 <_printf_float+0x194>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	07d0      	lsls	r0, r2, #31
 8004e56:	d502      	bpl.n	8004e5e <_printf_float+0x19a>
 8004e58:	3301      	adds	r3, #1
 8004e5a:	440b      	add	r3, r1
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	f04f 0900 	mov.w	r9, #0
 8004e62:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e64:	e7dc      	b.n	8004e20 <_printf_float+0x15c>
 8004e66:	b913      	cbnz	r3, 8004e6e <_printf_float+0x1aa>
 8004e68:	6822      	ldr	r2, [r4, #0]
 8004e6a:	07d2      	lsls	r2, r2, #31
 8004e6c:	d501      	bpl.n	8004e72 <_printf_float+0x1ae>
 8004e6e:	3302      	adds	r3, #2
 8004e70:	e7f4      	b.n	8004e5c <_printf_float+0x198>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e7f2      	b.n	8004e5c <_printf_float+0x198>
 8004e76:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	db05      	blt.n	8004e8c <_printf_float+0x1c8>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	6121      	str	r1, [r4, #16]
 8004e84:	07d8      	lsls	r0, r3, #31
 8004e86:	d5ea      	bpl.n	8004e5e <_printf_float+0x19a>
 8004e88:	1c4b      	adds	r3, r1, #1
 8004e8a:	e7e7      	b.n	8004e5c <_printf_float+0x198>
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	bfcc      	ite	gt
 8004e90:	2201      	movgt	r2, #1
 8004e92:	f1c1 0202 	rsble	r2, r1, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	e7e0      	b.n	8004e5c <_printf_float+0x198>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	055a      	lsls	r2, r3, #21
 8004e9e:	d407      	bmi.n	8004eb0 <_printf_float+0x1ec>
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	4642      	mov	r2, r8
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d12b      	bne.n	8004f06 <_printf_float+0x242>
 8004eae:	e764      	b.n	8004d7a <_printf_float+0xb6>
 8004eb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004eb4:	f240 80dc 	bls.w	8005070 <_printf_float+0x3ac>
 8004eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f7fb fd72 	bl	80009a8 <__aeabi_dcmpeq>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d033      	beq.n	8004f30 <_printf_float+0x26c>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4631      	mov	r1, r6
 8004ecc:	4628      	mov	r0, r5
 8004ece:	4a35      	ldr	r2, [pc, #212]	@ (8004fa4 <_printf_float+0x2e0>)
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f af51 	beq.w	8004d7a <_printf_float+0xb6>
 8004ed8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004edc:	4543      	cmp	r3, r8
 8004ede:	db02      	blt.n	8004ee6 <_printf_float+0x222>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07d8      	lsls	r0, r3, #31
 8004ee4:	d50f      	bpl.n	8004f06 <_printf_float+0x242>
 8004ee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f af42 	beq.w	8004d7a <_printf_float+0xb6>
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	f108 38ff 	add.w	r8, r8, #4294967295
 8004efe:	f104 0a1a 	add.w	sl, r4, #26
 8004f02:	45c8      	cmp	r8, r9
 8004f04:	dc09      	bgt.n	8004f1a <_printf_float+0x256>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	079b      	lsls	r3, r3, #30
 8004f0a:	f100 8102 	bmi.w	8005112 <_printf_float+0x44e>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e731      	b.n	8004d7e <_printf_float+0xba>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f af28 	beq.w	8004d7a <_printf_float+0xb6>
 8004f2a:	f109 0901 	add.w	r9, r9, #1
 8004f2e:	e7e8      	b.n	8004f02 <_printf_float+0x23e>
 8004f30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dc38      	bgt.n	8004fa8 <_printf_float+0x2e4>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4631      	mov	r1, r6
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	4a19      	ldr	r2, [pc, #100]	@ (8004fa4 <_printf_float+0x2e0>)
 8004f3e:	47b8      	blx	r7
 8004f40:	3001      	adds	r0, #1
 8004f42:	f43f af1a 	beq.w	8004d7a <_printf_float+0xb6>
 8004f46:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004f4a:	ea59 0303 	orrs.w	r3, r9, r3
 8004f4e:	d102      	bne.n	8004f56 <_printf_float+0x292>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07d9      	lsls	r1, r3, #31
 8004f54:	d5d7      	bpl.n	8004f06 <_printf_float+0x242>
 8004f56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b8      	blx	r7
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f af0a 	beq.w	8004d7a <_printf_float+0xb6>
 8004f66:	f04f 0a00 	mov.w	sl, #0
 8004f6a:	f104 0b1a 	add.w	fp, r4, #26
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f70:	425b      	negs	r3, r3
 8004f72:	4553      	cmp	r3, sl
 8004f74:	dc01      	bgt.n	8004f7a <_printf_float+0x2b6>
 8004f76:	464b      	mov	r3, r9
 8004f78:	e793      	b.n	8004ea2 <_printf_float+0x1de>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	465a      	mov	r2, fp
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f aef8 	beq.w	8004d7a <_printf_float+0xb6>
 8004f8a:	f10a 0a01 	add.w	sl, sl, #1
 8004f8e:	e7ee      	b.n	8004f6e <_printf_float+0x2aa>
 8004f90:	7fefffff 	.word	0x7fefffff
 8004f94:	080088f3 	.word	0x080088f3
 8004f98:	080088ef 	.word	0x080088ef
 8004f9c:	080088fb 	.word	0x080088fb
 8004fa0:	080088f7 	.word	0x080088f7
 8004fa4:	080088ff 	.word	0x080088ff
 8004fa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004faa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004fae:	4553      	cmp	r3, sl
 8004fb0:	bfa8      	it	ge
 8004fb2:	4653      	movge	r3, sl
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	4699      	mov	r9, r3
 8004fb8:	dc36      	bgt.n	8005028 <_printf_float+0x364>
 8004fba:	f04f 0b00 	mov.w	fp, #0
 8004fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fc2:	f104 021a 	add.w	r2, r4, #26
 8004fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fca:	eba3 0309 	sub.w	r3, r3, r9
 8004fce:	455b      	cmp	r3, fp
 8004fd0:	dc31      	bgt.n	8005036 <_printf_float+0x372>
 8004fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fd4:	459a      	cmp	sl, r3
 8004fd6:	dc3a      	bgt.n	800504e <_printf_float+0x38a>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	07da      	lsls	r2, r3, #31
 8004fdc:	d437      	bmi.n	800504e <_printf_float+0x38a>
 8004fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fe0:	ebaa 0903 	sub.w	r9, sl, r3
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fe6:	ebaa 0303 	sub.w	r3, sl, r3
 8004fea:	4599      	cmp	r9, r3
 8004fec:	bfa8      	it	ge
 8004fee:	4699      	movge	r9, r3
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	dc33      	bgt.n	800505e <_printf_float+0x39a>
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ffe:	f104 0b1a 	add.w	fp, r4, #26
 8005002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005004:	ebaa 0303 	sub.w	r3, sl, r3
 8005008:	eba3 0309 	sub.w	r3, r3, r9
 800500c:	4543      	cmp	r3, r8
 800500e:	f77f af7a 	ble.w	8004f06 <_printf_float+0x242>
 8005012:	2301      	movs	r3, #1
 8005014:	465a      	mov	r2, fp
 8005016:	4631      	mov	r1, r6
 8005018:	4628      	mov	r0, r5
 800501a:	47b8      	blx	r7
 800501c:	3001      	adds	r0, #1
 800501e:	f43f aeac 	beq.w	8004d7a <_printf_float+0xb6>
 8005022:	f108 0801 	add.w	r8, r8, #1
 8005026:	e7ec      	b.n	8005002 <_printf_float+0x33e>
 8005028:	4642      	mov	r2, r8
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	d1c2      	bne.n	8004fba <_printf_float+0x2f6>
 8005034:	e6a1      	b.n	8004d7a <_printf_float+0xb6>
 8005036:	2301      	movs	r3, #1
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	920a      	str	r2, [sp, #40]	@ 0x28
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f ae9a 	beq.w	8004d7a <_printf_float+0xb6>
 8005046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005048:	f10b 0b01 	add.w	fp, fp, #1
 800504c:	e7bb      	b.n	8004fc6 <_printf_float+0x302>
 800504e:	4631      	mov	r1, r6
 8005050:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005054:	4628      	mov	r0, r5
 8005056:	47b8      	blx	r7
 8005058:	3001      	adds	r0, #1
 800505a:	d1c0      	bne.n	8004fde <_printf_float+0x31a>
 800505c:	e68d      	b.n	8004d7a <_printf_float+0xb6>
 800505e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005060:	464b      	mov	r3, r9
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	4442      	add	r2, r8
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	d1c3      	bne.n	8004ff6 <_printf_float+0x332>
 800506e:	e684      	b.n	8004d7a <_printf_float+0xb6>
 8005070:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005074:	f1ba 0f01 	cmp.w	sl, #1
 8005078:	dc01      	bgt.n	800507e <_printf_float+0x3ba>
 800507a:	07db      	lsls	r3, r3, #31
 800507c:	d536      	bpl.n	80050ec <_printf_float+0x428>
 800507e:	2301      	movs	r3, #1
 8005080:	4642      	mov	r2, r8
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	f43f ae76 	beq.w	8004d7a <_printf_float+0xb6>
 800508e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	f43f ae6e 	beq.w	8004d7a <_printf_float+0xb6>
 800509e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050a2:	2200      	movs	r2, #0
 80050a4:	2300      	movs	r3, #0
 80050a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050aa:	f7fb fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80050ae:	b9c0      	cbnz	r0, 80050e2 <_printf_float+0x41e>
 80050b0:	4653      	mov	r3, sl
 80050b2:	f108 0201 	add.w	r2, r8, #1
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	d10c      	bne.n	80050da <_printf_float+0x416>
 80050c0:	e65b      	b.n	8004d7a <_printf_float+0xb6>
 80050c2:	2301      	movs	r3, #1
 80050c4:	465a      	mov	r2, fp
 80050c6:	4631      	mov	r1, r6
 80050c8:	4628      	mov	r0, r5
 80050ca:	47b8      	blx	r7
 80050cc:	3001      	adds	r0, #1
 80050ce:	f43f ae54 	beq.w	8004d7a <_printf_float+0xb6>
 80050d2:	f108 0801 	add.w	r8, r8, #1
 80050d6:	45d0      	cmp	r8, sl
 80050d8:	dbf3      	blt.n	80050c2 <_printf_float+0x3fe>
 80050da:	464b      	mov	r3, r9
 80050dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80050e0:	e6e0      	b.n	8004ea4 <_printf_float+0x1e0>
 80050e2:	f04f 0800 	mov.w	r8, #0
 80050e6:	f104 0b1a 	add.w	fp, r4, #26
 80050ea:	e7f4      	b.n	80050d6 <_printf_float+0x412>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4642      	mov	r2, r8
 80050f0:	e7e1      	b.n	80050b6 <_printf_float+0x3f2>
 80050f2:	2301      	movs	r3, #1
 80050f4:	464a      	mov	r2, r9
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f ae3c 	beq.w	8004d7a <_printf_float+0xb6>
 8005102:	f108 0801 	add.w	r8, r8, #1
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800510a:	1a5b      	subs	r3, r3, r1
 800510c:	4543      	cmp	r3, r8
 800510e:	dcf0      	bgt.n	80050f2 <_printf_float+0x42e>
 8005110:	e6fd      	b.n	8004f0e <_printf_float+0x24a>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	f104 0919 	add.w	r9, r4, #25
 800511a:	e7f4      	b.n	8005106 <_printf_float+0x442>

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4698      	mov	r8, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	4607      	mov	r7, r0
 800512a:	4293      	cmp	r3, r2
 800512c:	bfb8      	it	lt
 800512e:	4613      	movlt	r3, r2
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005136:	460c      	mov	r4, r1
 8005138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc2b      	bgt.n	80051bc <_printf_common+0xa0>
 8005164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	3b00      	subs	r3, #0
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d430      	bmi.n	80051d6 <_printf_common+0xba>
 8005174:	4641      	mov	r1, r8
 8005176:	4638      	mov	r0, r7
 8005178:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800517c:	47c8      	blx	r9
 800517e:	3001      	adds	r0, #1
 8005180:	d023      	beq.n	80051ca <_printf_common+0xae>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf14      	ite	ne
 800518e:	2500      	movne	r5, #0
 8005190:	6833      	ldreq	r3, [r6, #0]
 8005192:	f04f 0600 	mov.w	r6, #0
 8005196:	bf08      	it	eq
 8005198:	68e5      	ldreq	r5, [r4, #12]
 800519a:	f104 041a 	add.w	r4, r4, #26
 800519e:	bf08      	it	eq
 80051a0:	1aed      	subeq	r5, r5, r3
 80051a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80051a6:	bf08      	it	eq
 80051a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051ac:	4293      	cmp	r3, r2
 80051ae:	bfc4      	itt	gt
 80051b0:	1a9b      	subgt	r3, r3, r2
 80051b2:	18ed      	addgt	r5, r5, r3
 80051b4:	42b5      	cmp	r5, r6
 80051b6:	d11a      	bne.n	80051ee <_printf_common+0xd2>
 80051b8:	2000      	movs	r0, #0
 80051ba:	e008      	b.n	80051ce <_printf_common+0xb2>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4641      	mov	r1, r8
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c8      	blx	r9
 80051c6:	3001      	adds	r0, #1
 80051c8:	d103      	bne.n	80051d2 <_printf_common+0xb6>
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d2:	3501      	adds	r5, #1
 80051d4:	e7c1      	b.n	800515a <_printf_common+0x3e>
 80051d6:	2030      	movs	r0, #48	@ 0x30
 80051d8:	18e1      	adds	r1, r4, r3
 80051da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051e4:	4422      	add	r2, r4
 80051e6:	3302      	adds	r3, #2
 80051e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051ec:	e7c2      	b.n	8005174 <_printf_common+0x58>
 80051ee:	2301      	movs	r3, #1
 80051f0:	4622      	mov	r2, r4
 80051f2:	4641      	mov	r1, r8
 80051f4:	4638      	mov	r0, r7
 80051f6:	47c8      	blx	r9
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0e6      	beq.n	80051ca <_printf_common+0xae>
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7d9      	b.n	80051b4 <_printf_common+0x98>

08005200 <_printf_i>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	7e0f      	ldrb	r7, [r1, #24]
 8005206:	4691      	mov	r9, r2
 8005208:	2f78      	cmp	r7, #120	@ 0x78
 800520a:	4680      	mov	r8, r0
 800520c:	460c      	mov	r4, r1
 800520e:	469a      	mov	sl, r3
 8005210:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005212:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005216:	d807      	bhi.n	8005228 <_printf_i+0x28>
 8005218:	2f62      	cmp	r7, #98	@ 0x62
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x32>
 800521c:	2f00      	cmp	r7, #0
 800521e:	f000 80d1 	beq.w	80053c4 <_printf_i+0x1c4>
 8005222:	2f58      	cmp	r7, #88	@ 0x58
 8005224:	f000 80b8 	beq.w	8005398 <_printf_i+0x198>
 8005228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800522c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005230:	e03a      	b.n	80052a8 <_printf_i+0xa8>
 8005232:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005236:	2b15      	cmp	r3, #21
 8005238:	d8f6      	bhi.n	8005228 <_printf_i+0x28>
 800523a:	a101      	add	r1, pc, #4	@ (adr r1, 8005240 <_printf_i+0x40>)
 800523c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005240:	08005299 	.word	0x08005299
 8005244:	080052ad 	.word	0x080052ad
 8005248:	08005229 	.word	0x08005229
 800524c:	08005229 	.word	0x08005229
 8005250:	08005229 	.word	0x08005229
 8005254:	08005229 	.word	0x08005229
 8005258:	080052ad 	.word	0x080052ad
 800525c:	08005229 	.word	0x08005229
 8005260:	08005229 	.word	0x08005229
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	080053ab 	.word	0x080053ab
 8005270:	080052d7 	.word	0x080052d7
 8005274:	08005365 	.word	0x08005365
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053cd 	.word	0x080053cd
 8005284:	08005229 	.word	0x08005229
 8005288:	080052d7 	.word	0x080052d7
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	0800536d 	.word	0x0800536d
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6032      	str	r2, [r6, #0]
 80052a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052a8:	2301      	movs	r3, #1
 80052aa:	e09c      	b.n	80053e6 <_printf_i+0x1e6>
 80052ac:	6833      	ldr	r3, [r6, #0]
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	1d19      	adds	r1, r3, #4
 80052b2:	6031      	str	r1, [r6, #0]
 80052b4:	0606      	lsls	r6, r0, #24
 80052b6:	d501      	bpl.n	80052bc <_printf_i+0xbc>
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	e003      	b.n	80052c4 <_printf_i+0xc4>
 80052bc:	0645      	lsls	r5, r0, #25
 80052be:	d5fb      	bpl.n	80052b8 <_printf_i+0xb8>
 80052c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	da03      	bge.n	80052d0 <_printf_i+0xd0>
 80052c8:	232d      	movs	r3, #45	@ 0x2d
 80052ca:	426d      	negs	r5, r5
 80052cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d0:	230a      	movs	r3, #10
 80052d2:	4858      	ldr	r0, [pc, #352]	@ (8005434 <_printf_i+0x234>)
 80052d4:	e011      	b.n	80052fa <_printf_i+0xfa>
 80052d6:	6821      	ldr	r1, [r4, #0]
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	0608      	lsls	r0, r1, #24
 80052dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80052e0:	d402      	bmi.n	80052e8 <_printf_i+0xe8>
 80052e2:	0649      	lsls	r1, r1, #25
 80052e4:	bf48      	it	mi
 80052e6:	b2ad      	uxthmi	r5, r5
 80052e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	bf14      	ite	ne
 80052ee:	230a      	movne	r3, #10
 80052f0:	2308      	moveq	r3, #8
 80052f2:	4850      	ldr	r0, [pc, #320]	@ (8005434 <_printf_i+0x234>)
 80052f4:	2100      	movs	r1, #0
 80052f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052fa:	6866      	ldr	r6, [r4, #4]
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	60a6      	str	r6, [r4, #8]
 8005300:	db05      	blt.n	800530e <_printf_i+0x10e>
 8005302:	6821      	ldr	r1, [r4, #0]
 8005304:	432e      	orrs	r6, r5
 8005306:	f021 0104 	bic.w	r1, r1, #4
 800530a:	6021      	str	r1, [r4, #0]
 800530c:	d04b      	beq.n	80053a6 <_printf_i+0x1a6>
 800530e:	4616      	mov	r6, r2
 8005310:	fbb5 f1f3 	udiv	r1, r5, r3
 8005314:	fb03 5711 	mls	r7, r3, r1, r5
 8005318:	5dc7      	ldrb	r7, [r0, r7]
 800531a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800531e:	462f      	mov	r7, r5
 8005320:	42bb      	cmp	r3, r7
 8005322:	460d      	mov	r5, r1
 8005324:	d9f4      	bls.n	8005310 <_printf_i+0x110>
 8005326:	2b08      	cmp	r3, #8
 8005328:	d10b      	bne.n	8005342 <_printf_i+0x142>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	07df      	lsls	r7, r3, #31
 800532e:	d508      	bpl.n	8005342 <_printf_i+0x142>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6861      	ldr	r1, [r4, #4]
 8005334:	4299      	cmp	r1, r3
 8005336:	bfde      	ittt	le
 8005338:	2330      	movle	r3, #48	@ 0x30
 800533a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800533e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005342:	1b92      	subs	r2, r2, r6
 8005344:	6122      	str	r2, [r4, #16]
 8005346:	464b      	mov	r3, r9
 8005348:	4621      	mov	r1, r4
 800534a:	4640      	mov	r0, r8
 800534c:	f8cd a000 	str.w	sl, [sp]
 8005350:	aa03      	add	r2, sp, #12
 8005352:	f7ff fee3 	bl	800511c <_printf_common>
 8005356:	3001      	adds	r0, #1
 8005358:	d14a      	bne.n	80053f0 <_printf_i+0x1f0>
 800535a:	f04f 30ff 	mov.w	r0, #4294967295
 800535e:	b004      	add	sp, #16
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	f043 0320 	orr.w	r3, r3, #32
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	2778      	movs	r7, #120	@ 0x78
 800536e:	4832      	ldr	r0, [pc, #200]	@ (8005438 <_printf_i+0x238>)
 8005370:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	6831      	ldr	r1, [r6, #0]
 8005378:	061f      	lsls	r7, r3, #24
 800537a:	f851 5b04 	ldr.w	r5, [r1], #4
 800537e:	d402      	bmi.n	8005386 <_printf_i+0x186>
 8005380:	065f      	lsls	r7, r3, #25
 8005382:	bf48      	it	mi
 8005384:	b2ad      	uxthmi	r5, r5
 8005386:	6031      	str	r1, [r6, #0]
 8005388:	07d9      	lsls	r1, r3, #31
 800538a:	bf44      	itt	mi
 800538c:	f043 0320 	orrmi.w	r3, r3, #32
 8005390:	6023      	strmi	r3, [r4, #0]
 8005392:	b11d      	cbz	r5, 800539c <_printf_i+0x19c>
 8005394:	2310      	movs	r3, #16
 8005396:	e7ad      	b.n	80052f4 <_printf_i+0xf4>
 8005398:	4826      	ldr	r0, [pc, #152]	@ (8005434 <_printf_i+0x234>)
 800539a:	e7e9      	b.n	8005370 <_printf_i+0x170>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	f023 0320 	bic.w	r3, r3, #32
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	e7f6      	b.n	8005394 <_printf_i+0x194>
 80053a6:	4616      	mov	r6, r2
 80053a8:	e7bd      	b.n	8005326 <_printf_i+0x126>
 80053aa:	6833      	ldr	r3, [r6, #0]
 80053ac:	6825      	ldr	r5, [r4, #0]
 80053ae:	1d18      	adds	r0, r3, #4
 80053b0:	6961      	ldr	r1, [r4, #20]
 80053b2:	6030      	str	r0, [r6, #0]
 80053b4:	062e      	lsls	r6, r5, #24
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	d501      	bpl.n	80053be <_printf_i+0x1be>
 80053ba:	6019      	str	r1, [r3, #0]
 80053bc:	e002      	b.n	80053c4 <_printf_i+0x1c4>
 80053be:	0668      	lsls	r0, r5, #25
 80053c0:	d5fb      	bpl.n	80053ba <_printf_i+0x1ba>
 80053c2:	8019      	strh	r1, [r3, #0]
 80053c4:	2300      	movs	r3, #0
 80053c6:	4616      	mov	r6, r2
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	e7bc      	b.n	8005346 <_printf_i+0x146>
 80053cc:	6833      	ldr	r3, [r6, #0]
 80053ce:	2100      	movs	r1, #0
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	6032      	str	r2, [r6, #0]
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	4630      	mov	r0, r6
 80053da:	f000 f9e4 	bl	80057a6 <memchr>
 80053de:	b108      	cbz	r0, 80053e4 <_printf_i+0x1e4>
 80053e0:	1b80      	subs	r0, r0, r6
 80053e2:	6060      	str	r0, [r4, #4]
 80053e4:	6863      	ldr	r3, [r4, #4]
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	2300      	movs	r3, #0
 80053ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ee:	e7aa      	b.n	8005346 <_printf_i+0x146>
 80053f0:	4632      	mov	r2, r6
 80053f2:	4649      	mov	r1, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	47d0      	blx	sl
 80053fa:	3001      	adds	r0, #1
 80053fc:	d0ad      	beq.n	800535a <_printf_i+0x15a>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	079b      	lsls	r3, r3, #30
 8005402:	d413      	bmi.n	800542c <_printf_i+0x22c>
 8005404:	68e0      	ldr	r0, [r4, #12]
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	4298      	cmp	r0, r3
 800540a:	bfb8      	it	lt
 800540c:	4618      	movlt	r0, r3
 800540e:	e7a6      	b.n	800535e <_printf_i+0x15e>
 8005410:	2301      	movs	r3, #1
 8005412:	4632      	mov	r2, r6
 8005414:	4649      	mov	r1, r9
 8005416:	4640      	mov	r0, r8
 8005418:	47d0      	blx	sl
 800541a:	3001      	adds	r0, #1
 800541c:	d09d      	beq.n	800535a <_printf_i+0x15a>
 800541e:	3501      	adds	r5, #1
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	9903      	ldr	r1, [sp, #12]
 8005424:	1a5b      	subs	r3, r3, r1
 8005426:	42ab      	cmp	r3, r5
 8005428:	dcf2      	bgt.n	8005410 <_printf_i+0x210>
 800542a:	e7eb      	b.n	8005404 <_printf_i+0x204>
 800542c:	2500      	movs	r5, #0
 800542e:	f104 0619 	add.w	r6, r4, #25
 8005432:	e7f5      	b.n	8005420 <_printf_i+0x220>
 8005434:	08008901 	.word	0x08008901
 8005438:	08008912 	.word	0x08008912

0800543c <std>:
 800543c:	2300      	movs	r3, #0
 800543e:	b510      	push	{r4, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	e9c0 3300 	strd	r3, r3, [r0]
 8005446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800544a:	6083      	str	r3, [r0, #8]
 800544c:	8181      	strh	r1, [r0, #12]
 800544e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005450:	81c2      	strh	r2, [r0, #14]
 8005452:	6183      	str	r3, [r0, #24]
 8005454:	4619      	mov	r1, r3
 8005456:	2208      	movs	r2, #8
 8005458:	305c      	adds	r0, #92	@ 0x5c
 800545a:	f000 f916 	bl	800568a <memset>
 800545e:	4b0d      	ldr	r3, [pc, #52]	@ (8005494 <std+0x58>)
 8005460:	6224      	str	r4, [r4, #32]
 8005462:	6263      	str	r3, [r4, #36]	@ 0x24
 8005464:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <std+0x5c>)
 8005466:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005468:	4b0c      	ldr	r3, [pc, #48]	@ (800549c <std+0x60>)
 800546a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <std+0x64>)
 800546e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <std+0x68>)
 8005472:	429c      	cmp	r4, r3
 8005474:	d006      	beq.n	8005484 <std+0x48>
 8005476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800547a:	4294      	cmp	r4, r2
 800547c:	d002      	beq.n	8005484 <std+0x48>
 800547e:	33d0      	adds	r3, #208	@ 0xd0
 8005480:	429c      	cmp	r4, r3
 8005482:	d105      	bne.n	8005490 <std+0x54>
 8005484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f000 b988 	b.w	80057a0 <__retarget_lock_init_recursive>
 8005490:	bd10      	pop	{r4, pc}
 8005492:	bf00      	nop
 8005494:	08005605 	.word	0x08005605
 8005498:	08005627 	.word	0x08005627
 800549c:	0800565f 	.word	0x0800565f
 80054a0:	08005683 	.word	0x08005683
 80054a4:	20000c94 	.word	0x20000c94

080054a8 <stdio_exit_handler>:
 80054a8:	4a02      	ldr	r2, [pc, #8]	@ (80054b4 <stdio_exit_handler+0xc>)
 80054aa:	4903      	ldr	r1, [pc, #12]	@ (80054b8 <stdio_exit_handler+0x10>)
 80054ac:	4803      	ldr	r0, [pc, #12]	@ (80054bc <stdio_exit_handler+0x14>)
 80054ae:	f000 b869 	b.w	8005584 <_fwalk_sglue>
 80054b2:	bf00      	nop
 80054b4:	20000014 	.word	0x20000014
 80054b8:	08007121 	.word	0x08007121
 80054bc:	20000024 	.word	0x20000024

080054c0 <cleanup_stdio>:
 80054c0:	6841      	ldr	r1, [r0, #4]
 80054c2:	4b0c      	ldr	r3, [pc, #48]	@ (80054f4 <cleanup_stdio+0x34>)
 80054c4:	b510      	push	{r4, lr}
 80054c6:	4299      	cmp	r1, r3
 80054c8:	4604      	mov	r4, r0
 80054ca:	d001      	beq.n	80054d0 <cleanup_stdio+0x10>
 80054cc:	f001 fe28 	bl	8007120 <_fflush_r>
 80054d0:	68a1      	ldr	r1, [r4, #8]
 80054d2:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <cleanup_stdio+0x38>)
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d002      	beq.n	80054de <cleanup_stdio+0x1e>
 80054d8:	4620      	mov	r0, r4
 80054da:	f001 fe21 	bl	8007120 <_fflush_r>
 80054de:	68e1      	ldr	r1, [r4, #12]
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <cleanup_stdio+0x3c>)
 80054e2:	4299      	cmp	r1, r3
 80054e4:	d004      	beq.n	80054f0 <cleanup_stdio+0x30>
 80054e6:	4620      	mov	r0, r4
 80054e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ec:	f001 be18 	b.w	8007120 <_fflush_r>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	bf00      	nop
 80054f4:	20000c94 	.word	0x20000c94
 80054f8:	20000cfc 	.word	0x20000cfc
 80054fc:	20000d64 	.word	0x20000d64

08005500 <global_stdio_init.part.0>:
 8005500:	b510      	push	{r4, lr}
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <global_stdio_init.part.0+0x30>)
 8005504:	4c0b      	ldr	r4, [pc, #44]	@ (8005534 <global_stdio_init.part.0+0x34>)
 8005506:	4a0c      	ldr	r2, [pc, #48]	@ (8005538 <global_stdio_init.part.0+0x38>)
 8005508:	4620      	mov	r0, r4
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	2104      	movs	r1, #4
 800550e:	2200      	movs	r2, #0
 8005510:	f7ff ff94 	bl	800543c <std>
 8005514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005518:	2201      	movs	r2, #1
 800551a:	2109      	movs	r1, #9
 800551c:	f7ff ff8e 	bl	800543c <std>
 8005520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005524:	2202      	movs	r2, #2
 8005526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552a:	2112      	movs	r1, #18
 800552c:	f7ff bf86 	b.w	800543c <std>
 8005530:	20000dcc 	.word	0x20000dcc
 8005534:	20000c94 	.word	0x20000c94
 8005538:	080054a9 	.word	0x080054a9

0800553c <__sfp_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	@ (8005544 <__sfp_lock_acquire+0x8>)
 800553e:	f000 b930 	b.w	80057a2 <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	20000dd5 	.word	0x20000dd5

08005548 <__sfp_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	@ (8005550 <__sfp_lock_release+0x8>)
 800554a:	f000 b92b 	b.w	80057a4 <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	20000dd5 	.word	0x20000dd5

08005554 <__sinit>:
 8005554:	b510      	push	{r4, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	f7ff fff0 	bl	800553c <__sfp_lock_acquire>
 800555c:	6a23      	ldr	r3, [r4, #32]
 800555e:	b11b      	cbz	r3, 8005568 <__sinit+0x14>
 8005560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005564:	f7ff bff0 	b.w	8005548 <__sfp_lock_release>
 8005568:	4b04      	ldr	r3, [pc, #16]	@ (800557c <__sinit+0x28>)
 800556a:	6223      	str	r3, [r4, #32]
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <__sinit+0x2c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f5      	bne.n	8005560 <__sinit+0xc>
 8005574:	f7ff ffc4 	bl	8005500 <global_stdio_init.part.0>
 8005578:	e7f2      	b.n	8005560 <__sinit+0xc>
 800557a:	bf00      	nop
 800557c:	080054c1 	.word	0x080054c1
 8005580:	20000dcc 	.word	0x20000dcc

08005584 <_fwalk_sglue>:
 8005584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005588:	4607      	mov	r7, r0
 800558a:	4688      	mov	r8, r1
 800558c:	4614      	mov	r4, r2
 800558e:	2600      	movs	r6, #0
 8005590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005594:	f1b9 0901 	subs.w	r9, r9, #1
 8005598:	d505      	bpl.n	80055a6 <_fwalk_sglue+0x22>
 800559a:	6824      	ldr	r4, [r4, #0]
 800559c:	2c00      	cmp	r4, #0
 800559e:	d1f7      	bne.n	8005590 <_fwalk_sglue+0xc>
 80055a0:	4630      	mov	r0, r6
 80055a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a6:	89ab      	ldrh	r3, [r5, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d907      	bls.n	80055bc <_fwalk_sglue+0x38>
 80055ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b0:	3301      	adds	r3, #1
 80055b2:	d003      	beq.n	80055bc <_fwalk_sglue+0x38>
 80055b4:	4629      	mov	r1, r5
 80055b6:	4638      	mov	r0, r7
 80055b8:	47c0      	blx	r8
 80055ba:	4306      	orrs	r6, r0
 80055bc:	3568      	adds	r5, #104	@ 0x68
 80055be:	e7e9      	b.n	8005594 <_fwalk_sglue+0x10>

080055c0 <siprintf>:
 80055c0:	b40e      	push	{r1, r2, r3}
 80055c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055c6:	b510      	push	{r4, lr}
 80055c8:	2400      	movs	r4, #0
 80055ca:	b09d      	sub	sp, #116	@ 0x74
 80055cc:	ab1f      	add	r3, sp, #124	@ 0x7c
 80055ce:	9002      	str	r0, [sp, #8]
 80055d0:	9006      	str	r0, [sp, #24]
 80055d2:	9107      	str	r1, [sp, #28]
 80055d4:	9104      	str	r1, [sp, #16]
 80055d6:	4809      	ldr	r0, [pc, #36]	@ (80055fc <siprintf+0x3c>)
 80055d8:	4909      	ldr	r1, [pc, #36]	@ (8005600 <siprintf+0x40>)
 80055da:	f853 2b04 	ldr.w	r2, [r3], #4
 80055de:	9105      	str	r1, [sp, #20]
 80055e0:	6800      	ldr	r0, [r0, #0]
 80055e2:	a902      	add	r1, sp, #8
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80055e8:	f001 fc1e 	bl	8006e28 <_svfiprintf_r>
 80055ec:	9b02      	ldr	r3, [sp, #8]
 80055ee:	701c      	strb	r4, [r3, #0]
 80055f0:	b01d      	add	sp, #116	@ 0x74
 80055f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f6:	b003      	add	sp, #12
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	20000020 	.word	0x20000020
 8005600:	ffff0208 	.word	0xffff0208

08005604 <__sread>:
 8005604:	b510      	push	{r4, lr}
 8005606:	460c      	mov	r4, r1
 8005608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560c:	f000 f87a 	bl	8005704 <_read_r>
 8005610:	2800      	cmp	r0, #0
 8005612:	bfab      	itete	ge
 8005614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005616:	89a3      	ldrhlt	r3, [r4, #12]
 8005618:	181b      	addge	r3, r3, r0
 800561a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800561e:	bfac      	ite	ge
 8005620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005622:	81a3      	strhlt	r3, [r4, #12]
 8005624:	bd10      	pop	{r4, pc}

08005626 <__swrite>:
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	461f      	mov	r7, r3
 800562c:	898b      	ldrh	r3, [r1, #12]
 800562e:	4605      	mov	r5, r0
 8005630:	05db      	lsls	r3, r3, #23
 8005632:	460c      	mov	r4, r1
 8005634:	4616      	mov	r6, r2
 8005636:	d505      	bpl.n	8005644 <__swrite+0x1e>
 8005638:	2302      	movs	r3, #2
 800563a:	2200      	movs	r2, #0
 800563c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005640:	f000 f84e 	bl	80056e0 <_lseek_r>
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	4632      	mov	r2, r6
 8005648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	4628      	mov	r0, r5
 8005650:	463b      	mov	r3, r7
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	f000 b865 	b.w	8005728 <_write_r>

0800565e <__sseek>:
 800565e:	b510      	push	{r4, lr}
 8005660:	460c      	mov	r4, r1
 8005662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005666:	f000 f83b 	bl	80056e0 <_lseek_r>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	bf15      	itete	ne
 8005670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800567a:	81a3      	strheq	r3, [r4, #12]
 800567c:	bf18      	it	ne
 800567e:	81a3      	strhne	r3, [r4, #12]
 8005680:	bd10      	pop	{r4, pc}

08005682 <__sclose>:
 8005682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005686:	f000 b81b 	b.w	80056c0 <_close_r>

0800568a <memset>:
 800568a:	4603      	mov	r3, r0
 800568c:	4402      	add	r2, r0
 800568e:	4293      	cmp	r3, r2
 8005690:	d100      	bne.n	8005694 <memset+0xa>
 8005692:	4770      	bx	lr
 8005694:	f803 1b01 	strb.w	r1, [r3], #1
 8005698:	e7f9      	b.n	800568e <memset+0x4>

0800569a <strcat>:
 800569a:	4602      	mov	r2, r0
 800569c:	b510      	push	{r4, lr}
 800569e:	7814      	ldrb	r4, [r2, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	3201      	adds	r2, #1
 80056a4:	2c00      	cmp	r4, #0
 80056a6:	d1fa      	bne.n	800569e <strcat+0x4>
 80056a8:	3b01      	subs	r3, #1
 80056aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d1f9      	bne.n	80056aa <strcat+0x10>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <_localeconv_r>:
 80056b8:	4800      	ldr	r0, [pc, #0]	@ (80056bc <_localeconv_r+0x4>)
 80056ba:	4770      	bx	lr
 80056bc:	20000160 	.word	0x20000160

080056c0 <_close_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	2300      	movs	r3, #0
 80056c4:	4d05      	ldr	r5, [pc, #20]	@ (80056dc <_close_r+0x1c>)
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fd fc87 	bl	8002fde <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_close_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_close_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000dd0 	.word	0x20000dd0

080056e0 <_lseek_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	2200      	movs	r2, #0
 80056ea:	4d05      	ldr	r5, [pc, #20]	@ (8005700 <_lseek_r+0x20>)
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fd fc99 	bl	8003026 <_lseek>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_lseek_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_lseek_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	20000dd0 	.word	0x20000dd0

08005704 <_read_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	2200      	movs	r2, #0
 800570e:	4d05      	ldr	r5, [pc, #20]	@ (8005724 <_read_r+0x20>)
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fd fc2a 	bl	8002f6c <_read>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_read_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_read_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	20000dd0 	.word	0x20000dd0

08005728 <_write_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	2200      	movs	r2, #0
 8005732:	4d05      	ldr	r5, [pc, #20]	@ (8005748 <_write_r+0x20>)
 8005734:	602a      	str	r2, [r5, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f7fd fc35 	bl	8002fa6 <_write>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_write_r+0x1e>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_write_r+0x1e>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	20000dd0 	.word	0x20000dd0

0800574c <__errno>:
 800574c:	4b01      	ldr	r3, [pc, #4]	@ (8005754 <__errno+0x8>)
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20000020 	.word	0x20000020

08005758 <__libc_init_array>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	2600      	movs	r6, #0
 800575c:	4d0c      	ldr	r5, [pc, #48]	@ (8005790 <__libc_init_array+0x38>)
 800575e:	4c0d      	ldr	r4, [pc, #52]	@ (8005794 <__libc_init_array+0x3c>)
 8005760:	1b64      	subs	r4, r4, r5
 8005762:	10a4      	asrs	r4, r4, #2
 8005764:	42a6      	cmp	r6, r4
 8005766:	d109      	bne.n	800577c <__libc_init_array+0x24>
 8005768:	f002 ff82 	bl	8008670 <_init>
 800576c:	2600      	movs	r6, #0
 800576e:	4d0a      	ldr	r5, [pc, #40]	@ (8005798 <__libc_init_array+0x40>)
 8005770:	4c0a      	ldr	r4, [pc, #40]	@ (800579c <__libc_init_array+0x44>)
 8005772:	1b64      	subs	r4, r4, r5
 8005774:	10a4      	asrs	r4, r4, #2
 8005776:	42a6      	cmp	r6, r4
 8005778:	d105      	bne.n	8005786 <__libc_init_array+0x2e>
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005780:	4798      	blx	r3
 8005782:	3601      	adds	r6, #1
 8005784:	e7ee      	b.n	8005764 <__libc_init_array+0xc>
 8005786:	f855 3b04 	ldr.w	r3, [r5], #4
 800578a:	4798      	blx	r3
 800578c:	3601      	adds	r6, #1
 800578e:	e7f2      	b.n	8005776 <__libc_init_array+0x1e>
 8005790:	08008ba8 	.word	0x08008ba8
 8005794:	08008ba8 	.word	0x08008ba8
 8005798:	08008ba8 	.word	0x08008ba8
 800579c:	08008bac 	.word	0x08008bac

080057a0 <__retarget_lock_init_recursive>:
 80057a0:	4770      	bx	lr

080057a2 <__retarget_lock_acquire_recursive>:
 80057a2:	4770      	bx	lr

080057a4 <__retarget_lock_release_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <memchr>:
 80057a6:	4603      	mov	r3, r0
 80057a8:	b510      	push	{r4, lr}
 80057aa:	b2c9      	uxtb	r1, r1
 80057ac:	4402      	add	r2, r0
 80057ae:	4293      	cmp	r3, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	d101      	bne.n	80057b8 <memchr+0x12>
 80057b4:	2000      	movs	r0, #0
 80057b6:	e003      	b.n	80057c0 <memchr+0x1a>
 80057b8:	7804      	ldrb	r4, [r0, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	428c      	cmp	r4, r1
 80057be:	d1f6      	bne.n	80057ae <memchr+0x8>
 80057c0:	bd10      	pop	{r4, pc}

080057c2 <quorem>:
 80057c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	6903      	ldr	r3, [r0, #16]
 80057c8:	690c      	ldr	r4, [r1, #16]
 80057ca:	4607      	mov	r7, r0
 80057cc:	42a3      	cmp	r3, r4
 80057ce:	db7e      	blt.n	80058ce <quorem+0x10c>
 80057d0:	3c01      	subs	r4, #1
 80057d2:	00a3      	lsls	r3, r4, #2
 80057d4:	f100 0514 	add.w	r5, r0, #20
 80057d8:	f101 0814 	add.w	r8, r1, #20
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ec:	3301      	adds	r3, #1
 80057ee:	429a      	cmp	r2, r3
 80057f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80057f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057f8:	d32e      	bcc.n	8005858 <quorem+0x96>
 80057fa:	f04f 0a00 	mov.w	sl, #0
 80057fe:	46c4      	mov	ip, r8
 8005800:	46ae      	mov	lr, r5
 8005802:	46d3      	mov	fp, sl
 8005804:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005808:	b298      	uxth	r0, r3
 800580a:	fb06 a000 	mla	r0, r6, r0, sl
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	0c02      	lsrs	r2, r0, #16
 8005812:	fb06 2303 	mla	r3, r6, r3, r2
 8005816:	f8de 2000 	ldr.w	r2, [lr]
 800581a:	b280      	uxth	r0, r0
 800581c:	b292      	uxth	r2, r2
 800581e:	1a12      	subs	r2, r2, r0
 8005820:	445a      	add	r2, fp
 8005822:	f8de 0000 	ldr.w	r0, [lr]
 8005826:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800582a:	b29b      	uxth	r3, r3
 800582c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005830:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005834:	b292      	uxth	r2, r2
 8005836:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800583a:	45e1      	cmp	r9, ip
 800583c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005840:	f84e 2b04 	str.w	r2, [lr], #4
 8005844:	d2de      	bcs.n	8005804 <quorem+0x42>
 8005846:	9b00      	ldr	r3, [sp, #0]
 8005848:	58eb      	ldr	r3, [r5, r3]
 800584a:	b92b      	cbnz	r3, 8005858 <quorem+0x96>
 800584c:	9b01      	ldr	r3, [sp, #4]
 800584e:	3b04      	subs	r3, #4
 8005850:	429d      	cmp	r5, r3
 8005852:	461a      	mov	r2, r3
 8005854:	d32f      	bcc.n	80058b6 <quorem+0xf4>
 8005856:	613c      	str	r4, [r7, #16]
 8005858:	4638      	mov	r0, r7
 800585a:	f001 f981 	bl	8006b60 <__mcmp>
 800585e:	2800      	cmp	r0, #0
 8005860:	db25      	blt.n	80058ae <quorem+0xec>
 8005862:	4629      	mov	r1, r5
 8005864:	2000      	movs	r0, #0
 8005866:	f858 2b04 	ldr.w	r2, [r8], #4
 800586a:	f8d1 c000 	ldr.w	ip, [r1]
 800586e:	fa1f fe82 	uxth.w	lr, r2
 8005872:	fa1f f38c 	uxth.w	r3, ip
 8005876:	eba3 030e 	sub.w	r3, r3, lr
 800587a:	4403      	add	r3, r0
 800587c:	0c12      	lsrs	r2, r2, #16
 800587e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005882:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005886:	b29b      	uxth	r3, r3
 8005888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588c:	45c1      	cmp	r9, r8
 800588e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005892:	f841 3b04 	str.w	r3, [r1], #4
 8005896:	d2e6      	bcs.n	8005866 <quorem+0xa4>
 8005898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800589c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058a0:	b922      	cbnz	r2, 80058ac <quorem+0xea>
 80058a2:	3b04      	subs	r3, #4
 80058a4:	429d      	cmp	r5, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	d30b      	bcc.n	80058c2 <quorem+0x100>
 80058aa:	613c      	str	r4, [r7, #16]
 80058ac:	3601      	adds	r6, #1
 80058ae:	4630      	mov	r0, r6
 80058b0:	b003      	add	sp, #12
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	3b04      	subs	r3, #4
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d1cb      	bne.n	8005856 <quorem+0x94>
 80058be:	3c01      	subs	r4, #1
 80058c0:	e7c6      	b.n	8005850 <quorem+0x8e>
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	3b04      	subs	r3, #4
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d1ef      	bne.n	80058aa <quorem+0xe8>
 80058ca:	3c01      	subs	r4, #1
 80058cc:	e7ea      	b.n	80058a4 <quorem+0xe2>
 80058ce:	2000      	movs	r0, #0
 80058d0:	e7ee      	b.n	80058b0 <quorem+0xee>
 80058d2:	0000      	movs	r0, r0
 80058d4:	0000      	movs	r0, r0
	...

080058d8 <_dtoa_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4614      	mov	r4, r2
 80058de:	461d      	mov	r5, r3
 80058e0:	69c7      	ldr	r7, [r0, #28]
 80058e2:	b097      	sub	sp, #92	@ 0x5c
 80058e4:	4681      	mov	r9, r0
 80058e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80058ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80058ec:	b97f      	cbnz	r7, 800590e <_dtoa_r+0x36>
 80058ee:	2010      	movs	r0, #16
 80058f0:	f000 fe0e 	bl	8006510 <malloc>
 80058f4:	4602      	mov	r2, r0
 80058f6:	f8c9 001c 	str.w	r0, [r9, #28]
 80058fa:	b920      	cbnz	r0, 8005906 <_dtoa_r+0x2e>
 80058fc:	21ef      	movs	r1, #239	@ 0xef
 80058fe:	4bac      	ldr	r3, [pc, #688]	@ (8005bb0 <_dtoa_r+0x2d8>)
 8005900:	48ac      	ldr	r0, [pc, #688]	@ (8005bb4 <_dtoa_r+0x2dc>)
 8005902:	f001 fc6d 	bl	80071e0 <__assert_func>
 8005906:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800590a:	6007      	str	r7, [r0, #0]
 800590c:	60c7      	str	r7, [r0, #12]
 800590e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	b159      	cbz	r1, 800592e <_dtoa_r+0x56>
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2301      	movs	r3, #1
 800591a:	4093      	lsls	r3, r2
 800591c:	604a      	str	r2, [r1, #4]
 800591e:	608b      	str	r3, [r1, #8]
 8005920:	4648      	mov	r0, r9
 8005922:	f000 feeb 	bl	80066fc <_Bfree>
 8005926:	2200      	movs	r2, #0
 8005928:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	1e2b      	subs	r3, r5, #0
 8005930:	bfaf      	iteee	ge
 8005932:	2300      	movge	r3, #0
 8005934:	2201      	movlt	r2, #1
 8005936:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800593a:	9307      	strlt	r3, [sp, #28]
 800593c:	bfa8      	it	ge
 800593e:	6033      	strge	r3, [r6, #0]
 8005940:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005944:	4b9c      	ldr	r3, [pc, #624]	@ (8005bb8 <_dtoa_r+0x2e0>)
 8005946:	bfb8      	it	lt
 8005948:	6032      	strlt	r2, [r6, #0]
 800594a:	ea33 0308 	bics.w	r3, r3, r8
 800594e:	d112      	bne.n	8005976 <_dtoa_r+0x9e>
 8005950:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005954:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800595c:	4323      	orrs	r3, r4
 800595e:	f000 855e 	beq.w	800641e <_dtoa_r+0xb46>
 8005962:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005964:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005bbc <_dtoa_r+0x2e4>
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8560 	beq.w	800642e <_dtoa_r+0xb56>
 800596e:	f10a 0303 	add.w	r3, sl, #3
 8005972:	f000 bd5a 	b.w	800642a <_dtoa_r+0xb52>
 8005976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800597a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800597e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	2300      	movs	r3, #0
 8005986:	f7fb f80f 	bl	80009a8 <__aeabi_dcmpeq>
 800598a:	4607      	mov	r7, r0
 800598c:	b158      	cbz	r0, 80059a6 <_dtoa_r+0xce>
 800598e:	2301      	movs	r3, #1
 8005990:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005996:	b113      	cbz	r3, 800599e <_dtoa_r+0xc6>
 8005998:	4b89      	ldr	r3, [pc, #548]	@ (8005bc0 <_dtoa_r+0x2e8>)
 800599a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005bc4 <_dtoa_r+0x2ec>
 80059a2:	f000 bd44 	b.w	800642e <_dtoa_r+0xb56>
 80059a6:	ab14      	add	r3, sp, #80	@ 0x50
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	ab15      	add	r3, sp, #84	@ 0x54
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	4648      	mov	r0, r9
 80059b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059b4:	f001 f984 	bl	8006cc0 <__d2b>
 80059b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80059bc:	9003      	str	r0, [sp, #12]
 80059be:	2e00      	cmp	r6, #0
 80059c0:	d078      	beq.n	8005ab4 <_dtoa_r+0x1dc>
 80059c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80059d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80059d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80059da:	4619      	mov	r1, r3
 80059dc:	2200      	movs	r2, #0
 80059de:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc8 <_dtoa_r+0x2f0>)
 80059e0:	f7fa fbc2 	bl	8000168 <__aeabi_dsub>
 80059e4:	a36c      	add	r3, pc, #432	@ (adr r3, 8005b98 <_dtoa_r+0x2c0>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f7fa fd75 	bl	80004d8 <__aeabi_dmul>
 80059ee:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ba0 <_dtoa_r+0x2c8>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fbba 	bl	800016c <__adddf3>
 80059f8:	4604      	mov	r4, r0
 80059fa:	4630      	mov	r0, r6
 80059fc:	460d      	mov	r5, r1
 80059fe:	f7fa fd01 	bl	8000404 <__aeabi_i2d>
 8005a02:	a369      	add	r3, pc, #420	@ (adr r3, 8005ba8 <_dtoa_r+0x2d0>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fd66 	bl	80004d8 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fbaa 	bl	800016c <__adddf3>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	f7fb f80c 	bl	8000a38 <__aeabi_d2iz>
 8005a20:	2200      	movs	r2, #0
 8005a22:	4607      	mov	r7, r0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fa ffc7 	bl	80009bc <__aeabi_dcmplt>
 8005a2e:	b140      	cbz	r0, 8005a42 <_dtoa_r+0x16a>
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7fa fce7 	bl	8000404 <__aeabi_i2d>
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f7fa ffb5 	bl	80009a8 <__aeabi_dcmpeq>
 8005a3e:	b900      	cbnz	r0, 8005a42 <_dtoa_r+0x16a>
 8005a40:	3f01      	subs	r7, #1
 8005a42:	2f16      	cmp	r7, #22
 8005a44:	d854      	bhi.n	8005af0 <_dtoa_r+0x218>
 8005a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a4a:	4b60      	ldr	r3, [pc, #384]	@ (8005bcc <_dtoa_r+0x2f4>)
 8005a4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa ffb2 	bl	80009bc <__aeabi_dcmplt>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d04b      	beq.n	8005af4 <_dtoa_r+0x21c>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	3f01      	subs	r7, #1
 8005a60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	1e5a      	subs	r2, r3, #1
 8005a68:	bf49      	itett	mi
 8005a6a:	f1c3 0301 	rsbmi	r3, r3, #1
 8005a6e:	2300      	movpl	r3, #0
 8005a70:	9304      	strmi	r3, [sp, #16]
 8005a72:	2300      	movmi	r3, #0
 8005a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a76:	bf54      	ite	pl
 8005a78:	9304      	strpl	r3, [sp, #16]
 8005a7a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005a7c:	2f00      	cmp	r7, #0
 8005a7e:	db3b      	blt.n	8005af8 <_dtoa_r+0x220>
 8005a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a82:	970e      	str	r7, [sp, #56]	@ 0x38
 8005a84:	443b      	add	r3, r7
 8005a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a88:	2300      	movs	r3, #0
 8005a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a8c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d865      	bhi.n	8005b5e <_dtoa_r+0x286>
 8005a92:	2b05      	cmp	r3, #5
 8005a94:	bfc4      	itt	gt
 8005a96:	3b04      	subgt	r3, #4
 8005a98:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005a9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a9c:	bfc8      	it	gt
 8005a9e:	2400      	movgt	r4, #0
 8005aa0:	f1a3 0302 	sub.w	r3, r3, #2
 8005aa4:	bfd8      	it	le
 8005aa6:	2401      	movle	r4, #1
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d864      	bhi.n	8005b76 <_dtoa_r+0x29e>
 8005aac:	e8df f003 	tbb	[pc, r3]
 8005ab0:	2c385553 	.word	0x2c385553
 8005ab4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ab8:	441e      	add	r6, r3
 8005aba:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	bfc1      	itttt	gt
 8005ac2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005ac6:	fa08 f803 	lslgt.w	r8, r8, r3
 8005aca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ace:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ad2:	bfd6      	itet	le
 8005ad4:	f1c3 0320 	rsble	r3, r3, #32
 8005ad8:	ea48 0003 	orrgt.w	r0, r8, r3
 8005adc:	fa04 f003 	lslle.w	r0, r4, r3
 8005ae0:	f7fa fc80 	bl	80003e4 <__aeabi_ui2d>
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005aea:	3e01      	subs	r6, #1
 8005aec:	9212      	str	r2, [sp, #72]	@ 0x48
 8005aee:	e774      	b.n	80059da <_dtoa_r+0x102>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e7b5      	b.n	8005a60 <_dtoa_r+0x188>
 8005af4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005af6:	e7b4      	b.n	8005a62 <_dtoa_r+0x18a>
 8005af8:	9b04      	ldr	r3, [sp, #16]
 8005afa:	1bdb      	subs	r3, r3, r7
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	427b      	negs	r3, r7
 8005b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b02:	2300      	movs	r3, #0
 8005b04:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b06:	e7c1      	b.n	8005a8c <_dtoa_r+0x1b4>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b0e:	eb07 0b03 	add.w	fp, r7, r3
 8005b12:	f10b 0301 	add.w	r3, fp, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	bfb8      	it	lt
 8005b1c:	2301      	movlt	r3, #1
 8005b1e:	e006      	b.n	8005b2e <_dtoa_r+0x256>
 8005b20:	2301      	movs	r3, #1
 8005b22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd28      	ble.n	8005b7c <_dtoa_r+0x2a4>
 8005b2a:	469b      	mov	fp, r3
 8005b2c:	9308      	str	r3, [sp, #32]
 8005b2e:	2100      	movs	r1, #0
 8005b30:	2204      	movs	r2, #4
 8005b32:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005b36:	f102 0514 	add.w	r5, r2, #20
 8005b3a:	429d      	cmp	r5, r3
 8005b3c:	d926      	bls.n	8005b8c <_dtoa_r+0x2b4>
 8005b3e:	6041      	str	r1, [r0, #4]
 8005b40:	4648      	mov	r0, r9
 8005b42:	f000 fd9b 	bl	800667c <_Balloc>
 8005b46:	4682      	mov	sl, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d143      	bne.n	8005bd4 <_dtoa_r+0x2fc>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b52:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd0 <_dtoa_r+0x2f8>)
 8005b54:	e6d4      	b.n	8005900 <_dtoa_r+0x28>
 8005b56:	2300      	movs	r3, #0
 8005b58:	e7e3      	b.n	8005b22 <_dtoa_r+0x24a>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e7d5      	b.n	8005b0a <_dtoa_r+0x232>
 8005b5e:	2401      	movs	r4, #1
 8005b60:	2300      	movs	r3, #0
 8005b62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b64:	9320      	str	r3, [sp, #128]	@ 0x80
 8005b66:	f04f 3bff 	mov.w	fp, #4294967295
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2312      	movs	r3, #18
 8005b6e:	f8cd b020 	str.w	fp, [sp, #32]
 8005b72:	9221      	str	r2, [sp, #132]	@ 0x84
 8005b74:	e7db      	b.n	8005b2e <_dtoa_r+0x256>
 8005b76:	2301      	movs	r3, #1
 8005b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b7a:	e7f4      	b.n	8005b66 <_dtoa_r+0x28e>
 8005b7c:	f04f 0b01 	mov.w	fp, #1
 8005b80:	465b      	mov	r3, fp
 8005b82:	f8cd b020 	str.w	fp, [sp, #32]
 8005b86:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005b8a:	e7d0      	b.n	8005b2e <_dtoa_r+0x256>
 8005b8c:	3101      	adds	r1, #1
 8005b8e:	0052      	lsls	r2, r2, #1
 8005b90:	e7d1      	b.n	8005b36 <_dtoa_r+0x25e>
 8005b92:	bf00      	nop
 8005b94:	f3af 8000 	nop.w
 8005b98:	636f4361 	.word	0x636f4361
 8005b9c:	3fd287a7 	.word	0x3fd287a7
 8005ba0:	8b60c8b3 	.word	0x8b60c8b3
 8005ba4:	3fc68a28 	.word	0x3fc68a28
 8005ba8:	509f79fb 	.word	0x509f79fb
 8005bac:	3fd34413 	.word	0x3fd34413
 8005bb0:	08008930 	.word	0x08008930
 8005bb4:	08008947 	.word	0x08008947
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	0800892c 	.word	0x0800892c
 8005bc0:	08008900 	.word	0x08008900
 8005bc4:	080088ff 	.word	0x080088ff
 8005bc8:	3ff80000 	.word	0x3ff80000
 8005bcc:	08008a98 	.word	0x08008a98
 8005bd0:	0800899f 	.word	0x0800899f
 8005bd4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005bd8:	6018      	str	r0, [r3, #0]
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	2b0e      	cmp	r3, #14
 8005bde:	f200 80a1 	bhi.w	8005d24 <_dtoa_r+0x44c>
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	f000 809e 	beq.w	8005d24 <_dtoa_r+0x44c>
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	dd33      	ble.n	8005c54 <_dtoa_r+0x37c>
 8005bec:	4b9c      	ldr	r3, [pc, #624]	@ (8005e60 <_dtoa_r+0x588>)
 8005bee:	f007 020f 	and.w	r2, r7, #15
 8005bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bf6:	05f8      	lsls	r0, r7, #23
 8005bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005c00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c04:	d516      	bpl.n	8005c34 <_dtoa_r+0x35c>
 8005c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c0a:	4b96      	ldr	r3, [pc, #600]	@ (8005e64 <_dtoa_r+0x58c>)
 8005c0c:	2603      	movs	r6, #3
 8005c0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c12:	f7fa fd8b 	bl	800072c <__aeabi_ddiv>
 8005c16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c1a:	f004 040f 	and.w	r4, r4, #15
 8005c1e:	4d91      	ldr	r5, [pc, #580]	@ (8005e64 <_dtoa_r+0x58c>)
 8005c20:	b954      	cbnz	r4, 8005c38 <_dtoa_r+0x360>
 8005c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c2a:	f7fa fd7f 	bl	800072c <__aeabi_ddiv>
 8005c2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c32:	e028      	b.n	8005c86 <_dtoa_r+0x3ae>
 8005c34:	2602      	movs	r6, #2
 8005c36:	e7f2      	b.n	8005c1e <_dtoa_r+0x346>
 8005c38:	07e1      	lsls	r1, r4, #31
 8005c3a:	d508      	bpl.n	8005c4e <_dtoa_r+0x376>
 8005c3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c44:	f7fa fc48 	bl	80004d8 <__aeabi_dmul>
 8005c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	1064      	asrs	r4, r4, #1
 8005c50:	3508      	adds	r5, #8
 8005c52:	e7e5      	b.n	8005c20 <_dtoa_r+0x348>
 8005c54:	f000 80af 	beq.w	8005db6 <_dtoa_r+0x4de>
 8005c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c5c:	427c      	negs	r4, r7
 8005c5e:	4b80      	ldr	r3, [pc, #512]	@ (8005e60 <_dtoa_r+0x588>)
 8005c60:	f004 020f 	and.w	r2, r4, #15
 8005c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fc34 	bl	80004d8 <__aeabi_dmul>
 8005c70:	2602      	movs	r6, #2
 8005c72:	2300      	movs	r3, #0
 8005c74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c78:	4d7a      	ldr	r5, [pc, #488]	@ (8005e64 <_dtoa_r+0x58c>)
 8005c7a:	1124      	asrs	r4, r4, #4
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	f040 808f 	bne.w	8005da0 <_dtoa_r+0x4c8>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1d3      	bne.n	8005c2e <_dtoa_r+0x356>
 8005c86:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8094 	beq.w	8005dba <_dtoa_r+0x4e2>
 8005c92:	2200      	movs	r2, #0
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <_dtoa_r+0x590>)
 8005c9a:	f7fa fe8f 	bl	80009bc <__aeabi_dcmplt>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f000 808b 	beq.w	8005dba <_dtoa_r+0x4e2>
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8087 	beq.w	8005dba <_dtoa_r+0x4e2>
 8005cac:	f1bb 0f00 	cmp.w	fp, #0
 8005cb0:	dd34      	ble.n	8005d1c <_dtoa_r+0x444>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e6c <_dtoa_r+0x594>)
 8005cba:	f7fa fc0d 	bl	80004d8 <__aeabi_dmul>
 8005cbe:	465c      	mov	r4, fp
 8005cc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cc4:	f107 38ff 	add.w	r8, r7, #4294967295
 8005cc8:	3601      	adds	r6, #1
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7fa fb9a 	bl	8000404 <__aeabi_i2d>
 8005cd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cd4:	f7fa fc00 	bl	80004d8 <__aeabi_dmul>
 8005cd8:	2200      	movs	r2, #0
 8005cda:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <_dtoa_r+0x598>)
 8005cdc:	f7fa fa46 	bl	800016c <__adddf3>
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ce6:	2c00      	cmp	r4, #0
 8005ce8:	d16a      	bne.n	8005dc0 <_dtoa_r+0x4e8>
 8005cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4b60      	ldr	r3, [pc, #384]	@ (8005e74 <_dtoa_r+0x59c>)
 8005cf2:	f7fa fa39 	bl	8000168 <__aeabi_dsub>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cfe:	462a      	mov	r2, r5
 8005d00:	4633      	mov	r3, r6
 8005d02:	f7fa fe79 	bl	80009f8 <__aeabi_dcmpgt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 8298 	bne.w	800623c <_dtoa_r+0x964>
 8005d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d10:	462a      	mov	r2, r5
 8005d12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d16:	f7fa fe51 	bl	80009bc <__aeabi_dcmplt>
 8005d1a:	bb38      	cbnz	r0, 8005d6c <_dtoa_r+0x494>
 8005d1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f2c0 8157 	blt.w	8005fda <_dtoa_r+0x702>
 8005d2c:	2f0e      	cmp	r7, #14
 8005d2e:	f300 8154 	bgt.w	8005fda <_dtoa_r+0x702>
 8005d32:	4b4b      	ldr	r3, [pc, #300]	@ (8005e60 <_dtoa_r+0x588>)
 8005d34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d3c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f280 80e5 	bge.w	8005f12 <_dtoa_r+0x63a>
 8005d48:	9b08      	ldr	r3, [sp, #32]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f300 80e1 	bgt.w	8005f12 <_dtoa_r+0x63a>
 8005d50:	d10c      	bne.n	8005d6c <_dtoa_r+0x494>
 8005d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d56:	2200      	movs	r2, #0
 8005d58:	4b46      	ldr	r3, [pc, #280]	@ (8005e74 <_dtoa_r+0x59c>)
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d62:	f7fa fe3f 	bl	80009e4 <__aeabi_dcmpge>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f000 8266 	beq.w	8006238 <_dtoa_r+0x960>
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	4625      	mov	r5, r4
 8005d70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d72:	4656      	mov	r6, sl
 8005d74:	ea6f 0803 	mvn.w	r8, r3
 8005d78:	2700      	movs	r7, #0
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4648      	mov	r0, r9
 8005d7e:	f000 fcbd 	bl	80066fc <_Bfree>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	f000 80bd 	beq.w	8005f02 <_dtoa_r+0x62a>
 8005d88:	b12f      	cbz	r7, 8005d96 <_dtoa_r+0x4be>
 8005d8a:	42af      	cmp	r7, r5
 8005d8c:	d003      	beq.n	8005d96 <_dtoa_r+0x4be>
 8005d8e:	4639      	mov	r1, r7
 8005d90:	4648      	mov	r0, r9
 8005d92:	f000 fcb3 	bl	80066fc <_Bfree>
 8005d96:	4629      	mov	r1, r5
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fcaf 	bl	80066fc <_Bfree>
 8005d9e:	e0b0      	b.n	8005f02 <_dtoa_r+0x62a>
 8005da0:	07e2      	lsls	r2, r4, #31
 8005da2:	d505      	bpl.n	8005db0 <_dtoa_r+0x4d8>
 8005da4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005da8:	f7fa fb96 	bl	80004d8 <__aeabi_dmul>
 8005dac:	2301      	movs	r3, #1
 8005dae:	3601      	adds	r6, #1
 8005db0:	1064      	asrs	r4, r4, #1
 8005db2:	3508      	adds	r5, #8
 8005db4:	e762      	b.n	8005c7c <_dtoa_r+0x3a4>
 8005db6:	2602      	movs	r6, #2
 8005db8:	e765      	b.n	8005c86 <_dtoa_r+0x3ae>
 8005dba:	46b8      	mov	r8, r7
 8005dbc:	9c08      	ldr	r4, [sp, #32]
 8005dbe:	e784      	b.n	8005cca <_dtoa_r+0x3f2>
 8005dc0:	4b27      	ldr	r3, [pc, #156]	@ (8005e60 <_dtoa_r+0x588>)
 8005dc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005dc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dcc:	4454      	add	r4, sl
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d054      	beq.n	8005e7c <_dtoa_r+0x5a4>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	4928      	ldr	r1, [pc, #160]	@ (8005e78 <_dtoa_r+0x5a0>)
 8005dd6:	f7fa fca9 	bl	800072c <__aeabi_ddiv>
 8005dda:	4633      	mov	r3, r6
 8005ddc:	462a      	mov	r2, r5
 8005dde:	f7fa f9c3 	bl	8000168 <__aeabi_dsub>
 8005de2:	4656      	mov	r6, sl
 8005de4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dec:	f7fa fe24 	bl	8000a38 <__aeabi_d2iz>
 8005df0:	4605      	mov	r5, r0
 8005df2:	f7fa fb07 	bl	8000404 <__aeabi_i2d>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dfe:	f7fa f9b3 	bl	8000168 <__aeabi_dsub>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	3530      	adds	r5, #48	@ 0x30
 8005e08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e10:	f806 5b01 	strb.w	r5, [r6], #1
 8005e14:	f7fa fdd2 	bl	80009bc <__aeabi_dcmplt>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d172      	bne.n	8005f02 <_dtoa_r+0x62a>
 8005e1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e20:	2000      	movs	r0, #0
 8005e22:	4911      	ldr	r1, [pc, #68]	@ (8005e68 <_dtoa_r+0x590>)
 8005e24:	f7fa f9a0 	bl	8000168 <__aeabi_dsub>
 8005e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e2c:	f7fa fdc6 	bl	80009bc <__aeabi_dcmplt>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	f040 80b4 	bne.w	8005f9e <_dtoa_r+0x6c6>
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	f43f af70 	beq.w	8005d1c <_dtoa_r+0x444>
 8005e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e40:	2200      	movs	r2, #0
 8005e42:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <_dtoa_r+0x594>)
 8005e44:	f7fa fb48 	bl	80004d8 <__aeabi_dmul>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e52:	4b06      	ldr	r3, [pc, #24]	@ (8005e6c <_dtoa_r+0x594>)
 8005e54:	f7fa fb40 	bl	80004d8 <__aeabi_dmul>
 8005e58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e5c:	e7c4      	b.n	8005de8 <_dtoa_r+0x510>
 8005e5e:	bf00      	nop
 8005e60:	08008a98 	.word	0x08008a98
 8005e64:	08008a70 	.word	0x08008a70
 8005e68:	3ff00000 	.word	0x3ff00000
 8005e6c:	40240000 	.word	0x40240000
 8005e70:	401c0000 	.word	0x401c0000
 8005e74:	40140000 	.word	0x40140000
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f7fa fb2a 	bl	80004d8 <__aeabi_dmul>
 8005e84:	4656      	mov	r6, sl
 8005e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e8a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005e8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e90:	f7fa fdd2 	bl	8000a38 <__aeabi_d2iz>
 8005e94:	4605      	mov	r5, r0
 8005e96:	f7fa fab5 	bl	8000404 <__aeabi_i2d>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ea2:	f7fa f961 	bl	8000168 <__aeabi_dsub>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	3530      	adds	r5, #48	@ 0x30
 8005eac:	f806 5b01 	strb.w	r5, [r6], #1
 8005eb0:	42a6      	cmp	r6, r4
 8005eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	d124      	bne.n	8005f06 <_dtoa_r+0x62e>
 8005ebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ec0:	4bae      	ldr	r3, [pc, #696]	@ (800617c <_dtoa_r+0x8a4>)
 8005ec2:	f7fa f953 	bl	800016c <__adddf3>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ece:	f7fa fd93 	bl	80009f8 <__aeabi_dcmpgt>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d163      	bne.n	8005f9e <_dtoa_r+0x6c6>
 8005ed6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005eda:	2000      	movs	r0, #0
 8005edc:	49a7      	ldr	r1, [pc, #668]	@ (800617c <_dtoa_r+0x8a4>)
 8005ede:	f7fa f943 	bl	8000168 <__aeabi_dsub>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005eea:	f7fa fd67 	bl	80009bc <__aeabi_dcmplt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f af14 	beq.w	8005d1c <_dtoa_r+0x444>
 8005ef4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005ef6:	1e73      	subs	r3, r6, #1
 8005ef8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005efa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005efe:	2b30      	cmp	r3, #48	@ 0x30
 8005f00:	d0f8      	beq.n	8005ef4 <_dtoa_r+0x61c>
 8005f02:	4647      	mov	r7, r8
 8005f04:	e03b      	b.n	8005f7e <_dtoa_r+0x6a6>
 8005f06:	4b9e      	ldr	r3, [pc, #632]	@ (8006180 <_dtoa_r+0x8a8>)
 8005f08:	f7fa fae6 	bl	80004d8 <__aeabi_dmul>
 8005f0c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005f10:	e7bc      	b.n	8005e8c <_dtoa_r+0x5b4>
 8005f12:	4656      	mov	r6, sl
 8005f14:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fc04 	bl	800072c <__aeabi_ddiv>
 8005f24:	f7fa fd88 	bl	8000a38 <__aeabi_d2iz>
 8005f28:	4680      	mov	r8, r0
 8005f2a:	f7fa fa6b 	bl	8000404 <__aeabi_i2d>
 8005f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f32:	f7fa fad1 	bl	80004d8 <__aeabi_dmul>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	f7fa f913 	bl	8000168 <__aeabi_dsub>
 8005f42:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f46:	9d08      	ldr	r5, [sp, #32]
 8005f48:	f806 4b01 	strb.w	r4, [r6], #1
 8005f4c:	eba6 040a 	sub.w	r4, r6, sl
 8005f50:	42a5      	cmp	r5, r4
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	d133      	bne.n	8005fc0 <_dtoa_r+0x6e8>
 8005f58:	f7fa f908 	bl	800016c <__adddf3>
 8005f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	f7fa fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8005f68:	b9c0      	cbnz	r0, 8005f9c <_dtoa_r+0x6c4>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa fd19 	bl	80009a8 <__aeabi_dcmpeq>
 8005f76:	b110      	cbz	r0, 8005f7e <_dtoa_r+0x6a6>
 8005f78:	f018 0f01 	tst.w	r8, #1
 8005f7c:	d10e      	bne.n	8005f9c <_dtoa_r+0x6c4>
 8005f7e:	4648      	mov	r0, r9
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	f000 fbbb 	bl	80066fc <_Bfree>
 8005f86:	2300      	movs	r3, #0
 8005f88:	7033      	strb	r3, [r6, #0]
 8005f8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f8c:	3701      	adds	r7, #1
 8005f8e:	601f      	str	r7, [r3, #0]
 8005f90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 824b 	beq.w	800642e <_dtoa_r+0xb56>
 8005f98:	601e      	str	r6, [r3, #0]
 8005f9a:	e248      	b.n	800642e <_dtoa_r+0xb56>
 8005f9c:	46b8      	mov	r8, r7
 8005f9e:	4633      	mov	r3, r6
 8005fa0:	461e      	mov	r6, r3
 8005fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fa6:	2a39      	cmp	r2, #57	@ 0x39
 8005fa8:	d106      	bne.n	8005fb8 <_dtoa_r+0x6e0>
 8005faa:	459a      	cmp	sl, r3
 8005fac:	d1f8      	bne.n	8005fa0 <_dtoa_r+0x6c8>
 8005fae:	2230      	movs	r2, #48	@ 0x30
 8005fb0:	f108 0801 	add.w	r8, r8, #1
 8005fb4:	f88a 2000 	strb.w	r2, [sl]
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	3201      	adds	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e7a0      	b.n	8005f02 <_dtoa_r+0x62a>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8006180 <_dtoa_r+0x8a8>)
 8005fc4:	f7fa fa88 	bl	80004d8 <__aeabi_dmul>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	4604      	mov	r4, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	f7fa fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d09f      	beq.n	8005f18 <_dtoa_r+0x640>
 8005fd8:	e7d1      	b.n	8005f7e <_dtoa_r+0x6a6>
 8005fda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005fdc:	2a00      	cmp	r2, #0
 8005fde:	f000 80ea 	beq.w	80061b6 <_dtoa_r+0x8de>
 8005fe2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fe4:	2a01      	cmp	r2, #1
 8005fe6:	f300 80cd 	bgt.w	8006184 <_dtoa_r+0x8ac>
 8005fea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	f000 80c1 	beq.w	8006174 <_dtoa_r+0x89c>
 8005ff2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005ff6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ff8:	9e04      	ldr	r6, [sp, #16]
 8005ffa:	9a04      	ldr	r2, [sp, #16]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	441a      	add	r2, r3
 8006000:	9204      	str	r2, [sp, #16]
 8006002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006004:	4648      	mov	r0, r9
 8006006:	441a      	add	r2, r3
 8006008:	9209      	str	r2, [sp, #36]	@ 0x24
 800600a:	f000 fc2b 	bl	8006864 <__i2b>
 800600e:	4605      	mov	r5, r0
 8006010:	b166      	cbz	r6, 800602c <_dtoa_r+0x754>
 8006012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd09      	ble.n	800602c <_dtoa_r+0x754>
 8006018:	42b3      	cmp	r3, r6
 800601a:	bfa8      	it	ge
 800601c:	4633      	movge	r3, r6
 800601e:	9a04      	ldr	r2, [sp, #16]
 8006020:	1af6      	subs	r6, r6, r3
 8006022:	1ad2      	subs	r2, r2, r3
 8006024:	9204      	str	r2, [sp, #16]
 8006026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	9309      	str	r3, [sp, #36]	@ 0x24
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	b30b      	cbz	r3, 8006074 <_dtoa_r+0x79c>
 8006030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80c6 	beq.w	80061c4 <_dtoa_r+0x8ec>
 8006038:	2c00      	cmp	r4, #0
 800603a:	f000 80c0 	beq.w	80061be <_dtoa_r+0x8e6>
 800603e:	4629      	mov	r1, r5
 8006040:	4622      	mov	r2, r4
 8006042:	4648      	mov	r0, r9
 8006044:	f000 fcc6 	bl	80069d4 <__pow5mult>
 8006048:	9a03      	ldr	r2, [sp, #12]
 800604a:	4601      	mov	r1, r0
 800604c:	4605      	mov	r5, r0
 800604e:	4648      	mov	r0, r9
 8006050:	f000 fc1e 	bl	8006890 <__multiply>
 8006054:	9903      	ldr	r1, [sp, #12]
 8006056:	4680      	mov	r8, r0
 8006058:	4648      	mov	r0, r9
 800605a:	f000 fb4f 	bl	80066fc <_Bfree>
 800605e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006060:	1b1b      	subs	r3, r3, r4
 8006062:	930a      	str	r3, [sp, #40]	@ 0x28
 8006064:	f000 80b1 	beq.w	80061ca <_dtoa_r+0x8f2>
 8006068:	4641      	mov	r1, r8
 800606a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800606c:	4648      	mov	r0, r9
 800606e:	f000 fcb1 	bl	80069d4 <__pow5mult>
 8006072:	9003      	str	r0, [sp, #12]
 8006074:	2101      	movs	r1, #1
 8006076:	4648      	mov	r0, r9
 8006078:	f000 fbf4 	bl	8006864 <__i2b>
 800607c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800607e:	4604      	mov	r4, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 81d8 	beq.w	8006436 <_dtoa_r+0xb5e>
 8006086:	461a      	mov	r2, r3
 8006088:	4601      	mov	r1, r0
 800608a:	4648      	mov	r0, r9
 800608c:	f000 fca2 	bl	80069d4 <__pow5mult>
 8006090:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006092:	4604      	mov	r4, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	f300 809f 	bgt.w	80061d8 <_dtoa_r+0x900>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 8097 	bne.w	80061d0 <_dtoa_r+0x8f8>
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 8093 	bne.w	80061d4 <_dtoa_r+0x8fc>
 80060ae:	9b07      	ldr	r3, [sp, #28]
 80060b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	051b      	lsls	r3, r3, #20
 80060b8:	b133      	cbz	r3, 80060c8 <_dtoa_r+0x7f0>
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	3301      	adds	r3, #1
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c2:	3301      	adds	r3, #1
 80060c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c6:	2301      	movs	r3, #1
 80060c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80060ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 81b8 	beq.w	8006442 <_dtoa_r+0xb6a>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060d8:	6918      	ldr	r0, [r3, #16]
 80060da:	f000 fb77 	bl	80067cc <__hi0bits>
 80060de:	f1c0 0020 	rsb	r0, r0, #32
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	4418      	add	r0, r3
 80060e6:	f010 001f 	ands.w	r0, r0, #31
 80060ea:	f000 8082 	beq.w	80061f2 <_dtoa_r+0x91a>
 80060ee:	f1c0 0320 	rsb	r3, r0, #32
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	dd73      	ble.n	80061de <_dtoa_r+0x906>
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	f1c0 001c 	rsb	r0, r0, #28
 80060fc:	4403      	add	r3, r0
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006102:	4406      	add	r6, r0
 8006104:	4403      	add	r3, r0
 8006106:	9309      	str	r3, [sp, #36]	@ 0x24
 8006108:	9b04      	ldr	r3, [sp, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	dd05      	ble.n	800611a <_dtoa_r+0x842>
 800610e:	461a      	mov	r2, r3
 8006110:	4648      	mov	r0, r9
 8006112:	9903      	ldr	r1, [sp, #12]
 8006114:	f000 fcb8 	bl	8006a88 <__lshift>
 8006118:	9003      	str	r0, [sp, #12]
 800611a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd05      	ble.n	800612c <_dtoa_r+0x854>
 8006120:	4621      	mov	r1, r4
 8006122:	461a      	mov	r2, r3
 8006124:	4648      	mov	r0, r9
 8006126:	f000 fcaf 	bl	8006a88 <__lshift>
 800612a:	4604      	mov	r4, r0
 800612c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d061      	beq.n	80061f6 <_dtoa_r+0x91e>
 8006132:	4621      	mov	r1, r4
 8006134:	9803      	ldr	r0, [sp, #12]
 8006136:	f000 fd13 	bl	8006b60 <__mcmp>
 800613a:	2800      	cmp	r0, #0
 800613c:	da5b      	bge.n	80061f6 <_dtoa_r+0x91e>
 800613e:	2300      	movs	r3, #0
 8006140:	220a      	movs	r2, #10
 8006142:	4648      	mov	r0, r9
 8006144:	9903      	ldr	r1, [sp, #12]
 8006146:	f000 fafb 	bl	8006740 <__multadd>
 800614a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800614c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006150:	9003      	str	r0, [sp, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8177 	beq.w	8006446 <_dtoa_r+0xb6e>
 8006158:	4629      	mov	r1, r5
 800615a:	2300      	movs	r3, #0
 800615c:	220a      	movs	r2, #10
 800615e:	4648      	mov	r0, r9
 8006160:	f000 faee 	bl	8006740 <__multadd>
 8006164:	f1bb 0f00 	cmp.w	fp, #0
 8006168:	4605      	mov	r5, r0
 800616a:	dc6f      	bgt.n	800624c <_dtoa_r+0x974>
 800616c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800616e:	2b02      	cmp	r3, #2
 8006170:	dc49      	bgt.n	8006206 <_dtoa_r+0x92e>
 8006172:	e06b      	b.n	800624c <_dtoa_r+0x974>
 8006174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006176:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800617a:	e73c      	b.n	8005ff6 <_dtoa_r+0x71e>
 800617c:	3fe00000 	.word	0x3fe00000
 8006180:	40240000 	.word	0x40240000
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	1e5c      	subs	r4, r3, #1
 8006188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800618a:	42a3      	cmp	r3, r4
 800618c:	db09      	blt.n	80061a2 <_dtoa_r+0x8ca>
 800618e:	1b1c      	subs	r4, r3, r4
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	2b00      	cmp	r3, #0
 8006194:	f6bf af30 	bge.w	8005ff8 <_dtoa_r+0x720>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	9a08      	ldr	r2, [sp, #32]
 800619c:	1a9e      	subs	r6, r3, r2
 800619e:	2300      	movs	r3, #0
 80061a0:	e72b      	b.n	8005ffa <_dtoa_r+0x722>
 80061a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061a6:	1ae3      	subs	r3, r4, r3
 80061a8:	441a      	add	r2, r3
 80061aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80061ac:	9e04      	ldr	r6, [sp, #16]
 80061ae:	2400      	movs	r4, #0
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80061b4:	e721      	b.n	8005ffa <_dtoa_r+0x722>
 80061b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061b8:	9e04      	ldr	r6, [sp, #16]
 80061ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061bc:	e728      	b.n	8006010 <_dtoa_r+0x738>
 80061be:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061c2:	e751      	b.n	8006068 <_dtoa_r+0x790>
 80061c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061c6:	9903      	ldr	r1, [sp, #12]
 80061c8:	e750      	b.n	800606c <_dtoa_r+0x794>
 80061ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ce:	e751      	b.n	8006074 <_dtoa_r+0x79c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	e779      	b.n	80060c8 <_dtoa_r+0x7f0>
 80061d4:	9b06      	ldr	r3, [sp, #24]
 80061d6:	e777      	b.n	80060c8 <_dtoa_r+0x7f0>
 80061d8:	2300      	movs	r3, #0
 80061da:	930a      	str	r3, [sp, #40]	@ 0x28
 80061dc:	e779      	b.n	80060d2 <_dtoa_r+0x7fa>
 80061de:	d093      	beq.n	8006108 <_dtoa_r+0x830>
 80061e0:	9a04      	ldr	r2, [sp, #16]
 80061e2:	331c      	adds	r3, #28
 80061e4:	441a      	add	r2, r3
 80061e6:	9204      	str	r2, [sp, #16]
 80061e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ea:	441e      	add	r6, r3
 80061ec:	441a      	add	r2, r3
 80061ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80061f0:	e78a      	b.n	8006108 <_dtoa_r+0x830>
 80061f2:	4603      	mov	r3, r0
 80061f4:	e7f4      	b.n	80061e0 <_dtoa_r+0x908>
 80061f6:	9b08      	ldr	r3, [sp, #32]
 80061f8:	46b8      	mov	r8, r7
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dc20      	bgt.n	8006240 <_dtoa_r+0x968>
 80061fe:	469b      	mov	fp, r3
 8006200:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006202:	2b02      	cmp	r3, #2
 8006204:	dd1e      	ble.n	8006244 <_dtoa_r+0x96c>
 8006206:	f1bb 0f00 	cmp.w	fp, #0
 800620a:	f47f adb1 	bne.w	8005d70 <_dtoa_r+0x498>
 800620e:	4621      	mov	r1, r4
 8006210:	465b      	mov	r3, fp
 8006212:	2205      	movs	r2, #5
 8006214:	4648      	mov	r0, r9
 8006216:	f000 fa93 	bl	8006740 <__multadd>
 800621a:	4601      	mov	r1, r0
 800621c:	4604      	mov	r4, r0
 800621e:	9803      	ldr	r0, [sp, #12]
 8006220:	f000 fc9e 	bl	8006b60 <__mcmp>
 8006224:	2800      	cmp	r0, #0
 8006226:	f77f ada3 	ble.w	8005d70 <_dtoa_r+0x498>
 800622a:	4656      	mov	r6, sl
 800622c:	2331      	movs	r3, #49	@ 0x31
 800622e:	f108 0801 	add.w	r8, r8, #1
 8006232:	f806 3b01 	strb.w	r3, [r6], #1
 8006236:	e59f      	b.n	8005d78 <_dtoa_r+0x4a0>
 8006238:	46b8      	mov	r8, r7
 800623a:	9c08      	ldr	r4, [sp, #32]
 800623c:	4625      	mov	r5, r4
 800623e:	e7f4      	b.n	800622a <_dtoa_r+0x952>
 8006240:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8101 	beq.w	800644e <_dtoa_r+0xb76>
 800624c:	2e00      	cmp	r6, #0
 800624e:	dd05      	ble.n	800625c <_dtoa_r+0x984>
 8006250:	4629      	mov	r1, r5
 8006252:	4632      	mov	r2, r6
 8006254:	4648      	mov	r0, r9
 8006256:	f000 fc17 	bl	8006a88 <__lshift>
 800625a:	4605      	mov	r5, r0
 800625c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05c      	beq.n	800631c <_dtoa_r+0xa44>
 8006262:	4648      	mov	r0, r9
 8006264:	6869      	ldr	r1, [r5, #4]
 8006266:	f000 fa09 	bl	800667c <_Balloc>
 800626a:	4606      	mov	r6, r0
 800626c:	b928      	cbnz	r0, 800627a <_dtoa_r+0x9a2>
 800626e:	4602      	mov	r2, r0
 8006270:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006274:	4b80      	ldr	r3, [pc, #512]	@ (8006478 <_dtoa_r+0xba0>)
 8006276:	f7ff bb43 	b.w	8005900 <_dtoa_r+0x28>
 800627a:	692a      	ldr	r2, [r5, #16]
 800627c:	f105 010c 	add.w	r1, r5, #12
 8006280:	3202      	adds	r2, #2
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	300c      	adds	r0, #12
 8006286:	f000 ff9d 	bl	80071c4 <memcpy>
 800628a:	2201      	movs	r2, #1
 800628c:	4631      	mov	r1, r6
 800628e:	4648      	mov	r0, r9
 8006290:	f000 fbfa 	bl	8006a88 <__lshift>
 8006294:	462f      	mov	r7, r5
 8006296:	4605      	mov	r5, r0
 8006298:	f10a 0301 	add.w	r3, sl, #1
 800629c:	9304      	str	r3, [sp, #16]
 800629e:	eb0a 030b 	add.w	r3, sl, fp
 80062a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	4621      	mov	r1, r4
 80062b0:	9803      	ldr	r0, [sp, #12]
 80062b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80062b6:	f7ff fa84 	bl	80057c2 <quorem>
 80062ba:	4603      	mov	r3, r0
 80062bc:	4639      	mov	r1, r7
 80062be:	3330      	adds	r3, #48	@ 0x30
 80062c0:	9006      	str	r0, [sp, #24]
 80062c2:	9803      	ldr	r0, [sp, #12]
 80062c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062c6:	f000 fc4b 	bl	8006b60 <__mcmp>
 80062ca:	462a      	mov	r2, r5
 80062cc:	9008      	str	r0, [sp, #32]
 80062ce:	4621      	mov	r1, r4
 80062d0:	4648      	mov	r0, r9
 80062d2:	f000 fc61 	bl	8006b98 <__mdiff>
 80062d6:	68c2      	ldr	r2, [r0, #12]
 80062d8:	4606      	mov	r6, r0
 80062da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062dc:	bb02      	cbnz	r2, 8006320 <_dtoa_r+0xa48>
 80062de:	4601      	mov	r1, r0
 80062e0:	9803      	ldr	r0, [sp, #12]
 80062e2:	f000 fc3d 	bl	8006b60 <__mcmp>
 80062e6:	4602      	mov	r2, r0
 80062e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ea:	4631      	mov	r1, r6
 80062ec:	4648      	mov	r0, r9
 80062ee:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80062f2:	f000 fa03 	bl	80066fc <_Bfree>
 80062f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80062fa:	9e04      	ldr	r6, [sp, #16]
 80062fc:	ea42 0103 	orr.w	r1, r2, r3
 8006300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006302:	4319      	orrs	r1, r3
 8006304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006306:	d10d      	bne.n	8006324 <_dtoa_r+0xa4c>
 8006308:	2b39      	cmp	r3, #57	@ 0x39
 800630a:	d027      	beq.n	800635c <_dtoa_r+0xa84>
 800630c:	9a08      	ldr	r2, [sp, #32]
 800630e:	2a00      	cmp	r2, #0
 8006310:	dd01      	ble.n	8006316 <_dtoa_r+0xa3e>
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	3331      	adds	r3, #49	@ 0x31
 8006316:	f88b 3000 	strb.w	r3, [fp]
 800631a:	e52e      	b.n	8005d7a <_dtoa_r+0x4a2>
 800631c:	4628      	mov	r0, r5
 800631e:	e7b9      	b.n	8006294 <_dtoa_r+0x9bc>
 8006320:	2201      	movs	r2, #1
 8006322:	e7e2      	b.n	80062ea <_dtoa_r+0xa12>
 8006324:	9908      	ldr	r1, [sp, #32]
 8006326:	2900      	cmp	r1, #0
 8006328:	db04      	blt.n	8006334 <_dtoa_r+0xa5c>
 800632a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800632c:	4301      	orrs	r1, r0
 800632e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006330:	4301      	orrs	r1, r0
 8006332:	d120      	bne.n	8006376 <_dtoa_r+0xa9e>
 8006334:	2a00      	cmp	r2, #0
 8006336:	ddee      	ble.n	8006316 <_dtoa_r+0xa3e>
 8006338:	2201      	movs	r2, #1
 800633a:	9903      	ldr	r1, [sp, #12]
 800633c:	4648      	mov	r0, r9
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	f000 fba2 	bl	8006a88 <__lshift>
 8006344:	4621      	mov	r1, r4
 8006346:	9003      	str	r0, [sp, #12]
 8006348:	f000 fc0a 	bl	8006b60 <__mcmp>
 800634c:	2800      	cmp	r0, #0
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	dc02      	bgt.n	8006358 <_dtoa_r+0xa80>
 8006352:	d1e0      	bne.n	8006316 <_dtoa_r+0xa3e>
 8006354:	07da      	lsls	r2, r3, #31
 8006356:	d5de      	bpl.n	8006316 <_dtoa_r+0xa3e>
 8006358:	2b39      	cmp	r3, #57	@ 0x39
 800635a:	d1da      	bne.n	8006312 <_dtoa_r+0xa3a>
 800635c:	2339      	movs	r3, #57	@ 0x39
 800635e:	f88b 3000 	strb.w	r3, [fp]
 8006362:	4633      	mov	r3, r6
 8006364:	461e      	mov	r6, r3
 8006366:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800636a:	3b01      	subs	r3, #1
 800636c:	2a39      	cmp	r2, #57	@ 0x39
 800636e:	d04e      	beq.n	800640e <_dtoa_r+0xb36>
 8006370:	3201      	adds	r2, #1
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e501      	b.n	8005d7a <_dtoa_r+0x4a2>
 8006376:	2a00      	cmp	r2, #0
 8006378:	dd03      	ble.n	8006382 <_dtoa_r+0xaaa>
 800637a:	2b39      	cmp	r3, #57	@ 0x39
 800637c:	d0ee      	beq.n	800635c <_dtoa_r+0xa84>
 800637e:	3301      	adds	r3, #1
 8006380:	e7c9      	b.n	8006316 <_dtoa_r+0xa3e>
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800638a:	428a      	cmp	r2, r1
 800638c:	d028      	beq.n	80063e0 <_dtoa_r+0xb08>
 800638e:	2300      	movs	r3, #0
 8006390:	220a      	movs	r2, #10
 8006392:	9903      	ldr	r1, [sp, #12]
 8006394:	4648      	mov	r0, r9
 8006396:	f000 f9d3 	bl	8006740 <__multadd>
 800639a:	42af      	cmp	r7, r5
 800639c:	9003      	str	r0, [sp, #12]
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	f04f 020a 	mov.w	r2, #10
 80063a6:	4639      	mov	r1, r7
 80063a8:	4648      	mov	r0, r9
 80063aa:	d107      	bne.n	80063bc <_dtoa_r+0xae4>
 80063ac:	f000 f9c8 	bl	8006740 <__multadd>
 80063b0:	4607      	mov	r7, r0
 80063b2:	4605      	mov	r5, r0
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	3301      	adds	r3, #1
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	e777      	b.n	80062ac <_dtoa_r+0x9d4>
 80063bc:	f000 f9c0 	bl	8006740 <__multadd>
 80063c0:	4629      	mov	r1, r5
 80063c2:	4607      	mov	r7, r0
 80063c4:	2300      	movs	r3, #0
 80063c6:	220a      	movs	r2, #10
 80063c8:	4648      	mov	r0, r9
 80063ca:	f000 f9b9 	bl	8006740 <__multadd>
 80063ce:	4605      	mov	r5, r0
 80063d0:	e7f0      	b.n	80063b4 <_dtoa_r+0xadc>
 80063d2:	f1bb 0f00 	cmp.w	fp, #0
 80063d6:	bfcc      	ite	gt
 80063d8:	465e      	movgt	r6, fp
 80063da:	2601      	movle	r6, #1
 80063dc:	2700      	movs	r7, #0
 80063de:	4456      	add	r6, sl
 80063e0:	2201      	movs	r2, #1
 80063e2:	9903      	ldr	r1, [sp, #12]
 80063e4:	4648      	mov	r0, r9
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	f000 fb4e 	bl	8006a88 <__lshift>
 80063ec:	4621      	mov	r1, r4
 80063ee:	9003      	str	r0, [sp, #12]
 80063f0:	f000 fbb6 	bl	8006b60 <__mcmp>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	dcb4      	bgt.n	8006362 <_dtoa_r+0xa8a>
 80063f8:	d102      	bne.n	8006400 <_dtoa_r+0xb28>
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	07db      	lsls	r3, r3, #31
 80063fe:	d4b0      	bmi.n	8006362 <_dtoa_r+0xa8a>
 8006400:	4633      	mov	r3, r6
 8006402:	461e      	mov	r6, r3
 8006404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006408:	2a30      	cmp	r2, #48	@ 0x30
 800640a:	d0fa      	beq.n	8006402 <_dtoa_r+0xb2a>
 800640c:	e4b5      	b.n	8005d7a <_dtoa_r+0x4a2>
 800640e:	459a      	cmp	sl, r3
 8006410:	d1a8      	bne.n	8006364 <_dtoa_r+0xa8c>
 8006412:	2331      	movs	r3, #49	@ 0x31
 8006414:	f108 0801 	add.w	r8, r8, #1
 8006418:	f88a 3000 	strb.w	r3, [sl]
 800641c:	e4ad      	b.n	8005d7a <_dtoa_r+0x4a2>
 800641e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006420:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800647c <_dtoa_r+0xba4>
 8006424:	b11b      	cbz	r3, 800642e <_dtoa_r+0xb56>
 8006426:	f10a 0308 	add.w	r3, sl, #8
 800642a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4650      	mov	r0, sl
 8006430:	b017      	add	sp, #92	@ 0x5c
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006438:	2b01      	cmp	r3, #1
 800643a:	f77f ae2e 	ble.w	800609a <_dtoa_r+0x7c2>
 800643e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006440:	930a      	str	r3, [sp, #40]	@ 0x28
 8006442:	2001      	movs	r0, #1
 8006444:	e64d      	b.n	80060e2 <_dtoa_r+0x80a>
 8006446:	f1bb 0f00 	cmp.w	fp, #0
 800644a:	f77f aed9 	ble.w	8006200 <_dtoa_r+0x928>
 800644e:	4656      	mov	r6, sl
 8006450:	4621      	mov	r1, r4
 8006452:	9803      	ldr	r0, [sp, #12]
 8006454:	f7ff f9b5 	bl	80057c2 <quorem>
 8006458:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800645c:	f806 3b01 	strb.w	r3, [r6], #1
 8006460:	eba6 020a 	sub.w	r2, r6, sl
 8006464:	4593      	cmp	fp, r2
 8006466:	ddb4      	ble.n	80063d2 <_dtoa_r+0xafa>
 8006468:	2300      	movs	r3, #0
 800646a:	220a      	movs	r2, #10
 800646c:	4648      	mov	r0, r9
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	f000 f966 	bl	8006740 <__multadd>
 8006474:	9003      	str	r0, [sp, #12]
 8006476:	e7eb      	b.n	8006450 <_dtoa_r+0xb78>
 8006478:	0800899f 	.word	0x0800899f
 800647c:	08008923 	.word	0x08008923

08006480 <_free_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4605      	mov	r5, r0
 8006484:	2900      	cmp	r1, #0
 8006486:	d040      	beq.n	800650a <_free_r+0x8a>
 8006488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800648c:	1f0c      	subs	r4, r1, #4
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfb8      	it	lt
 8006492:	18e4      	addlt	r4, r4, r3
 8006494:	f000 f8e6 	bl	8006664 <__malloc_lock>
 8006498:	4a1c      	ldr	r2, [pc, #112]	@ (800650c <_free_r+0x8c>)
 800649a:	6813      	ldr	r3, [r2, #0]
 800649c:	b933      	cbnz	r3, 80064ac <_free_r+0x2c>
 800649e:	6063      	str	r3, [r4, #4]
 80064a0:	6014      	str	r4, [r2, #0]
 80064a2:	4628      	mov	r0, r5
 80064a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a8:	f000 b8e2 	b.w	8006670 <__malloc_unlock>
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d908      	bls.n	80064c2 <_free_r+0x42>
 80064b0:	6820      	ldr	r0, [r4, #0]
 80064b2:	1821      	adds	r1, r4, r0
 80064b4:	428b      	cmp	r3, r1
 80064b6:	bf01      	itttt	eq
 80064b8:	6819      	ldreq	r1, [r3, #0]
 80064ba:	685b      	ldreq	r3, [r3, #4]
 80064bc:	1809      	addeq	r1, r1, r0
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	e7ed      	b.n	800649e <_free_r+0x1e>
 80064c2:	461a      	mov	r2, r3
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	b10b      	cbz	r3, 80064cc <_free_r+0x4c>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d9fa      	bls.n	80064c2 <_free_r+0x42>
 80064cc:	6811      	ldr	r1, [r2, #0]
 80064ce:	1850      	adds	r0, r2, r1
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d10b      	bne.n	80064ec <_free_r+0x6c>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	4401      	add	r1, r0
 80064d8:	1850      	adds	r0, r2, r1
 80064da:	4283      	cmp	r3, r0
 80064dc:	6011      	str	r1, [r2, #0]
 80064de:	d1e0      	bne.n	80064a2 <_free_r+0x22>
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4408      	add	r0, r1
 80064e6:	6010      	str	r0, [r2, #0]
 80064e8:	6053      	str	r3, [r2, #4]
 80064ea:	e7da      	b.n	80064a2 <_free_r+0x22>
 80064ec:	d902      	bls.n	80064f4 <_free_r+0x74>
 80064ee:	230c      	movs	r3, #12
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	e7d6      	b.n	80064a2 <_free_r+0x22>
 80064f4:	6820      	ldr	r0, [r4, #0]
 80064f6:	1821      	adds	r1, r4, r0
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf01      	itttt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	1809      	addeq	r1, r1, r0
 8006502:	6021      	streq	r1, [r4, #0]
 8006504:	6063      	str	r3, [r4, #4]
 8006506:	6054      	str	r4, [r2, #4]
 8006508:	e7cb      	b.n	80064a2 <_free_r+0x22>
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000ddc 	.word	0x20000ddc

08006510 <malloc>:
 8006510:	4b02      	ldr	r3, [pc, #8]	@ (800651c <malloc+0xc>)
 8006512:	4601      	mov	r1, r0
 8006514:	6818      	ldr	r0, [r3, #0]
 8006516:	f000 b825 	b.w	8006564 <_malloc_r>
 800651a:	bf00      	nop
 800651c:	20000020 	.word	0x20000020

08006520 <sbrk_aligned>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4e0f      	ldr	r6, [pc, #60]	@ (8006560 <sbrk_aligned+0x40>)
 8006524:	460c      	mov	r4, r1
 8006526:	6831      	ldr	r1, [r6, #0]
 8006528:	4605      	mov	r5, r0
 800652a:	b911      	cbnz	r1, 8006532 <sbrk_aligned+0x12>
 800652c:	f000 fe3a 	bl	80071a4 <_sbrk_r>
 8006530:	6030      	str	r0, [r6, #0]
 8006532:	4621      	mov	r1, r4
 8006534:	4628      	mov	r0, r5
 8006536:	f000 fe35 	bl	80071a4 <_sbrk_r>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	d103      	bne.n	8006546 <sbrk_aligned+0x26>
 800653e:	f04f 34ff 	mov.w	r4, #4294967295
 8006542:	4620      	mov	r0, r4
 8006544:	bd70      	pop	{r4, r5, r6, pc}
 8006546:	1cc4      	adds	r4, r0, #3
 8006548:	f024 0403 	bic.w	r4, r4, #3
 800654c:	42a0      	cmp	r0, r4
 800654e:	d0f8      	beq.n	8006542 <sbrk_aligned+0x22>
 8006550:	1a21      	subs	r1, r4, r0
 8006552:	4628      	mov	r0, r5
 8006554:	f000 fe26 	bl	80071a4 <_sbrk_r>
 8006558:	3001      	adds	r0, #1
 800655a:	d1f2      	bne.n	8006542 <sbrk_aligned+0x22>
 800655c:	e7ef      	b.n	800653e <sbrk_aligned+0x1e>
 800655e:	bf00      	nop
 8006560:	20000dd8 	.word	0x20000dd8

08006564 <_malloc_r>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	1ccd      	adds	r5, r1, #3
 800656a:	f025 0503 	bic.w	r5, r5, #3
 800656e:	3508      	adds	r5, #8
 8006570:	2d0c      	cmp	r5, #12
 8006572:	bf38      	it	cc
 8006574:	250c      	movcc	r5, #12
 8006576:	2d00      	cmp	r5, #0
 8006578:	4606      	mov	r6, r0
 800657a:	db01      	blt.n	8006580 <_malloc_r+0x1c>
 800657c:	42a9      	cmp	r1, r5
 800657e:	d904      	bls.n	800658a <_malloc_r+0x26>
 8006580:	230c      	movs	r3, #12
 8006582:	6033      	str	r3, [r6, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006660 <_malloc_r+0xfc>
 800658e:	f000 f869 	bl	8006664 <__malloc_lock>
 8006592:	f8d8 3000 	ldr.w	r3, [r8]
 8006596:	461c      	mov	r4, r3
 8006598:	bb44      	cbnz	r4, 80065ec <_malloc_r+0x88>
 800659a:	4629      	mov	r1, r5
 800659c:	4630      	mov	r0, r6
 800659e:	f7ff ffbf 	bl	8006520 <sbrk_aligned>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	4604      	mov	r4, r0
 80065a6:	d158      	bne.n	800665a <_malloc_r+0xf6>
 80065a8:	f8d8 4000 	ldr.w	r4, [r8]
 80065ac:	4627      	mov	r7, r4
 80065ae:	2f00      	cmp	r7, #0
 80065b0:	d143      	bne.n	800663a <_malloc_r+0xd6>
 80065b2:	2c00      	cmp	r4, #0
 80065b4:	d04b      	beq.n	800664e <_malloc_r+0xea>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	4639      	mov	r1, r7
 80065ba:	4630      	mov	r0, r6
 80065bc:	eb04 0903 	add.w	r9, r4, r3
 80065c0:	f000 fdf0 	bl	80071a4 <_sbrk_r>
 80065c4:	4581      	cmp	r9, r0
 80065c6:	d142      	bne.n	800664e <_malloc_r+0xea>
 80065c8:	6821      	ldr	r1, [r4, #0]
 80065ca:	4630      	mov	r0, r6
 80065cc:	1a6d      	subs	r5, r5, r1
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7ff ffa6 	bl	8006520 <sbrk_aligned>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d03a      	beq.n	800664e <_malloc_r+0xea>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	442b      	add	r3, r5
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	f8d8 3000 	ldr.w	r3, [r8]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	bb62      	cbnz	r2, 8006640 <_malloc_r+0xdc>
 80065e6:	f8c8 7000 	str.w	r7, [r8]
 80065ea:	e00f      	b.n	800660c <_malloc_r+0xa8>
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	1b52      	subs	r2, r2, r5
 80065f0:	d420      	bmi.n	8006634 <_malloc_r+0xd0>
 80065f2:	2a0b      	cmp	r2, #11
 80065f4:	d917      	bls.n	8006626 <_malloc_r+0xc2>
 80065f6:	1961      	adds	r1, r4, r5
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	6025      	str	r5, [r4, #0]
 80065fc:	bf18      	it	ne
 80065fe:	6059      	strne	r1, [r3, #4]
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	bf08      	it	eq
 8006604:	f8c8 1000 	streq.w	r1, [r8]
 8006608:	5162      	str	r2, [r4, r5]
 800660a:	604b      	str	r3, [r1, #4]
 800660c:	4630      	mov	r0, r6
 800660e:	f000 f82f 	bl	8006670 <__malloc_unlock>
 8006612:	f104 000b 	add.w	r0, r4, #11
 8006616:	1d23      	adds	r3, r4, #4
 8006618:	f020 0007 	bic.w	r0, r0, #7
 800661c:	1ac2      	subs	r2, r0, r3
 800661e:	bf1c      	itt	ne
 8006620:	1a1b      	subne	r3, r3, r0
 8006622:	50a3      	strne	r3, [r4, r2]
 8006624:	e7af      	b.n	8006586 <_malloc_r+0x22>
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	42a3      	cmp	r3, r4
 800662a:	bf0c      	ite	eq
 800662c:	f8c8 2000 	streq.w	r2, [r8]
 8006630:	605a      	strne	r2, [r3, #4]
 8006632:	e7eb      	b.n	800660c <_malloc_r+0xa8>
 8006634:	4623      	mov	r3, r4
 8006636:	6864      	ldr	r4, [r4, #4]
 8006638:	e7ae      	b.n	8006598 <_malloc_r+0x34>
 800663a:	463c      	mov	r4, r7
 800663c:	687f      	ldr	r7, [r7, #4]
 800663e:	e7b6      	b.n	80065ae <_malloc_r+0x4a>
 8006640:	461a      	mov	r2, r3
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	42a3      	cmp	r3, r4
 8006646:	d1fb      	bne.n	8006640 <_malloc_r+0xdc>
 8006648:	2300      	movs	r3, #0
 800664a:	6053      	str	r3, [r2, #4]
 800664c:	e7de      	b.n	800660c <_malloc_r+0xa8>
 800664e:	230c      	movs	r3, #12
 8006650:	4630      	mov	r0, r6
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	f000 f80c 	bl	8006670 <__malloc_unlock>
 8006658:	e794      	b.n	8006584 <_malloc_r+0x20>
 800665a:	6005      	str	r5, [r0, #0]
 800665c:	e7d6      	b.n	800660c <_malloc_r+0xa8>
 800665e:	bf00      	nop
 8006660:	20000ddc 	.word	0x20000ddc

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	@ (800666c <__malloc_lock+0x8>)
 8006666:	f7ff b89c 	b.w	80057a2 <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	20000dd4 	.word	0x20000dd4

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	@ (8006678 <__malloc_unlock+0x8>)
 8006672:	f7ff b897 	b.w	80057a4 <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	20000dd4 	.word	0x20000dd4

0800667c <_Balloc>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	69c6      	ldr	r6, [r0, #28]
 8006680:	4604      	mov	r4, r0
 8006682:	460d      	mov	r5, r1
 8006684:	b976      	cbnz	r6, 80066a4 <_Balloc+0x28>
 8006686:	2010      	movs	r0, #16
 8006688:	f7ff ff42 	bl	8006510 <malloc>
 800668c:	4602      	mov	r2, r0
 800668e:	61e0      	str	r0, [r4, #28]
 8006690:	b920      	cbnz	r0, 800669c <_Balloc+0x20>
 8006692:	216b      	movs	r1, #107	@ 0x6b
 8006694:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <_Balloc+0x78>)
 8006696:	4818      	ldr	r0, [pc, #96]	@ (80066f8 <_Balloc+0x7c>)
 8006698:	f000 fda2 	bl	80071e0 <__assert_func>
 800669c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066a0:	6006      	str	r6, [r0, #0]
 80066a2:	60c6      	str	r6, [r0, #12]
 80066a4:	69e6      	ldr	r6, [r4, #28]
 80066a6:	68f3      	ldr	r3, [r6, #12]
 80066a8:	b183      	cbz	r3, 80066cc <_Balloc+0x50>
 80066aa:	69e3      	ldr	r3, [r4, #28]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066b2:	b9b8      	cbnz	r0, 80066e4 <_Balloc+0x68>
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f605 	lsl.w	r6, r1, r5
 80066ba:	1d72      	adds	r2, r6, #5
 80066bc:	4620      	mov	r0, r4
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	f000 fdac 	bl	800721c <_calloc_r>
 80066c4:	b160      	cbz	r0, 80066e0 <_Balloc+0x64>
 80066c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066ca:	e00e      	b.n	80066ea <_Balloc+0x6e>
 80066cc:	2221      	movs	r2, #33	@ 0x21
 80066ce:	2104      	movs	r1, #4
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fda3 	bl	800721c <_calloc_r>
 80066d6:	69e3      	ldr	r3, [r4, #28]
 80066d8:	60f0      	str	r0, [r6, #12]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e4      	bne.n	80066aa <_Balloc+0x2e>
 80066e0:	2000      	movs	r0, #0
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	6802      	ldr	r2, [r0, #0]
 80066e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066ea:	2300      	movs	r3, #0
 80066ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066f0:	e7f7      	b.n	80066e2 <_Balloc+0x66>
 80066f2:	bf00      	nop
 80066f4:	08008930 	.word	0x08008930
 80066f8:	080089b0 	.word	0x080089b0

080066fc <_Bfree>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	69c6      	ldr	r6, [r0, #28]
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b976      	cbnz	r6, 8006724 <_Bfree+0x28>
 8006706:	2010      	movs	r0, #16
 8006708:	f7ff ff02 	bl	8006510 <malloc>
 800670c:	4602      	mov	r2, r0
 800670e:	61e8      	str	r0, [r5, #28]
 8006710:	b920      	cbnz	r0, 800671c <_Bfree+0x20>
 8006712:	218f      	movs	r1, #143	@ 0x8f
 8006714:	4b08      	ldr	r3, [pc, #32]	@ (8006738 <_Bfree+0x3c>)
 8006716:	4809      	ldr	r0, [pc, #36]	@ (800673c <_Bfree+0x40>)
 8006718:	f000 fd62 	bl	80071e0 <__assert_func>
 800671c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006720:	6006      	str	r6, [r0, #0]
 8006722:	60c6      	str	r6, [r0, #12]
 8006724:	b13c      	cbz	r4, 8006736 <_Bfree+0x3a>
 8006726:	69eb      	ldr	r3, [r5, #28]
 8006728:	6862      	ldr	r2, [r4, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006730:	6021      	str	r1, [r4, #0]
 8006732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	08008930 	.word	0x08008930
 800673c:	080089b0 	.word	0x080089b0

08006740 <__multadd>:
 8006740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006744:	4607      	mov	r7, r0
 8006746:	460c      	mov	r4, r1
 8006748:	461e      	mov	r6, r3
 800674a:	2000      	movs	r0, #0
 800674c:	690d      	ldr	r5, [r1, #16]
 800674e:	f101 0c14 	add.w	ip, r1, #20
 8006752:	f8dc 3000 	ldr.w	r3, [ip]
 8006756:	3001      	adds	r0, #1
 8006758:	b299      	uxth	r1, r3
 800675a:	fb02 6101 	mla	r1, r2, r1, r6
 800675e:	0c1e      	lsrs	r6, r3, #16
 8006760:	0c0b      	lsrs	r3, r1, #16
 8006762:	fb02 3306 	mla	r3, r2, r6, r3
 8006766:	b289      	uxth	r1, r1
 8006768:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800676c:	4285      	cmp	r5, r0
 800676e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006772:	f84c 1b04 	str.w	r1, [ip], #4
 8006776:	dcec      	bgt.n	8006752 <__multadd+0x12>
 8006778:	b30e      	cbz	r6, 80067be <__multadd+0x7e>
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	42ab      	cmp	r3, r5
 800677e:	dc19      	bgt.n	80067b4 <__multadd+0x74>
 8006780:	6861      	ldr	r1, [r4, #4]
 8006782:	4638      	mov	r0, r7
 8006784:	3101      	adds	r1, #1
 8006786:	f7ff ff79 	bl	800667c <_Balloc>
 800678a:	4680      	mov	r8, r0
 800678c:	b928      	cbnz	r0, 800679a <__multadd+0x5a>
 800678e:	4602      	mov	r2, r0
 8006790:	21ba      	movs	r1, #186	@ 0xba
 8006792:	4b0c      	ldr	r3, [pc, #48]	@ (80067c4 <__multadd+0x84>)
 8006794:	480c      	ldr	r0, [pc, #48]	@ (80067c8 <__multadd+0x88>)
 8006796:	f000 fd23 	bl	80071e0 <__assert_func>
 800679a:	6922      	ldr	r2, [r4, #16]
 800679c:	f104 010c 	add.w	r1, r4, #12
 80067a0:	3202      	adds	r2, #2
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	300c      	adds	r0, #12
 80067a6:	f000 fd0d 	bl	80071c4 <memcpy>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4638      	mov	r0, r7
 80067ae:	f7ff ffa5 	bl	80066fc <_Bfree>
 80067b2:	4644      	mov	r4, r8
 80067b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067b8:	3501      	adds	r5, #1
 80067ba:	615e      	str	r6, [r3, #20]
 80067bc:	6125      	str	r5, [r4, #16]
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c4:	0800899f 	.word	0x0800899f
 80067c8:	080089b0 	.word	0x080089b0

080067cc <__hi0bits>:
 80067cc:	4603      	mov	r3, r0
 80067ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80067d2:	bf3a      	itte	cc
 80067d4:	0403      	lslcc	r3, r0, #16
 80067d6:	2010      	movcc	r0, #16
 80067d8:	2000      	movcs	r0, #0
 80067da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067de:	bf3c      	itt	cc
 80067e0:	021b      	lslcc	r3, r3, #8
 80067e2:	3008      	addcc	r0, #8
 80067e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067e8:	bf3c      	itt	cc
 80067ea:	011b      	lslcc	r3, r3, #4
 80067ec:	3004      	addcc	r0, #4
 80067ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067f2:	bf3c      	itt	cc
 80067f4:	009b      	lslcc	r3, r3, #2
 80067f6:	3002      	addcc	r0, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	db05      	blt.n	8006808 <__hi0bits+0x3c>
 80067fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006800:	f100 0001 	add.w	r0, r0, #1
 8006804:	bf08      	it	eq
 8006806:	2020      	moveq	r0, #32
 8006808:	4770      	bx	lr

0800680a <__lo0bits>:
 800680a:	6803      	ldr	r3, [r0, #0]
 800680c:	4602      	mov	r2, r0
 800680e:	f013 0007 	ands.w	r0, r3, #7
 8006812:	d00b      	beq.n	800682c <__lo0bits+0x22>
 8006814:	07d9      	lsls	r1, r3, #31
 8006816:	d421      	bmi.n	800685c <__lo0bits+0x52>
 8006818:	0798      	lsls	r0, r3, #30
 800681a:	bf49      	itett	mi
 800681c:	085b      	lsrmi	r3, r3, #1
 800681e:	089b      	lsrpl	r3, r3, #2
 8006820:	2001      	movmi	r0, #1
 8006822:	6013      	strmi	r3, [r2, #0]
 8006824:	bf5c      	itt	pl
 8006826:	2002      	movpl	r0, #2
 8006828:	6013      	strpl	r3, [r2, #0]
 800682a:	4770      	bx	lr
 800682c:	b299      	uxth	r1, r3
 800682e:	b909      	cbnz	r1, 8006834 <__lo0bits+0x2a>
 8006830:	2010      	movs	r0, #16
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	b2d9      	uxtb	r1, r3
 8006836:	b909      	cbnz	r1, 800683c <__lo0bits+0x32>
 8006838:	3008      	adds	r0, #8
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	0719      	lsls	r1, r3, #28
 800683e:	bf04      	itt	eq
 8006840:	091b      	lsreq	r3, r3, #4
 8006842:	3004      	addeq	r0, #4
 8006844:	0799      	lsls	r1, r3, #30
 8006846:	bf04      	itt	eq
 8006848:	089b      	lsreq	r3, r3, #2
 800684a:	3002      	addeq	r0, #2
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	d403      	bmi.n	8006858 <__lo0bits+0x4e>
 8006850:	085b      	lsrs	r3, r3, #1
 8006852:	f100 0001 	add.w	r0, r0, #1
 8006856:	d003      	beq.n	8006860 <__lo0bits+0x56>
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4770      	bx	lr
 800685c:	2000      	movs	r0, #0
 800685e:	4770      	bx	lr
 8006860:	2020      	movs	r0, #32
 8006862:	4770      	bx	lr

08006864 <__i2b>:
 8006864:	b510      	push	{r4, lr}
 8006866:	460c      	mov	r4, r1
 8006868:	2101      	movs	r1, #1
 800686a:	f7ff ff07 	bl	800667c <_Balloc>
 800686e:	4602      	mov	r2, r0
 8006870:	b928      	cbnz	r0, 800687e <__i2b+0x1a>
 8006872:	f240 1145 	movw	r1, #325	@ 0x145
 8006876:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <__i2b+0x24>)
 8006878:	4804      	ldr	r0, [pc, #16]	@ (800688c <__i2b+0x28>)
 800687a:	f000 fcb1 	bl	80071e0 <__assert_func>
 800687e:	2301      	movs	r3, #1
 8006880:	6144      	str	r4, [r0, #20]
 8006882:	6103      	str	r3, [r0, #16]
 8006884:	bd10      	pop	{r4, pc}
 8006886:	bf00      	nop
 8006888:	0800899f 	.word	0x0800899f
 800688c:	080089b0 	.word	0x080089b0

08006890 <__multiply>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	4617      	mov	r7, r2
 8006896:	690a      	ldr	r2, [r1, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	4689      	mov	r9, r1
 800689c:	429a      	cmp	r2, r3
 800689e:	bfa2      	ittt	ge
 80068a0:	463b      	movge	r3, r7
 80068a2:	460f      	movge	r7, r1
 80068a4:	4699      	movge	r9, r3
 80068a6:	693d      	ldr	r5, [r7, #16]
 80068a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	eb05 060a 	add.w	r6, r5, sl
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	b085      	sub	sp, #20
 80068b8:	bfb8      	it	lt
 80068ba:	3101      	addlt	r1, #1
 80068bc:	f7ff fede 	bl	800667c <_Balloc>
 80068c0:	b930      	cbnz	r0, 80068d0 <__multiply+0x40>
 80068c2:	4602      	mov	r2, r0
 80068c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80068c8:	4b40      	ldr	r3, [pc, #256]	@ (80069cc <__multiply+0x13c>)
 80068ca:	4841      	ldr	r0, [pc, #260]	@ (80069d0 <__multiply+0x140>)
 80068cc:	f000 fc88 	bl	80071e0 <__assert_func>
 80068d0:	f100 0414 	add.w	r4, r0, #20
 80068d4:	4623      	mov	r3, r4
 80068d6:	2200      	movs	r2, #0
 80068d8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80068dc:	4573      	cmp	r3, lr
 80068de:	d320      	bcc.n	8006922 <__multiply+0x92>
 80068e0:	f107 0814 	add.w	r8, r7, #20
 80068e4:	f109 0114 	add.w	r1, r9, #20
 80068e8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80068ec:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	1beb      	subs	r3, r5, r7
 80068f4:	3b15      	subs	r3, #21
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	3304      	adds	r3, #4
 80068fc:	3715      	adds	r7, #21
 80068fe:	42bd      	cmp	r5, r7
 8006900:	bf38      	it	cc
 8006902:	2304      	movcc	r3, #4
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	9103      	str	r1, [sp, #12]
 800690a:	428b      	cmp	r3, r1
 800690c:	d80c      	bhi.n	8006928 <__multiply+0x98>
 800690e:	2e00      	cmp	r6, #0
 8006910:	dd03      	ble.n	800691a <__multiply+0x8a>
 8006912:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006916:	2b00      	cmp	r3, #0
 8006918:	d055      	beq.n	80069c6 <__multiply+0x136>
 800691a:	6106      	str	r6, [r0, #16]
 800691c:	b005      	add	sp, #20
 800691e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006922:	f843 2b04 	str.w	r2, [r3], #4
 8006926:	e7d9      	b.n	80068dc <__multiply+0x4c>
 8006928:	f8b1 a000 	ldrh.w	sl, [r1]
 800692c:	f1ba 0f00 	cmp.w	sl, #0
 8006930:	d01f      	beq.n	8006972 <__multiply+0xe2>
 8006932:	46c4      	mov	ip, r8
 8006934:	46a1      	mov	r9, r4
 8006936:	2700      	movs	r7, #0
 8006938:	f85c 2b04 	ldr.w	r2, [ip], #4
 800693c:	f8d9 3000 	ldr.w	r3, [r9]
 8006940:	fa1f fb82 	uxth.w	fp, r2
 8006944:	b29b      	uxth	r3, r3
 8006946:	fb0a 330b 	mla	r3, sl, fp, r3
 800694a:	443b      	add	r3, r7
 800694c:	f8d9 7000 	ldr.w	r7, [r9]
 8006950:	0c12      	lsrs	r2, r2, #16
 8006952:	0c3f      	lsrs	r7, r7, #16
 8006954:	fb0a 7202 	mla	r2, sl, r2, r7
 8006958:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800695c:	b29b      	uxth	r3, r3
 800695e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006962:	4565      	cmp	r5, ip
 8006964:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006968:	f849 3b04 	str.w	r3, [r9], #4
 800696c:	d8e4      	bhi.n	8006938 <__multiply+0xa8>
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	50e7      	str	r7, [r4, r3]
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	3104      	adds	r1, #4
 8006976:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800697a:	f1b9 0f00 	cmp.w	r9, #0
 800697e:	d020      	beq.n	80069c2 <__multiply+0x132>
 8006980:	4647      	mov	r7, r8
 8006982:	46a4      	mov	ip, r4
 8006984:	f04f 0a00 	mov.w	sl, #0
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	f8b7 b000 	ldrh.w	fp, [r7]
 800698e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006992:	b29b      	uxth	r3, r3
 8006994:	fb09 220b 	mla	r2, r9, fp, r2
 8006998:	4452      	add	r2, sl
 800699a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800699e:	f84c 3b04 	str.w	r3, [ip], #4
 80069a2:	f857 3b04 	ldr.w	r3, [r7], #4
 80069a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069aa:	f8bc 3000 	ldrh.w	r3, [ip]
 80069ae:	42bd      	cmp	r5, r7
 80069b0:	fb09 330a 	mla	r3, r9, sl, r3
 80069b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80069b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069bc:	d8e5      	bhi.n	800698a <__multiply+0xfa>
 80069be:	9a01      	ldr	r2, [sp, #4]
 80069c0:	50a3      	str	r3, [r4, r2]
 80069c2:	3404      	adds	r4, #4
 80069c4:	e79f      	b.n	8006906 <__multiply+0x76>
 80069c6:	3e01      	subs	r6, #1
 80069c8:	e7a1      	b.n	800690e <__multiply+0x7e>
 80069ca:	bf00      	nop
 80069cc:	0800899f 	.word	0x0800899f
 80069d0:	080089b0 	.word	0x080089b0

080069d4 <__pow5mult>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4615      	mov	r5, r2
 80069da:	f012 0203 	ands.w	r2, r2, #3
 80069de:	4607      	mov	r7, r0
 80069e0:	460e      	mov	r6, r1
 80069e2:	d007      	beq.n	80069f4 <__pow5mult+0x20>
 80069e4:	4c25      	ldr	r4, [pc, #148]	@ (8006a7c <__pow5mult+0xa8>)
 80069e6:	3a01      	subs	r2, #1
 80069e8:	2300      	movs	r3, #0
 80069ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069ee:	f7ff fea7 	bl	8006740 <__multadd>
 80069f2:	4606      	mov	r6, r0
 80069f4:	10ad      	asrs	r5, r5, #2
 80069f6:	d03d      	beq.n	8006a74 <__pow5mult+0xa0>
 80069f8:	69fc      	ldr	r4, [r7, #28]
 80069fa:	b97c      	cbnz	r4, 8006a1c <__pow5mult+0x48>
 80069fc:	2010      	movs	r0, #16
 80069fe:	f7ff fd87 	bl	8006510 <malloc>
 8006a02:	4602      	mov	r2, r0
 8006a04:	61f8      	str	r0, [r7, #28]
 8006a06:	b928      	cbnz	r0, 8006a14 <__pow5mult+0x40>
 8006a08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006a80 <__pow5mult+0xac>)
 8006a0e:	481d      	ldr	r0, [pc, #116]	@ (8006a84 <__pow5mult+0xb0>)
 8006a10:	f000 fbe6 	bl	80071e0 <__assert_func>
 8006a14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a18:	6004      	str	r4, [r0, #0]
 8006a1a:	60c4      	str	r4, [r0, #12]
 8006a1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a24:	b94c      	cbnz	r4, 8006a3a <__pow5mult+0x66>
 8006a26:	f240 2171 	movw	r1, #625	@ 0x271
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	f7ff ff1a 	bl	8006864 <__i2b>
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a38:	6003      	str	r3, [r0, #0]
 8006a3a:	f04f 0900 	mov.w	r9, #0
 8006a3e:	07eb      	lsls	r3, r5, #31
 8006a40:	d50a      	bpl.n	8006a58 <__pow5mult+0x84>
 8006a42:	4631      	mov	r1, r6
 8006a44:	4622      	mov	r2, r4
 8006a46:	4638      	mov	r0, r7
 8006a48:	f7ff ff22 	bl	8006890 <__multiply>
 8006a4c:	4680      	mov	r8, r0
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff fe53 	bl	80066fc <_Bfree>
 8006a56:	4646      	mov	r6, r8
 8006a58:	106d      	asrs	r5, r5, #1
 8006a5a:	d00b      	beq.n	8006a74 <__pow5mult+0xa0>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	b938      	cbnz	r0, 8006a70 <__pow5mult+0x9c>
 8006a60:	4622      	mov	r2, r4
 8006a62:	4621      	mov	r1, r4
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7ff ff13 	bl	8006890 <__multiply>
 8006a6a:	6020      	str	r0, [r4, #0]
 8006a6c:	f8c0 9000 	str.w	r9, [r0]
 8006a70:	4604      	mov	r4, r0
 8006a72:	e7e4      	b.n	8006a3e <__pow5mult+0x6a>
 8006a74:	4630      	mov	r0, r6
 8006a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08008a60 	.word	0x08008a60
 8006a80:	08008930 	.word	0x08008930
 8006a84:	080089b0 	.word	0x080089b0

08006a88 <__lshift>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	4607      	mov	r7, r0
 8006a90:	4691      	mov	r9, r2
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6849      	ldr	r1, [r1, #4]
 8006a96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006aa0:	f108 0601 	add.w	r6, r8, #1
 8006aa4:	42b3      	cmp	r3, r6
 8006aa6:	db0b      	blt.n	8006ac0 <__lshift+0x38>
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff fde7 	bl	800667c <_Balloc>
 8006aae:	4605      	mov	r5, r0
 8006ab0:	b948      	cbnz	r0, 8006ac6 <__lshift+0x3e>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ab8:	4b27      	ldr	r3, [pc, #156]	@ (8006b58 <__lshift+0xd0>)
 8006aba:	4828      	ldr	r0, [pc, #160]	@ (8006b5c <__lshift+0xd4>)
 8006abc:	f000 fb90 	bl	80071e0 <__assert_func>
 8006ac0:	3101      	adds	r1, #1
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	e7ee      	b.n	8006aa4 <__lshift+0x1c>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f100 0114 	add.w	r1, r0, #20
 8006acc:	f100 0210 	add.w	r2, r0, #16
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	4553      	cmp	r3, sl
 8006ad4:	db33      	blt.n	8006b3e <__lshift+0xb6>
 8006ad6:	6920      	ldr	r0, [r4, #16]
 8006ad8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006adc:	f104 0314 	add.w	r3, r4, #20
 8006ae0:	f019 091f 	ands.w	r9, r9, #31
 8006ae4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ae8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006aec:	d02b      	beq.n	8006b46 <__lshift+0xbe>
 8006aee:	468a      	mov	sl, r1
 8006af0:	2200      	movs	r2, #0
 8006af2:	f1c9 0e20 	rsb	lr, r9, #32
 8006af6:	6818      	ldr	r0, [r3, #0]
 8006af8:	fa00 f009 	lsl.w	r0, r0, r9
 8006afc:	4310      	orrs	r0, r2
 8006afe:	f84a 0b04 	str.w	r0, [sl], #4
 8006b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b06:	459c      	cmp	ip, r3
 8006b08:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b0c:	d8f3      	bhi.n	8006af6 <__lshift+0x6e>
 8006b0e:	ebac 0304 	sub.w	r3, ip, r4
 8006b12:	3b15      	subs	r3, #21
 8006b14:	f023 0303 	bic.w	r3, r3, #3
 8006b18:	3304      	adds	r3, #4
 8006b1a:	f104 0015 	add.w	r0, r4, #21
 8006b1e:	4560      	cmp	r0, ip
 8006b20:	bf88      	it	hi
 8006b22:	2304      	movhi	r3, #4
 8006b24:	50ca      	str	r2, [r1, r3]
 8006b26:	b10a      	cbz	r2, 8006b2c <__lshift+0xa4>
 8006b28:	f108 0602 	add.w	r6, r8, #2
 8006b2c:	3e01      	subs	r6, #1
 8006b2e:	4638      	mov	r0, r7
 8006b30:	4621      	mov	r1, r4
 8006b32:	612e      	str	r6, [r5, #16]
 8006b34:	f7ff fde2 	bl	80066fc <_Bfree>
 8006b38:	4628      	mov	r0, r5
 8006b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b42:	3301      	adds	r3, #1
 8006b44:	e7c5      	b.n	8006ad2 <__lshift+0x4a>
 8006b46:	3904      	subs	r1, #4
 8006b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b4c:	459c      	cmp	ip, r3
 8006b4e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b52:	d8f9      	bhi.n	8006b48 <__lshift+0xc0>
 8006b54:	e7ea      	b.n	8006b2c <__lshift+0xa4>
 8006b56:	bf00      	nop
 8006b58:	0800899f 	.word	0x0800899f
 8006b5c:	080089b0 	.word	0x080089b0

08006b60 <__mcmp>:
 8006b60:	4603      	mov	r3, r0
 8006b62:	690a      	ldr	r2, [r1, #16]
 8006b64:	6900      	ldr	r0, [r0, #16]
 8006b66:	b530      	push	{r4, r5, lr}
 8006b68:	1a80      	subs	r0, r0, r2
 8006b6a:	d10e      	bne.n	8006b8a <__mcmp+0x2a>
 8006b6c:	3314      	adds	r3, #20
 8006b6e:	3114      	adds	r1, #20
 8006b70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b80:	4295      	cmp	r5, r2
 8006b82:	d003      	beq.n	8006b8c <__mcmp+0x2c>
 8006b84:	d205      	bcs.n	8006b92 <__mcmp+0x32>
 8006b86:	f04f 30ff 	mov.w	r0, #4294967295
 8006b8a:	bd30      	pop	{r4, r5, pc}
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	d3f3      	bcc.n	8006b78 <__mcmp+0x18>
 8006b90:	e7fb      	b.n	8006b8a <__mcmp+0x2a>
 8006b92:	2001      	movs	r0, #1
 8006b94:	e7f9      	b.n	8006b8a <__mcmp+0x2a>
	...

08006b98 <__mdiff>:
 8006b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	4689      	mov	r9, r1
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4648      	mov	r0, r9
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	f7ff ffdb 	bl	8006b60 <__mcmp>
 8006baa:	1e05      	subs	r5, r0, #0
 8006bac:	d112      	bne.n	8006bd4 <__mdiff+0x3c>
 8006bae:	4629      	mov	r1, r5
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f7ff fd63 	bl	800667c <_Balloc>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	b928      	cbnz	r0, 8006bc6 <__mdiff+0x2e>
 8006bba:	f240 2137 	movw	r1, #567	@ 0x237
 8006bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb8 <__mdiff+0x120>)
 8006bc0:	483e      	ldr	r0, [pc, #248]	@ (8006cbc <__mdiff+0x124>)
 8006bc2:	f000 fb0d 	bl	80071e0 <__assert_func>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006bcc:	4610      	mov	r0, r2
 8006bce:	b003      	add	sp, #12
 8006bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd4:	bfbc      	itt	lt
 8006bd6:	464b      	movlt	r3, r9
 8006bd8:	46a1      	movlt	r9, r4
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006be0:	bfba      	itte	lt
 8006be2:	461c      	movlt	r4, r3
 8006be4:	2501      	movlt	r5, #1
 8006be6:	2500      	movge	r5, #0
 8006be8:	f7ff fd48 	bl	800667c <_Balloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	b918      	cbnz	r0, 8006bf8 <__mdiff+0x60>
 8006bf0:	f240 2145 	movw	r1, #581	@ 0x245
 8006bf4:	4b30      	ldr	r3, [pc, #192]	@ (8006cb8 <__mdiff+0x120>)
 8006bf6:	e7e3      	b.n	8006bc0 <__mdiff+0x28>
 8006bf8:	f100 0b14 	add.w	fp, r0, #20
 8006bfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c00:	f109 0310 	add.w	r3, r9, #16
 8006c04:	60c5      	str	r5, [r0, #12]
 8006c06:	f04f 0c00 	mov.w	ip, #0
 8006c0a:	f109 0514 	add.w	r5, r9, #20
 8006c0e:	46d9      	mov	r9, fp
 8006c10:	6926      	ldr	r6, [r4, #16]
 8006c12:	f104 0e14 	add.w	lr, r4, #20
 8006c16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c2a:	b281      	uxth	r1, r0
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	fa1f f38a 	uxth.w	r3, sl
 8006c32:	1a5b      	subs	r3, r3, r1
 8006c34:	0c00      	lsrs	r0, r0, #16
 8006c36:	4463      	add	r3, ip
 8006c38:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c3c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c46:	4576      	cmp	r6, lr
 8006c48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c4c:	f849 3b04 	str.w	r3, [r9], #4
 8006c50:	d8e6      	bhi.n	8006c20 <__mdiff+0x88>
 8006c52:	1b33      	subs	r3, r6, r4
 8006c54:	3b15      	subs	r3, #21
 8006c56:	f023 0303 	bic.w	r3, r3, #3
 8006c5a:	3415      	adds	r4, #21
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	42a6      	cmp	r6, r4
 8006c60:	bf38      	it	cc
 8006c62:	2304      	movcc	r3, #4
 8006c64:	441d      	add	r5, r3
 8006c66:	445b      	add	r3, fp
 8006c68:	461e      	mov	r6, r3
 8006c6a:	462c      	mov	r4, r5
 8006c6c:	4544      	cmp	r4, r8
 8006c6e:	d30e      	bcc.n	8006c8e <__mdiff+0xf6>
 8006c70:	f108 0103 	add.w	r1, r8, #3
 8006c74:	1b49      	subs	r1, r1, r5
 8006c76:	f021 0103 	bic.w	r1, r1, #3
 8006c7a:	3d03      	subs	r5, #3
 8006c7c:	45a8      	cmp	r8, r5
 8006c7e:	bf38      	it	cc
 8006c80:	2100      	movcc	r1, #0
 8006c82:	440b      	add	r3, r1
 8006c84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c88:	b199      	cbz	r1, 8006cb2 <__mdiff+0x11a>
 8006c8a:	6117      	str	r7, [r2, #16]
 8006c8c:	e79e      	b.n	8006bcc <__mdiff+0x34>
 8006c8e:	46e6      	mov	lr, ip
 8006c90:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c94:	fa1f fc81 	uxth.w	ip, r1
 8006c98:	44f4      	add	ip, lr
 8006c9a:	0c08      	lsrs	r0, r1, #16
 8006c9c:	4471      	add	r1, lr
 8006c9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ca2:	b289      	uxth	r1, r1
 8006ca4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ca8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cac:	f846 1b04 	str.w	r1, [r6], #4
 8006cb0:	e7dc      	b.n	8006c6c <__mdiff+0xd4>
 8006cb2:	3f01      	subs	r7, #1
 8006cb4:	e7e6      	b.n	8006c84 <__mdiff+0xec>
 8006cb6:	bf00      	nop
 8006cb8:	0800899f 	.word	0x0800899f
 8006cbc:	080089b0 	.word	0x080089b0

08006cc0 <__d2b>:
 8006cc0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4690      	mov	r8, r2
 8006cc8:	4699      	mov	r9, r3
 8006cca:	9e08      	ldr	r6, [sp, #32]
 8006ccc:	f7ff fcd6 	bl	800667c <_Balloc>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	b930      	cbnz	r0, 8006ce2 <__d2b+0x22>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f240 310f 	movw	r1, #783	@ 0x30f
 8006cda:	4b23      	ldr	r3, [pc, #140]	@ (8006d68 <__d2b+0xa8>)
 8006cdc:	4823      	ldr	r0, [pc, #140]	@ (8006d6c <__d2b+0xac>)
 8006cde:	f000 fa7f 	bl	80071e0 <__assert_func>
 8006ce2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ce6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cea:	b10d      	cbz	r5, 8006cf0 <__d2b+0x30>
 8006cec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	f1b8 0300 	subs.w	r3, r8, #0
 8006cf6:	d024      	beq.n	8006d42 <__d2b+0x82>
 8006cf8:	4668      	mov	r0, sp
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	f7ff fd85 	bl	800680a <__lo0bits>
 8006d00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d04:	b1d8      	cbz	r0, 8006d3e <__d2b+0x7e>
 8006d06:	f1c0 0320 	rsb	r3, r0, #32
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	430b      	orrs	r3, r1
 8006d10:	40c2      	lsrs	r2, r0
 8006d12:	6163      	str	r3, [r4, #20]
 8006d14:	9201      	str	r2, [sp, #4]
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2201      	moveq	r2, #1
 8006d1e:	2202      	movne	r2, #2
 8006d20:	61a3      	str	r3, [r4, #24]
 8006d22:	6122      	str	r2, [r4, #16]
 8006d24:	b1ad      	cbz	r5, 8006d52 <__d2b+0x92>
 8006d26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006d2a:	4405      	add	r5, r0
 8006d2c:	6035      	str	r5, [r6, #0]
 8006d2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d34:	6018      	str	r0, [r3, #0]
 8006d36:	4620      	mov	r0, r4
 8006d38:	b002      	add	sp, #8
 8006d3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006d3e:	6161      	str	r1, [r4, #20]
 8006d40:	e7e9      	b.n	8006d16 <__d2b+0x56>
 8006d42:	a801      	add	r0, sp, #4
 8006d44:	f7ff fd61 	bl	800680a <__lo0bits>
 8006d48:	9b01      	ldr	r3, [sp, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	6163      	str	r3, [r4, #20]
 8006d4e:	3020      	adds	r0, #32
 8006d50:	e7e7      	b.n	8006d22 <__d2b+0x62>
 8006d52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d5a:	6030      	str	r0, [r6, #0]
 8006d5c:	6918      	ldr	r0, [r3, #16]
 8006d5e:	f7ff fd35 	bl	80067cc <__hi0bits>
 8006d62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d66:	e7e4      	b.n	8006d32 <__d2b+0x72>
 8006d68:	0800899f 	.word	0x0800899f
 8006d6c:	080089b0 	.word	0x080089b0

08006d70 <__ssputs_r>:
 8006d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	461f      	mov	r7, r3
 8006d76:	688e      	ldr	r6, [r1, #8]
 8006d78:	4682      	mov	sl, r0
 8006d7a:	42be      	cmp	r6, r7
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4690      	mov	r8, r2
 8006d80:	680b      	ldr	r3, [r1, #0]
 8006d82:	d82d      	bhi.n	8006de0 <__ssputs_r+0x70>
 8006d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d8c:	d026      	beq.n	8006ddc <__ssputs_r+0x6c>
 8006d8e:	6965      	ldr	r5, [r4, #20]
 8006d90:	6909      	ldr	r1, [r1, #16]
 8006d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d96:	eba3 0901 	sub.w	r9, r3, r1
 8006d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d9e:	1c7b      	adds	r3, r7, #1
 8006da0:	444b      	add	r3, r9
 8006da2:	106d      	asrs	r5, r5, #1
 8006da4:	429d      	cmp	r5, r3
 8006da6:	bf38      	it	cc
 8006da8:	461d      	movcc	r5, r3
 8006daa:	0553      	lsls	r3, r2, #21
 8006dac:	d527      	bpl.n	8006dfe <__ssputs_r+0x8e>
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7ff fbd8 	bl	8006564 <_malloc_r>
 8006db4:	4606      	mov	r6, r0
 8006db6:	b360      	cbz	r0, 8006e12 <__ssputs_r+0xa2>
 8006db8:	464a      	mov	r2, r9
 8006dba:	6921      	ldr	r1, [r4, #16]
 8006dbc:	f000 fa02 	bl	80071c4 <memcpy>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	6126      	str	r6, [r4, #16]
 8006dce:	444e      	add	r6, r9
 8006dd0:	6026      	str	r6, [r4, #0]
 8006dd2:	463e      	mov	r6, r7
 8006dd4:	6165      	str	r5, [r4, #20]
 8006dd6:	eba5 0509 	sub.w	r5, r5, r9
 8006dda:	60a5      	str	r5, [r4, #8]
 8006ddc:	42be      	cmp	r6, r7
 8006dde:	d900      	bls.n	8006de2 <__ssputs_r+0x72>
 8006de0:	463e      	mov	r6, r7
 8006de2:	4632      	mov	r2, r6
 8006de4:	4641      	mov	r1, r8
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	f000 f9c2 	bl	8007170 <memmove>
 8006dec:	2000      	movs	r0, #0
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	1b9b      	subs	r3, r3, r6
 8006df2:	60a3      	str	r3, [r4, #8]
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	4433      	add	r3, r6
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	462a      	mov	r2, r5
 8006e00:	f000 fa32 	bl	8007268 <_realloc_r>
 8006e04:	4606      	mov	r6, r0
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d1e0      	bne.n	8006dcc <__ssputs_r+0x5c>
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	6921      	ldr	r1, [r4, #16]
 8006e0e:	f7ff fb37 	bl	8006480 <_free_r>
 8006e12:	230c      	movs	r3, #12
 8006e14:	f8ca 3000 	str.w	r3, [sl]
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	e7e9      	b.n	8006dfa <__ssputs_r+0x8a>
	...

08006e28 <_svfiprintf_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	4698      	mov	r8, r3
 8006e2e:	898b      	ldrh	r3, [r1, #12]
 8006e30:	4607      	mov	r7, r0
 8006e32:	061b      	lsls	r3, r3, #24
 8006e34:	460d      	mov	r5, r1
 8006e36:	4614      	mov	r4, r2
 8006e38:	b09d      	sub	sp, #116	@ 0x74
 8006e3a:	d510      	bpl.n	8006e5e <_svfiprintf_r+0x36>
 8006e3c:	690b      	ldr	r3, [r1, #16]
 8006e3e:	b973      	cbnz	r3, 8006e5e <_svfiprintf_r+0x36>
 8006e40:	2140      	movs	r1, #64	@ 0x40
 8006e42:	f7ff fb8f 	bl	8006564 <_malloc_r>
 8006e46:	6028      	str	r0, [r5, #0]
 8006e48:	6128      	str	r0, [r5, #16]
 8006e4a:	b930      	cbnz	r0, 8006e5a <_svfiprintf_r+0x32>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	@ 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	2340      	movs	r3, #64	@ 0x40
 8006e5c:	616b      	str	r3, [r5, #20]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e62:	2320      	movs	r3, #32
 8006e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e68:	2330      	movs	r3, #48	@ 0x30
 8006e6a:	f04f 0901 	mov.w	r9, #1
 8006e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800700c <_svfiprintf_r+0x1e4>
 8006e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e7a:	4623      	mov	r3, r4
 8006e7c:	469a      	mov	sl, r3
 8006e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e82:	b10a      	cbz	r2, 8006e88 <_svfiprintf_r+0x60>
 8006e84:	2a25      	cmp	r2, #37	@ 0x25
 8006e86:	d1f9      	bne.n	8006e7c <_svfiprintf_r+0x54>
 8006e88:	ebba 0b04 	subs.w	fp, sl, r4
 8006e8c:	d00b      	beq.n	8006ea6 <_svfiprintf_r+0x7e>
 8006e8e:	465b      	mov	r3, fp
 8006e90:	4622      	mov	r2, r4
 8006e92:	4629      	mov	r1, r5
 8006e94:	4638      	mov	r0, r7
 8006e96:	f7ff ff6b 	bl	8006d70 <__ssputs_r>
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f000 80a7 	beq.w	8006fee <_svfiprintf_r+0x1c6>
 8006ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ea2:	445a      	add	r2, fp
 8006ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 809f 	beq.w	8006fee <_svfiprintf_r+0x1c6>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eba:	f10a 0a01 	add.w	sl, sl, #1
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ec8:	4654      	mov	r4, sl
 8006eca:	2205      	movs	r2, #5
 8006ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed0:	484e      	ldr	r0, [pc, #312]	@ (800700c <_svfiprintf_r+0x1e4>)
 8006ed2:	f7fe fc68 	bl	80057a6 <memchr>
 8006ed6:	9a04      	ldr	r2, [sp, #16]
 8006ed8:	b9d8      	cbnz	r0, 8006f12 <_svfiprintf_r+0xea>
 8006eda:	06d0      	lsls	r0, r2, #27
 8006edc:	bf44      	itt	mi
 8006ede:	2320      	movmi	r3, #32
 8006ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ee4:	0711      	lsls	r1, r2, #28
 8006ee6:	bf44      	itt	mi
 8006ee8:	232b      	movmi	r3, #43	@ 0x2b
 8006eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ef4:	d015      	beq.n	8006f22 <_svfiprintf_r+0xfa>
 8006ef6:	4654      	mov	r4, sl
 8006ef8:	2000      	movs	r0, #0
 8006efa:	f04f 0c0a 	mov.w	ip, #10
 8006efe:	9a07      	ldr	r2, [sp, #28]
 8006f00:	4621      	mov	r1, r4
 8006f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f06:	3b30      	subs	r3, #48	@ 0x30
 8006f08:	2b09      	cmp	r3, #9
 8006f0a:	d94b      	bls.n	8006fa4 <_svfiprintf_r+0x17c>
 8006f0c:	b1b0      	cbz	r0, 8006f3c <_svfiprintf_r+0x114>
 8006f0e:	9207      	str	r2, [sp, #28]
 8006f10:	e014      	b.n	8006f3c <_svfiprintf_r+0x114>
 8006f12:	eba0 0308 	sub.w	r3, r0, r8
 8006f16:	fa09 f303 	lsl.w	r3, r9, r3
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	46a2      	mov	sl, r4
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	e7d2      	b.n	8006ec8 <_svfiprintf_r+0xa0>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	1d19      	adds	r1, r3, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	9103      	str	r1, [sp, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfbb      	ittet	lt
 8006f2e:	425b      	neglt	r3, r3
 8006f30:	f042 0202 	orrlt.w	r2, r2, #2
 8006f34:	9307      	strge	r3, [sp, #28]
 8006f36:	9307      	strlt	r3, [sp, #28]
 8006f38:	bfb8      	it	lt
 8006f3a:	9204      	strlt	r2, [sp, #16]
 8006f3c:	7823      	ldrb	r3, [r4, #0]
 8006f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f40:	d10a      	bne.n	8006f58 <_svfiprintf_r+0x130>
 8006f42:	7863      	ldrb	r3, [r4, #1]
 8006f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f46:	d132      	bne.n	8006fae <_svfiprintf_r+0x186>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	3402      	adds	r4, #2
 8006f4c:	1d1a      	adds	r2, r3, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	9203      	str	r2, [sp, #12]
 8006f52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f56:	9305      	str	r3, [sp, #20]
 8006f58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007010 <_svfiprintf_r+0x1e8>
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	4650      	mov	r0, sl
 8006f60:	7821      	ldrb	r1, [r4, #0]
 8006f62:	f7fe fc20 	bl	80057a6 <memchr>
 8006f66:	b138      	cbz	r0, 8006f78 <_svfiprintf_r+0x150>
 8006f68:	2240      	movs	r2, #64	@ 0x40
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	eba0 000a 	sub.w	r0, r0, sl
 8006f70:	4082      	lsls	r2, r0
 8006f72:	4313      	orrs	r3, r2
 8006f74:	3401      	adds	r4, #1
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7c:	2206      	movs	r2, #6
 8006f7e:	4825      	ldr	r0, [pc, #148]	@ (8007014 <_svfiprintf_r+0x1ec>)
 8006f80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f84:	f7fe fc0f 	bl	80057a6 <memchr>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d036      	beq.n	8006ffa <_svfiprintf_r+0x1d2>
 8006f8c:	4b22      	ldr	r3, [pc, #136]	@ (8007018 <_svfiprintf_r+0x1f0>)
 8006f8e:	bb1b      	cbnz	r3, 8006fd8 <_svfiprintf_r+0x1b0>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	3307      	adds	r3, #7
 8006f94:	f023 0307 	bic.w	r3, r3, #7
 8006f98:	3308      	adds	r3, #8
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f9e:	4433      	add	r3, r6
 8006fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fa2:	e76a      	b.n	8006e7a <_svfiprintf_r+0x52>
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fac:	e7a8      	b.n	8006f00 <_svfiprintf_r+0xd8>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f04f 0c0a 	mov.w	ip, #10
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	3401      	adds	r4, #1
 8006fb8:	9305      	str	r3, [sp, #20]
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fc0:	3a30      	subs	r2, #48	@ 0x30
 8006fc2:	2a09      	cmp	r2, #9
 8006fc4:	d903      	bls.n	8006fce <_svfiprintf_r+0x1a6>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0c6      	beq.n	8006f58 <_svfiprintf_r+0x130>
 8006fca:	9105      	str	r1, [sp, #20]
 8006fcc:	e7c4      	b.n	8006f58 <_svfiprintf_r+0x130>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fd6:	e7f0      	b.n	8006fba <_svfiprintf_r+0x192>
 8006fd8:	ab03      	add	r3, sp, #12
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	4638      	mov	r0, r7
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800701c <_svfiprintf_r+0x1f4>)
 8006fe2:	a904      	add	r1, sp, #16
 8006fe4:	f7fd fe6e 	bl	8004cc4 <_printf_float>
 8006fe8:	1c42      	adds	r2, r0, #1
 8006fea:	4606      	mov	r6, r0
 8006fec:	d1d6      	bne.n	8006f9c <_svfiprintf_r+0x174>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	065b      	lsls	r3, r3, #25
 8006ff2:	f53f af2d 	bmi.w	8006e50 <_svfiprintf_r+0x28>
 8006ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ff8:	e72c      	b.n	8006e54 <_svfiprintf_r+0x2c>
 8006ffa:	ab03      	add	r3, sp, #12
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4638      	mov	r0, r7
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <_svfiprintf_r+0x1f4>)
 8007004:	a904      	add	r1, sp, #16
 8007006:	f7fe f8fb 	bl	8005200 <_printf_i>
 800700a:	e7ed      	b.n	8006fe8 <_svfiprintf_r+0x1c0>
 800700c:	08008a09 	.word	0x08008a09
 8007010:	08008a0f 	.word	0x08008a0f
 8007014:	08008a13 	.word	0x08008a13
 8007018:	08004cc5 	.word	0x08004cc5
 800701c:	08006d71 	.word	0x08006d71

08007020 <__sflush_r>:
 8007020:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	0716      	lsls	r6, r2, #28
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	d454      	bmi.n	80070d8 <__sflush_r+0xb8>
 800702e:	684b      	ldr	r3, [r1, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dc02      	bgt.n	800703a <__sflush_r+0x1a>
 8007034:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	dd48      	ble.n	80070cc <__sflush_r+0xac>
 800703a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800703c:	2e00      	cmp	r6, #0
 800703e:	d045      	beq.n	80070cc <__sflush_r+0xac>
 8007040:	2300      	movs	r3, #0
 8007042:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007046:	682f      	ldr	r7, [r5, #0]
 8007048:	6a21      	ldr	r1, [r4, #32]
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	d030      	beq.n	80070b0 <__sflush_r+0x90>
 800704e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	0759      	lsls	r1, r3, #29
 8007054:	d505      	bpl.n	8007062 <__sflush_r+0x42>
 8007056:	6863      	ldr	r3, [r4, #4]
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800705c:	b10b      	cbz	r3, 8007062 <__sflush_r+0x42>
 800705e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007060:	1ad2      	subs	r2, r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	4628      	mov	r0, r5
 8007066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007068:	6a21      	ldr	r1, [r4, #32]
 800706a:	47b0      	blx	r6
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	d106      	bne.n	8007080 <__sflush_r+0x60>
 8007072:	6829      	ldr	r1, [r5, #0]
 8007074:	291d      	cmp	r1, #29
 8007076:	d82b      	bhi.n	80070d0 <__sflush_r+0xb0>
 8007078:	4a28      	ldr	r2, [pc, #160]	@ (800711c <__sflush_r+0xfc>)
 800707a:	40ca      	lsrs	r2, r1
 800707c:	07d6      	lsls	r6, r2, #31
 800707e:	d527      	bpl.n	80070d0 <__sflush_r+0xb0>
 8007080:	2200      	movs	r2, #0
 8007082:	6062      	str	r2, [r4, #4]
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	04d9      	lsls	r1, r3, #19
 8007088:	6022      	str	r2, [r4, #0]
 800708a:	d504      	bpl.n	8007096 <__sflush_r+0x76>
 800708c:	1c42      	adds	r2, r0, #1
 800708e:	d101      	bne.n	8007094 <__sflush_r+0x74>
 8007090:	682b      	ldr	r3, [r5, #0]
 8007092:	b903      	cbnz	r3, 8007096 <__sflush_r+0x76>
 8007094:	6560      	str	r0, [r4, #84]	@ 0x54
 8007096:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007098:	602f      	str	r7, [r5, #0]
 800709a:	b1b9      	cbz	r1, 80070cc <__sflush_r+0xac>
 800709c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d002      	beq.n	80070aa <__sflush_r+0x8a>
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff f9eb 	bl	8006480 <_free_r>
 80070aa:	2300      	movs	r3, #0
 80070ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80070ae:	e00d      	b.n	80070cc <__sflush_r+0xac>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b0      	blx	r6
 80070b6:	4602      	mov	r2, r0
 80070b8:	1c50      	adds	r0, r2, #1
 80070ba:	d1c9      	bne.n	8007050 <__sflush_r+0x30>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0c6      	beq.n	8007050 <__sflush_r+0x30>
 80070c2:	2b1d      	cmp	r3, #29
 80070c4:	d001      	beq.n	80070ca <__sflush_r+0xaa>
 80070c6:	2b16      	cmp	r3, #22
 80070c8:	d11d      	bne.n	8007106 <__sflush_r+0xe6>
 80070ca:	602f      	str	r7, [r5, #0]
 80070cc:	2000      	movs	r0, #0
 80070ce:	e021      	b.n	8007114 <__sflush_r+0xf4>
 80070d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	e01a      	b.n	800710e <__sflush_r+0xee>
 80070d8:	690f      	ldr	r7, [r1, #16]
 80070da:	2f00      	cmp	r7, #0
 80070dc:	d0f6      	beq.n	80070cc <__sflush_r+0xac>
 80070de:	0793      	lsls	r3, r2, #30
 80070e0:	bf18      	it	ne
 80070e2:	2300      	movne	r3, #0
 80070e4:	680e      	ldr	r6, [r1, #0]
 80070e6:	bf08      	it	eq
 80070e8:	694b      	ldreq	r3, [r1, #20]
 80070ea:	1bf6      	subs	r6, r6, r7
 80070ec:	600f      	str	r7, [r1, #0]
 80070ee:	608b      	str	r3, [r1, #8]
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	ddeb      	ble.n	80070cc <__sflush_r+0xac>
 80070f4:	4633      	mov	r3, r6
 80070f6:	463a      	mov	r2, r7
 80070f8:	4628      	mov	r0, r5
 80070fa:	6a21      	ldr	r1, [r4, #32]
 80070fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007100:	47e0      	blx	ip
 8007102:	2800      	cmp	r0, #0
 8007104:	dc07      	bgt.n	8007116 <__sflush_r+0xf6>
 8007106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800710e:	f04f 30ff 	mov.w	r0, #4294967295
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007116:	4407      	add	r7, r0
 8007118:	1a36      	subs	r6, r6, r0
 800711a:	e7e9      	b.n	80070f0 <__sflush_r+0xd0>
 800711c:	20400001 	.word	0x20400001

08007120 <_fflush_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b913      	cbnz	r3, 8007130 <_fflush_r+0x10>
 800712a:	2500      	movs	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	b118      	cbz	r0, 800713a <_fflush_r+0x1a>
 8007132:	6a03      	ldr	r3, [r0, #32]
 8007134:	b90b      	cbnz	r3, 800713a <_fflush_r+0x1a>
 8007136:	f7fe fa0d 	bl	8005554 <__sinit>
 800713a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f3      	beq.n	800712a <_fflush_r+0xa>
 8007142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007144:	07d0      	lsls	r0, r2, #31
 8007146:	d404      	bmi.n	8007152 <_fflush_r+0x32>
 8007148:	0599      	lsls	r1, r3, #22
 800714a:	d402      	bmi.n	8007152 <_fflush_r+0x32>
 800714c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800714e:	f7fe fb28 	bl	80057a2 <__retarget_lock_acquire_recursive>
 8007152:	4628      	mov	r0, r5
 8007154:	4621      	mov	r1, r4
 8007156:	f7ff ff63 	bl	8007020 <__sflush_r>
 800715a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800715c:	4605      	mov	r5, r0
 800715e:	07da      	lsls	r2, r3, #31
 8007160:	d4e4      	bmi.n	800712c <_fflush_r+0xc>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	059b      	lsls	r3, r3, #22
 8007166:	d4e1      	bmi.n	800712c <_fflush_r+0xc>
 8007168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800716a:	f7fe fb1b 	bl	80057a4 <__retarget_lock_release_recursive>
 800716e:	e7dd      	b.n	800712c <_fflush_r+0xc>

08007170 <memmove>:
 8007170:	4288      	cmp	r0, r1
 8007172:	b510      	push	{r4, lr}
 8007174:	eb01 0402 	add.w	r4, r1, r2
 8007178:	d902      	bls.n	8007180 <memmove+0x10>
 800717a:	4284      	cmp	r4, r0
 800717c:	4623      	mov	r3, r4
 800717e:	d807      	bhi.n	8007190 <memmove+0x20>
 8007180:	1e43      	subs	r3, r0, #1
 8007182:	42a1      	cmp	r1, r4
 8007184:	d008      	beq.n	8007198 <memmove+0x28>
 8007186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800718a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800718e:	e7f8      	b.n	8007182 <memmove+0x12>
 8007190:	4601      	mov	r1, r0
 8007192:	4402      	add	r2, r0
 8007194:	428a      	cmp	r2, r1
 8007196:	d100      	bne.n	800719a <memmove+0x2a>
 8007198:	bd10      	pop	{r4, pc}
 800719a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800719e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071a2:	e7f7      	b.n	8007194 <memmove+0x24>

080071a4 <_sbrk_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	2300      	movs	r3, #0
 80071a8:	4d05      	ldr	r5, [pc, #20]	@ (80071c0 <_sbrk_r+0x1c>)
 80071aa:	4604      	mov	r4, r0
 80071ac:	4608      	mov	r0, r1
 80071ae:	602b      	str	r3, [r5, #0]
 80071b0:	f7fb ff46 	bl	8003040 <_sbrk>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_sbrk_r+0x1a>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_sbrk_r+0x1a>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000dd0 	.word	0x20000dd0

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	4770      	bx	lr
 80071d0:	b510      	push	{r4, lr}
 80071d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d6:	4291      	cmp	r1, r2
 80071d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071dc:	d1f9      	bne.n	80071d2 <memcpy+0xe>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <__assert_func>:
 80071e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071e2:	4614      	mov	r4, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b09      	ldr	r3, [pc, #36]	@ (800720c <__assert_func+0x2c>)
 80071e8:	4605      	mov	r5, r0
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68d8      	ldr	r0, [r3, #12]
 80071ee:	b14c      	cbz	r4, 8007204 <__assert_func+0x24>
 80071f0:	4b07      	ldr	r3, [pc, #28]	@ (8007210 <__assert_func+0x30>)
 80071f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071f6:	9100      	str	r1, [sp, #0]
 80071f8:	462b      	mov	r3, r5
 80071fa:	4906      	ldr	r1, [pc, #24]	@ (8007214 <__assert_func+0x34>)
 80071fc:	f000 f870 	bl	80072e0 <fiprintf>
 8007200:	f000 f880 	bl	8007304 <abort>
 8007204:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <__assert_func+0x38>)
 8007206:	461c      	mov	r4, r3
 8007208:	e7f3      	b.n	80071f2 <__assert_func+0x12>
 800720a:	bf00      	nop
 800720c:	20000020 	.word	0x20000020
 8007210:	08008a24 	.word	0x08008a24
 8007214:	08008a31 	.word	0x08008a31
 8007218:	08008a5f 	.word	0x08008a5f

0800721c <_calloc_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	fba1 5402 	umull	r5, r4, r1, r2
 8007222:	b934      	cbnz	r4, 8007232 <_calloc_r+0x16>
 8007224:	4629      	mov	r1, r5
 8007226:	f7ff f99d 	bl	8006564 <_malloc_r>
 800722a:	4606      	mov	r6, r0
 800722c:	b928      	cbnz	r0, 800723a <_calloc_r+0x1e>
 800722e:	4630      	mov	r0, r6
 8007230:	bd70      	pop	{r4, r5, r6, pc}
 8007232:	220c      	movs	r2, #12
 8007234:	2600      	movs	r6, #0
 8007236:	6002      	str	r2, [r0, #0]
 8007238:	e7f9      	b.n	800722e <_calloc_r+0x12>
 800723a:	462a      	mov	r2, r5
 800723c:	4621      	mov	r1, r4
 800723e:	f7fe fa24 	bl	800568a <memset>
 8007242:	e7f4      	b.n	800722e <_calloc_r+0x12>

08007244 <__ascii_mbtowc>:
 8007244:	b082      	sub	sp, #8
 8007246:	b901      	cbnz	r1, 800724a <__ascii_mbtowc+0x6>
 8007248:	a901      	add	r1, sp, #4
 800724a:	b142      	cbz	r2, 800725e <__ascii_mbtowc+0x1a>
 800724c:	b14b      	cbz	r3, 8007262 <__ascii_mbtowc+0x1e>
 800724e:	7813      	ldrb	r3, [r2, #0]
 8007250:	600b      	str	r3, [r1, #0]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	1e10      	subs	r0, r2, #0
 8007256:	bf18      	it	ne
 8007258:	2001      	movne	r0, #1
 800725a:	b002      	add	sp, #8
 800725c:	4770      	bx	lr
 800725e:	4610      	mov	r0, r2
 8007260:	e7fb      	b.n	800725a <__ascii_mbtowc+0x16>
 8007262:	f06f 0001 	mvn.w	r0, #1
 8007266:	e7f8      	b.n	800725a <__ascii_mbtowc+0x16>

08007268 <_realloc_r>:
 8007268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	4607      	mov	r7, r0
 800726e:	4614      	mov	r4, r2
 8007270:	460d      	mov	r5, r1
 8007272:	b921      	cbnz	r1, 800727e <_realloc_r+0x16>
 8007274:	4611      	mov	r1, r2
 8007276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	f7ff b973 	b.w	8006564 <_malloc_r>
 800727e:	b92a      	cbnz	r2, 800728c <_realloc_r+0x24>
 8007280:	f7ff f8fe 	bl	8006480 <_free_r>
 8007284:	4625      	mov	r5, r4
 8007286:	4628      	mov	r0, r5
 8007288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800728c:	f000 f841 	bl	8007312 <_malloc_usable_size_r>
 8007290:	4284      	cmp	r4, r0
 8007292:	4606      	mov	r6, r0
 8007294:	d802      	bhi.n	800729c <_realloc_r+0x34>
 8007296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800729a:	d8f4      	bhi.n	8007286 <_realloc_r+0x1e>
 800729c:	4621      	mov	r1, r4
 800729e:	4638      	mov	r0, r7
 80072a0:	f7ff f960 	bl	8006564 <_malloc_r>
 80072a4:	4680      	mov	r8, r0
 80072a6:	b908      	cbnz	r0, 80072ac <_realloc_r+0x44>
 80072a8:	4645      	mov	r5, r8
 80072aa:	e7ec      	b.n	8007286 <_realloc_r+0x1e>
 80072ac:	42b4      	cmp	r4, r6
 80072ae:	4622      	mov	r2, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	bf28      	it	cs
 80072b4:	4632      	movcs	r2, r6
 80072b6:	f7ff ff85 	bl	80071c4 <memcpy>
 80072ba:	4629      	mov	r1, r5
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff f8df 	bl	8006480 <_free_r>
 80072c2:	e7f1      	b.n	80072a8 <_realloc_r+0x40>

080072c4 <__ascii_wctomb>:
 80072c4:	4603      	mov	r3, r0
 80072c6:	4608      	mov	r0, r1
 80072c8:	b141      	cbz	r1, 80072dc <__ascii_wctomb+0x18>
 80072ca:	2aff      	cmp	r2, #255	@ 0xff
 80072cc:	d904      	bls.n	80072d8 <__ascii_wctomb+0x14>
 80072ce:	228a      	movs	r2, #138	@ 0x8a
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	4770      	bx	lr
 80072d8:	2001      	movs	r0, #1
 80072da:	700a      	strb	r2, [r1, #0]
 80072dc:	4770      	bx	lr
	...

080072e0 <fiprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b503      	push	{r0, r1, lr}
 80072e4:	4601      	mov	r1, r0
 80072e6:	ab03      	add	r3, sp, #12
 80072e8:	4805      	ldr	r0, [pc, #20]	@ (8007300 <fiprintf+0x20>)
 80072ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ee:	6800      	ldr	r0, [r0, #0]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f000 f83d 	bl	8007370 <_vfiprintf_r>
 80072f6:	b002      	add	sp, #8
 80072f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072fc:	b003      	add	sp, #12
 80072fe:	4770      	bx	lr
 8007300:	20000020 	.word	0x20000020

08007304 <abort>:
 8007304:	2006      	movs	r0, #6
 8007306:	b508      	push	{r3, lr}
 8007308:	f000 fa06 	bl	8007718 <raise>
 800730c:	2001      	movs	r0, #1
 800730e:	f7fb fe22 	bl	8002f56 <_exit>

08007312 <_malloc_usable_size_r>:
 8007312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007316:	1f18      	subs	r0, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	bfbc      	itt	lt
 800731c:	580b      	ldrlt	r3, [r1, r0]
 800731e:	18c0      	addlt	r0, r0, r3
 8007320:	4770      	bx	lr

08007322 <__sfputc_r>:
 8007322:	6893      	ldr	r3, [r2, #8]
 8007324:	b410      	push	{r4}
 8007326:	3b01      	subs	r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	6093      	str	r3, [r2, #8]
 800732c:	da07      	bge.n	800733e <__sfputc_r+0x1c>
 800732e:	6994      	ldr	r4, [r2, #24]
 8007330:	42a3      	cmp	r3, r4
 8007332:	db01      	blt.n	8007338 <__sfputc_r+0x16>
 8007334:	290a      	cmp	r1, #10
 8007336:	d102      	bne.n	800733e <__sfputc_r+0x1c>
 8007338:	bc10      	pop	{r4}
 800733a:	f000 b931 	b.w	80075a0 <__swbuf_r>
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	1c58      	adds	r0, r3, #1
 8007342:	6010      	str	r0, [r2, #0]
 8007344:	7019      	strb	r1, [r3, #0]
 8007346:	4608      	mov	r0, r1
 8007348:	bc10      	pop	{r4}
 800734a:	4770      	bx	lr

0800734c <__sfputs_r>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	4614      	mov	r4, r2
 8007354:	18d5      	adds	r5, r2, r3
 8007356:	42ac      	cmp	r4, r5
 8007358:	d101      	bne.n	800735e <__sfputs_r+0x12>
 800735a:	2000      	movs	r0, #0
 800735c:	e007      	b.n	800736e <__sfputs_r+0x22>
 800735e:	463a      	mov	r2, r7
 8007360:	4630      	mov	r0, r6
 8007362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007366:	f7ff ffdc 	bl	8007322 <__sfputc_r>
 800736a:	1c43      	adds	r3, r0, #1
 800736c:	d1f3      	bne.n	8007356 <__sfputs_r+0xa>
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007370 <_vfiprintf_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	460d      	mov	r5, r1
 8007376:	4614      	mov	r4, r2
 8007378:	4698      	mov	r8, r3
 800737a:	4606      	mov	r6, r0
 800737c:	b09d      	sub	sp, #116	@ 0x74
 800737e:	b118      	cbz	r0, 8007388 <_vfiprintf_r+0x18>
 8007380:	6a03      	ldr	r3, [r0, #32]
 8007382:	b90b      	cbnz	r3, 8007388 <_vfiprintf_r+0x18>
 8007384:	f7fe f8e6 	bl	8005554 <__sinit>
 8007388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800738a:	07d9      	lsls	r1, r3, #31
 800738c:	d405      	bmi.n	800739a <_vfiprintf_r+0x2a>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	059a      	lsls	r2, r3, #22
 8007392:	d402      	bmi.n	800739a <_vfiprintf_r+0x2a>
 8007394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007396:	f7fe fa04 	bl	80057a2 <__retarget_lock_acquire_recursive>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	071b      	lsls	r3, r3, #28
 800739e:	d501      	bpl.n	80073a4 <_vfiprintf_r+0x34>
 80073a0:	692b      	ldr	r3, [r5, #16]
 80073a2:	b99b      	cbnz	r3, 80073cc <_vfiprintf_r+0x5c>
 80073a4:	4629      	mov	r1, r5
 80073a6:	4630      	mov	r0, r6
 80073a8:	f000 f938 	bl	800761c <__swsetup_r>
 80073ac:	b170      	cbz	r0, 80073cc <_vfiprintf_r+0x5c>
 80073ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b0:	07dc      	lsls	r4, r3, #31
 80073b2:	d504      	bpl.n	80073be <_vfiprintf_r+0x4e>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	b01d      	add	sp, #116	@ 0x74
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	89ab      	ldrh	r3, [r5, #12]
 80073c0:	0598      	lsls	r0, r3, #22
 80073c2:	d4f7      	bmi.n	80073b4 <_vfiprintf_r+0x44>
 80073c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073c6:	f7fe f9ed 	bl	80057a4 <__retarget_lock_release_recursive>
 80073ca:	e7f3      	b.n	80073b4 <_vfiprintf_r+0x44>
 80073cc:	2300      	movs	r3, #0
 80073ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d0:	2320      	movs	r3, #32
 80073d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073d6:	2330      	movs	r3, #48	@ 0x30
 80073d8:	f04f 0901 	mov.w	r9, #1
 80073dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800758c <_vfiprintf_r+0x21c>
 80073e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e8:	4623      	mov	r3, r4
 80073ea:	469a      	mov	sl, r3
 80073ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f0:	b10a      	cbz	r2, 80073f6 <_vfiprintf_r+0x86>
 80073f2:	2a25      	cmp	r2, #37	@ 0x25
 80073f4:	d1f9      	bne.n	80073ea <_vfiprintf_r+0x7a>
 80073f6:	ebba 0b04 	subs.w	fp, sl, r4
 80073fa:	d00b      	beq.n	8007414 <_vfiprintf_r+0xa4>
 80073fc:	465b      	mov	r3, fp
 80073fe:	4622      	mov	r2, r4
 8007400:	4629      	mov	r1, r5
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff ffa2 	bl	800734c <__sfputs_r>
 8007408:	3001      	adds	r0, #1
 800740a:	f000 80a7 	beq.w	800755c <_vfiprintf_r+0x1ec>
 800740e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007410:	445a      	add	r2, fp
 8007412:	9209      	str	r2, [sp, #36]	@ 0x24
 8007414:	f89a 3000 	ldrb.w	r3, [sl]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 809f 	beq.w	800755c <_vfiprintf_r+0x1ec>
 800741e:	2300      	movs	r3, #0
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007428:	f10a 0a01 	add.w	sl, sl, #1
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	9307      	str	r3, [sp, #28]
 8007430:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007434:	931a      	str	r3, [sp, #104]	@ 0x68
 8007436:	4654      	mov	r4, sl
 8007438:	2205      	movs	r2, #5
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	4853      	ldr	r0, [pc, #332]	@ (800758c <_vfiprintf_r+0x21c>)
 8007440:	f7fe f9b1 	bl	80057a6 <memchr>
 8007444:	9a04      	ldr	r2, [sp, #16]
 8007446:	b9d8      	cbnz	r0, 8007480 <_vfiprintf_r+0x110>
 8007448:	06d1      	lsls	r1, r2, #27
 800744a:	bf44      	itt	mi
 800744c:	2320      	movmi	r3, #32
 800744e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007452:	0713      	lsls	r3, r2, #28
 8007454:	bf44      	itt	mi
 8007456:	232b      	movmi	r3, #43	@ 0x2b
 8007458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745c:	f89a 3000 	ldrb.w	r3, [sl]
 8007460:	2b2a      	cmp	r3, #42	@ 0x2a
 8007462:	d015      	beq.n	8007490 <_vfiprintf_r+0x120>
 8007464:	4654      	mov	r4, sl
 8007466:	2000      	movs	r0, #0
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	9a07      	ldr	r2, [sp, #28]
 800746e:	4621      	mov	r1, r4
 8007470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007474:	3b30      	subs	r3, #48	@ 0x30
 8007476:	2b09      	cmp	r3, #9
 8007478:	d94b      	bls.n	8007512 <_vfiprintf_r+0x1a2>
 800747a:	b1b0      	cbz	r0, 80074aa <_vfiprintf_r+0x13a>
 800747c:	9207      	str	r2, [sp, #28]
 800747e:	e014      	b.n	80074aa <_vfiprintf_r+0x13a>
 8007480:	eba0 0308 	sub.w	r3, r0, r8
 8007484:	fa09 f303 	lsl.w	r3, r9, r3
 8007488:	4313      	orrs	r3, r2
 800748a:	46a2      	mov	sl, r4
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	e7d2      	b.n	8007436 <_vfiprintf_r+0xc6>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	1d19      	adds	r1, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9103      	str	r1, [sp, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfbb      	ittet	lt
 800749c:	425b      	neglt	r3, r3
 800749e:	f042 0202 	orrlt.w	r2, r2, #2
 80074a2:	9307      	strge	r3, [sp, #28]
 80074a4:	9307      	strlt	r3, [sp, #28]
 80074a6:	bfb8      	it	lt
 80074a8:	9204      	strlt	r2, [sp, #16]
 80074aa:	7823      	ldrb	r3, [r4, #0]
 80074ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80074ae:	d10a      	bne.n	80074c6 <_vfiprintf_r+0x156>
 80074b0:	7863      	ldrb	r3, [r4, #1]
 80074b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b4:	d132      	bne.n	800751c <_vfiprintf_r+0x1ac>
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	3402      	adds	r4, #2
 80074ba:	1d1a      	adds	r2, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	9203      	str	r2, [sp, #12]
 80074c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c4:	9305      	str	r3, [sp, #20]
 80074c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007590 <_vfiprintf_r+0x220>
 80074ca:	2203      	movs	r2, #3
 80074cc:	4650      	mov	r0, sl
 80074ce:	7821      	ldrb	r1, [r4, #0]
 80074d0:	f7fe f969 	bl	80057a6 <memchr>
 80074d4:	b138      	cbz	r0, 80074e6 <_vfiprintf_r+0x176>
 80074d6:	2240      	movs	r2, #64	@ 0x40
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	eba0 000a 	sub.w	r0, r0, sl
 80074de:	4082      	lsls	r2, r0
 80074e0:	4313      	orrs	r3, r2
 80074e2:	3401      	adds	r4, #1
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ea:	2206      	movs	r2, #6
 80074ec:	4829      	ldr	r0, [pc, #164]	@ (8007594 <_vfiprintf_r+0x224>)
 80074ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f2:	f7fe f958 	bl	80057a6 <memchr>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d03f      	beq.n	800757a <_vfiprintf_r+0x20a>
 80074fa:	4b27      	ldr	r3, [pc, #156]	@ (8007598 <_vfiprintf_r+0x228>)
 80074fc:	bb1b      	cbnz	r3, 8007546 <_vfiprintf_r+0x1d6>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	3307      	adds	r3, #7
 8007502:	f023 0307 	bic.w	r3, r3, #7
 8007506:	3308      	adds	r3, #8
 8007508:	9303      	str	r3, [sp, #12]
 800750a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750c:	443b      	add	r3, r7
 800750e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007510:	e76a      	b.n	80073e8 <_vfiprintf_r+0x78>
 8007512:	460c      	mov	r4, r1
 8007514:	2001      	movs	r0, #1
 8007516:	fb0c 3202 	mla	r2, ip, r2, r3
 800751a:	e7a8      	b.n	800746e <_vfiprintf_r+0xfe>
 800751c:	2300      	movs	r3, #0
 800751e:	f04f 0c0a 	mov.w	ip, #10
 8007522:	4619      	mov	r1, r3
 8007524:	3401      	adds	r4, #1
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	4620      	mov	r0, r4
 800752a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800752e:	3a30      	subs	r2, #48	@ 0x30
 8007530:	2a09      	cmp	r2, #9
 8007532:	d903      	bls.n	800753c <_vfiprintf_r+0x1cc>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0c6      	beq.n	80074c6 <_vfiprintf_r+0x156>
 8007538:	9105      	str	r1, [sp, #20]
 800753a:	e7c4      	b.n	80074c6 <_vfiprintf_r+0x156>
 800753c:	4604      	mov	r4, r0
 800753e:	2301      	movs	r3, #1
 8007540:	fb0c 2101 	mla	r1, ip, r1, r2
 8007544:	e7f0      	b.n	8007528 <_vfiprintf_r+0x1b8>
 8007546:	ab03      	add	r3, sp, #12
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	462a      	mov	r2, r5
 800754c:	4630      	mov	r0, r6
 800754e:	4b13      	ldr	r3, [pc, #76]	@ (800759c <_vfiprintf_r+0x22c>)
 8007550:	a904      	add	r1, sp, #16
 8007552:	f7fd fbb7 	bl	8004cc4 <_printf_float>
 8007556:	4607      	mov	r7, r0
 8007558:	1c78      	adds	r0, r7, #1
 800755a:	d1d6      	bne.n	800750a <_vfiprintf_r+0x19a>
 800755c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x1fe>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x1fe>
 8007568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800756a:	f7fe f91b 	bl	80057a4 <__retarget_lock_release_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	065b      	lsls	r3, r3, #25
 8007572:	f53f af1f 	bmi.w	80073b4 <_vfiprintf_r+0x44>
 8007576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007578:	e71e      	b.n	80073b8 <_vfiprintf_r+0x48>
 800757a:	ab03      	add	r3, sp, #12
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	462a      	mov	r2, r5
 8007580:	4630      	mov	r0, r6
 8007582:	4b06      	ldr	r3, [pc, #24]	@ (800759c <_vfiprintf_r+0x22c>)
 8007584:	a904      	add	r1, sp, #16
 8007586:	f7fd fe3b 	bl	8005200 <_printf_i>
 800758a:	e7e4      	b.n	8007556 <_vfiprintf_r+0x1e6>
 800758c:	08008a09 	.word	0x08008a09
 8007590:	08008a0f 	.word	0x08008a0f
 8007594:	08008a13 	.word	0x08008a13
 8007598:	08004cc5 	.word	0x08004cc5
 800759c:	0800734d 	.word	0x0800734d

080075a0 <__swbuf_r>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	460e      	mov	r6, r1
 80075a4:	4614      	mov	r4, r2
 80075a6:	4605      	mov	r5, r0
 80075a8:	b118      	cbz	r0, 80075b2 <__swbuf_r+0x12>
 80075aa:	6a03      	ldr	r3, [r0, #32]
 80075ac:	b90b      	cbnz	r3, 80075b2 <__swbuf_r+0x12>
 80075ae:	f7fd ffd1 	bl	8005554 <__sinit>
 80075b2:	69a3      	ldr	r3, [r4, #24]
 80075b4:	60a3      	str	r3, [r4, #8]
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	071a      	lsls	r2, r3, #28
 80075ba:	d501      	bpl.n	80075c0 <__swbuf_r+0x20>
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	b943      	cbnz	r3, 80075d2 <__swbuf_r+0x32>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f82a 	bl	800761c <__swsetup_r>
 80075c8:	b118      	cbz	r0, 80075d2 <__swbuf_r+0x32>
 80075ca:	f04f 37ff 	mov.w	r7, #4294967295
 80075ce:	4638      	mov	r0, r7
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	b2f6      	uxtb	r6, r6
 80075d8:	1a98      	subs	r0, r3, r2
 80075da:	6963      	ldr	r3, [r4, #20]
 80075dc:	4637      	mov	r7, r6
 80075de:	4283      	cmp	r3, r0
 80075e0:	dc05      	bgt.n	80075ee <__swbuf_r+0x4e>
 80075e2:	4621      	mov	r1, r4
 80075e4:	4628      	mov	r0, r5
 80075e6:	f7ff fd9b 	bl	8007120 <_fflush_r>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1ed      	bne.n	80075ca <__swbuf_r+0x2a>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	60a3      	str	r3, [r4, #8]
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	6022      	str	r2, [r4, #0]
 80075fa:	701e      	strb	r6, [r3, #0]
 80075fc:	6962      	ldr	r2, [r4, #20]
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	429a      	cmp	r2, r3
 8007602:	d004      	beq.n	800760e <__swbuf_r+0x6e>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	07db      	lsls	r3, r3, #31
 8007608:	d5e1      	bpl.n	80075ce <__swbuf_r+0x2e>
 800760a:	2e0a      	cmp	r6, #10
 800760c:	d1df      	bne.n	80075ce <__swbuf_r+0x2e>
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fd85 	bl	8007120 <_fflush_r>
 8007616:	2800      	cmp	r0, #0
 8007618:	d0d9      	beq.n	80075ce <__swbuf_r+0x2e>
 800761a:	e7d6      	b.n	80075ca <__swbuf_r+0x2a>

0800761c <__swsetup_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4b29      	ldr	r3, [pc, #164]	@ (80076c4 <__swsetup_r+0xa8>)
 8007620:	4605      	mov	r5, r0
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	460c      	mov	r4, r1
 8007626:	b118      	cbz	r0, 8007630 <__swsetup_r+0x14>
 8007628:	6a03      	ldr	r3, [r0, #32]
 800762a:	b90b      	cbnz	r3, 8007630 <__swsetup_r+0x14>
 800762c:	f7fd ff92 	bl	8005554 <__sinit>
 8007630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007634:	0719      	lsls	r1, r3, #28
 8007636:	d422      	bmi.n	800767e <__swsetup_r+0x62>
 8007638:	06da      	lsls	r2, r3, #27
 800763a:	d407      	bmi.n	800764c <__swsetup_r+0x30>
 800763c:	2209      	movs	r2, #9
 800763e:	602a      	str	r2, [r5, #0]
 8007640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	e033      	b.n	80076b4 <__swsetup_r+0x98>
 800764c:	0758      	lsls	r0, r3, #29
 800764e:	d512      	bpl.n	8007676 <__swsetup_r+0x5a>
 8007650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007652:	b141      	cbz	r1, 8007666 <__swsetup_r+0x4a>
 8007654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007658:	4299      	cmp	r1, r3
 800765a:	d002      	beq.n	8007662 <__swsetup_r+0x46>
 800765c:	4628      	mov	r0, r5
 800765e:	f7fe ff0f 	bl	8006480 <_free_r>
 8007662:	2300      	movs	r3, #0
 8007664:	6363      	str	r3, [r4, #52]	@ 0x34
 8007666:	89a3      	ldrh	r3, [r4, #12]
 8007668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	2300      	movs	r3, #0
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f043 0308 	orr.w	r3, r3, #8
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	6923      	ldr	r3, [r4, #16]
 8007680:	b94b      	cbnz	r3, 8007696 <__swsetup_r+0x7a>
 8007682:	89a3      	ldrh	r3, [r4, #12]
 8007684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800768c:	d003      	beq.n	8007696 <__swsetup_r+0x7a>
 800768e:	4621      	mov	r1, r4
 8007690:	4628      	mov	r0, r5
 8007692:	f000 f882 	bl	800779a <__smakebuf_r>
 8007696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769a:	f013 0201 	ands.w	r2, r3, #1
 800769e:	d00a      	beq.n	80076b6 <__swsetup_r+0x9a>
 80076a0:	2200      	movs	r2, #0
 80076a2:	60a2      	str	r2, [r4, #8]
 80076a4:	6962      	ldr	r2, [r4, #20]
 80076a6:	4252      	negs	r2, r2
 80076a8:	61a2      	str	r2, [r4, #24]
 80076aa:	6922      	ldr	r2, [r4, #16]
 80076ac:	b942      	cbnz	r2, 80076c0 <__swsetup_r+0xa4>
 80076ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80076b2:	d1c5      	bne.n	8007640 <__swsetup_r+0x24>
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	0799      	lsls	r1, r3, #30
 80076b8:	bf58      	it	pl
 80076ba:	6962      	ldrpl	r2, [r4, #20]
 80076bc:	60a2      	str	r2, [r4, #8]
 80076be:	e7f4      	b.n	80076aa <__swsetup_r+0x8e>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e7f7      	b.n	80076b4 <__swsetup_r+0x98>
 80076c4:	20000020 	.word	0x20000020

080076c8 <_raise_r>:
 80076c8:	291f      	cmp	r1, #31
 80076ca:	b538      	push	{r3, r4, r5, lr}
 80076cc:	4605      	mov	r5, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	d904      	bls.n	80076dc <_raise_r+0x14>
 80076d2:	2316      	movs	r3, #22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	f04f 30ff 	mov.w	r0, #4294967295
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80076de:	b112      	cbz	r2, 80076e6 <_raise_r+0x1e>
 80076e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076e4:	b94b      	cbnz	r3, 80076fa <_raise_r+0x32>
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f830 	bl	800774c <_getpid_r>
 80076ec:	4622      	mov	r2, r4
 80076ee:	4601      	mov	r1, r0
 80076f0:	4628      	mov	r0, r5
 80076f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f6:	f000 b817 	b.w	8007728 <_kill_r>
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d00a      	beq.n	8007714 <_raise_r+0x4c>
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	d103      	bne.n	800770a <_raise_r+0x42>
 8007702:	2316      	movs	r3, #22
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	2001      	movs	r0, #1
 8007708:	e7e7      	b.n	80076da <_raise_r+0x12>
 800770a:	2100      	movs	r1, #0
 800770c:	4620      	mov	r0, r4
 800770e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007712:	4798      	blx	r3
 8007714:	2000      	movs	r0, #0
 8007716:	e7e0      	b.n	80076da <_raise_r+0x12>

08007718 <raise>:
 8007718:	4b02      	ldr	r3, [pc, #8]	@ (8007724 <raise+0xc>)
 800771a:	4601      	mov	r1, r0
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	f7ff bfd3 	b.w	80076c8 <_raise_r>
 8007722:	bf00      	nop
 8007724:	20000020 	.word	0x20000020

08007728 <_kill_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	2300      	movs	r3, #0
 800772c:	4d06      	ldr	r5, [pc, #24]	@ (8007748 <_kill_r+0x20>)
 800772e:	4604      	mov	r4, r0
 8007730:	4608      	mov	r0, r1
 8007732:	4611      	mov	r1, r2
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	f7fb fbfe 	bl	8002f36 <_kill>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d102      	bne.n	8007744 <_kill_r+0x1c>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b103      	cbz	r3, 8007744 <_kill_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd38      	pop	{r3, r4, r5, pc}
 8007746:	bf00      	nop
 8007748:	20000dd0 	.word	0x20000dd0

0800774c <_getpid_r>:
 800774c:	f7fb bbec 	b.w	8002f28 <_getpid>

08007750 <__swhatbuf_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	4615      	mov	r5, r2
 800775a:	2900      	cmp	r1, #0
 800775c:	461e      	mov	r6, r3
 800775e:	b096      	sub	sp, #88	@ 0x58
 8007760:	da0c      	bge.n	800777c <__swhatbuf_r+0x2c>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	2100      	movs	r1, #0
 8007766:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800776a:	bf14      	ite	ne
 800776c:	2340      	movne	r3, #64	@ 0x40
 800776e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007772:	2000      	movs	r0, #0
 8007774:	6031      	str	r1, [r6, #0]
 8007776:	602b      	str	r3, [r5, #0]
 8007778:	b016      	add	sp, #88	@ 0x58
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	466a      	mov	r2, sp
 800777e:	f000 f849 	bl	8007814 <_fstat_r>
 8007782:	2800      	cmp	r0, #0
 8007784:	dbed      	blt.n	8007762 <__swhatbuf_r+0x12>
 8007786:	9901      	ldr	r1, [sp, #4]
 8007788:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800778c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007790:	4259      	negs	r1, r3
 8007792:	4159      	adcs	r1, r3
 8007794:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007798:	e7eb      	b.n	8007772 <__swhatbuf_r+0x22>

0800779a <__smakebuf_r>:
 800779a:	898b      	ldrh	r3, [r1, #12]
 800779c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800779e:	079d      	lsls	r5, r3, #30
 80077a0:	4606      	mov	r6, r0
 80077a2:	460c      	mov	r4, r1
 80077a4:	d507      	bpl.n	80077b6 <__smakebuf_r+0x1c>
 80077a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	2301      	movs	r3, #1
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	b003      	add	sp, #12
 80077b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b6:	466a      	mov	r2, sp
 80077b8:	ab01      	add	r3, sp, #4
 80077ba:	f7ff ffc9 	bl	8007750 <__swhatbuf_r>
 80077be:	9f00      	ldr	r7, [sp, #0]
 80077c0:	4605      	mov	r5, r0
 80077c2:	4639      	mov	r1, r7
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7fe fecd 	bl	8006564 <_malloc_r>
 80077ca:	b948      	cbnz	r0, 80077e0 <__smakebuf_r+0x46>
 80077cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d4ee      	bmi.n	80077b2 <__smakebuf_r+0x18>
 80077d4:	f023 0303 	bic.w	r3, r3, #3
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7e2      	b.n	80077a6 <__smakebuf_r+0xc>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	9b01      	ldr	r3, [sp, #4]
 80077ee:	6020      	str	r0, [r4, #0]
 80077f0:	b15b      	cbz	r3, 800780a <__smakebuf_r+0x70>
 80077f2:	4630      	mov	r0, r6
 80077f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f8:	f000 f81e 	bl	8007838 <_isatty_r>
 80077fc:	b128      	cbz	r0, 800780a <__smakebuf_r+0x70>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f023 0303 	bic.w	r3, r3, #3
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	431d      	orrs	r5, r3
 800780e:	81a5      	strh	r5, [r4, #12]
 8007810:	e7cf      	b.n	80077b2 <__smakebuf_r+0x18>
	...

08007814 <_fstat_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	2300      	movs	r3, #0
 8007818:	4d06      	ldr	r5, [pc, #24]	@ (8007834 <_fstat_r+0x20>)
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f7fb fbe7 	bl	8002ff4 <_fstat>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d102      	bne.n	8007830 <_fstat_r+0x1c>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	b103      	cbz	r3, 8007830 <_fstat_r+0x1c>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	20000dd0 	.word	0x20000dd0

08007838 <_isatty_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	2300      	movs	r3, #0
 800783c:	4d05      	ldr	r5, [pc, #20]	@ (8007854 <_isatty_r+0x1c>)
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fb fbe5 	bl	8003012 <_isatty>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_isatty_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_isatty_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	20000dd0 	.word	0x20000dd0

08007858 <pow>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	4614      	mov	r4, r2
 800785e:	461d      	mov	r5, r3
 8007860:	4680      	mov	r8, r0
 8007862:	4689      	mov	r9, r1
 8007864:	f000 f868 	bl	8007938 <__ieee754_pow>
 8007868:	4622      	mov	r2, r4
 800786a:	4606      	mov	r6, r0
 800786c:	460f      	mov	r7, r1
 800786e:	462b      	mov	r3, r5
 8007870:	4620      	mov	r0, r4
 8007872:	4629      	mov	r1, r5
 8007874:	f7f9 f8ca 	bl	8000a0c <__aeabi_dcmpun>
 8007878:	bbc8      	cbnz	r0, 80078ee <pow+0x96>
 800787a:	2200      	movs	r2, #0
 800787c:	2300      	movs	r3, #0
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f9 f891 	bl	80009a8 <__aeabi_dcmpeq>
 8007886:	b1b8      	cbz	r0, 80078b8 <pow+0x60>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	f7f9 f88a 	bl	80009a8 <__aeabi_dcmpeq>
 8007894:	2800      	cmp	r0, #0
 8007896:	d141      	bne.n	800791c <pow+0xc4>
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	f000 f844 	bl	8007928 <finite>
 80078a0:	b328      	cbz	r0, 80078ee <pow+0x96>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f887 	bl	80009bc <__aeabi_dcmplt>
 80078ae:	b1f0      	cbz	r0, 80078ee <pow+0x96>
 80078b0:	f7fd ff4c 	bl	800574c <__errno>
 80078b4:	2322      	movs	r3, #34	@ 0x22
 80078b6:	e019      	b.n	80078ec <pow+0x94>
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f000 f834 	bl	8007928 <finite>
 80078c0:	b9c8      	cbnz	r0, 80078f6 <pow+0x9e>
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	f000 f82f 	bl	8007928 <finite>
 80078ca:	b1a0      	cbz	r0, 80078f6 <pow+0x9e>
 80078cc:	4620      	mov	r0, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	f000 f82a 	bl	8007928 <finite>
 80078d4:	b178      	cbz	r0, 80078f6 <pow+0x9e>
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	4630      	mov	r0, r6
 80078dc:	4639      	mov	r1, r7
 80078de:	f7f9 f895 	bl	8000a0c <__aeabi_dcmpun>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d0e4      	beq.n	80078b0 <pow+0x58>
 80078e6:	f7fd ff31 	bl	800574c <__errno>
 80078ea:	2321      	movs	r3, #33	@ 0x21
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	4630      	mov	r0, r6
 80078f0:	4639      	mov	r1, r7
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f9 f853 	bl	80009a8 <__aeabi_dcmpeq>
 8007902:	2800      	cmp	r0, #0
 8007904:	d0f3      	beq.n	80078ee <pow+0x96>
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f000 f80d 	bl	8007928 <finite>
 800790e:	2800      	cmp	r0, #0
 8007910:	d0ed      	beq.n	80078ee <pow+0x96>
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f000 f807 	bl	8007928 <finite>
 800791a:	e7c8      	b.n	80078ae <pow+0x56>
 800791c:	2600      	movs	r6, #0
 800791e:	4f01      	ldr	r7, [pc, #4]	@ (8007924 <pow+0xcc>)
 8007920:	e7e5      	b.n	80078ee <pow+0x96>
 8007922:	bf00      	nop
 8007924:	3ff00000 	.word	0x3ff00000

08007928 <finite>:
 8007928:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800792c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007930:	0fc0      	lsrs	r0, r0, #31
 8007932:	4770      	bx	lr
 8007934:	0000      	movs	r0, r0
	...

08007938 <__ieee754_pow>:
 8007938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	b091      	sub	sp, #68	@ 0x44
 800793e:	e9cd 2300 	strd	r2, r3, [sp]
 8007942:	468b      	mov	fp, r1
 8007944:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007948:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800794c:	4682      	mov	sl, r0
 800794e:	ea57 0001 	orrs.w	r0, r7, r1
 8007952:	d112      	bne.n	800797a <__ieee754_pow+0x42>
 8007954:	4653      	mov	r3, sl
 8007956:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800795a:	18db      	adds	r3, r3, r3
 800795c:	4152      	adcs	r2, r2
 800795e:	4298      	cmp	r0, r3
 8007960:	4b93      	ldr	r3, [pc, #588]	@ (8007bb0 <__ieee754_pow+0x278>)
 8007962:	4193      	sbcs	r3, r2
 8007964:	f080 84cd 	bcs.w	8008302 <__ieee754_pow+0x9ca>
 8007968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	f7f8 fbfc 	bl	800016c <__adddf3>
 8007974:	b011      	add	sp, #68	@ 0x44
 8007976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797a:	4b8e      	ldr	r3, [pc, #568]	@ (8007bb4 <__ieee754_pow+0x27c>)
 800797c:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8007980:	429d      	cmp	r5, r3
 8007982:	465e      	mov	r6, fp
 8007984:	46d1      	mov	r9, sl
 8007986:	d80b      	bhi.n	80079a0 <__ieee754_pow+0x68>
 8007988:	d105      	bne.n	8007996 <__ieee754_pow+0x5e>
 800798a:	f1ba 0f00 	cmp.w	sl, #0
 800798e:	d1eb      	bne.n	8007968 <__ieee754_pow+0x30>
 8007990:	42af      	cmp	r7, r5
 8007992:	d8e9      	bhi.n	8007968 <__ieee754_pow+0x30>
 8007994:	e001      	b.n	800799a <__ieee754_pow+0x62>
 8007996:	429f      	cmp	r7, r3
 8007998:	d802      	bhi.n	80079a0 <__ieee754_pow+0x68>
 800799a:	429f      	cmp	r7, r3
 800799c:	d10f      	bne.n	80079be <__ieee754_pow+0x86>
 800799e:	b171      	cbz	r1, 80079be <__ieee754_pow+0x86>
 80079a0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80079a4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80079a8:	ea56 0609 	orrs.w	r6, r6, r9
 80079ac:	d1dc      	bne.n	8007968 <__ieee754_pow+0x30>
 80079ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079b2:	18db      	adds	r3, r3, r3
 80079b4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80079b8:	4152      	adcs	r2, r2
 80079ba:	429e      	cmp	r6, r3
 80079bc:	e7d0      	b.n	8007960 <__ieee754_pow+0x28>
 80079be:	2e00      	cmp	r6, #0
 80079c0:	462b      	mov	r3, r5
 80079c2:	da42      	bge.n	8007a4a <__ieee754_pow+0x112>
 80079c4:	4a7c      	ldr	r2, [pc, #496]	@ (8007bb8 <__ieee754_pow+0x280>)
 80079c6:	4297      	cmp	r7, r2
 80079c8:	d856      	bhi.n	8007a78 <__ieee754_pow+0x140>
 80079ca:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80079ce:	4297      	cmp	r7, r2
 80079d0:	f240 84a6 	bls.w	8008320 <__ieee754_pow+0x9e8>
 80079d4:	153a      	asrs	r2, r7, #20
 80079d6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80079da:	2a14      	cmp	r2, #20
 80079dc:	dd18      	ble.n	8007a10 <__ieee754_pow+0xd8>
 80079de:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80079e2:	fa21 f402 	lsr.w	r4, r1, r2
 80079e6:	fa04 f202 	lsl.w	r2, r4, r2
 80079ea:	428a      	cmp	r2, r1
 80079ec:	f040 8498 	bne.w	8008320 <__ieee754_pow+0x9e8>
 80079f0:	f004 0401 	and.w	r4, r4, #1
 80079f4:	f1c4 0402 	rsb	r4, r4, #2
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d159      	bne.n	8007ab0 <__ieee754_pow+0x178>
 80079fc:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007a00:	d149      	bne.n	8007a96 <__ieee754_pow+0x15e>
 8007a02:	4652      	mov	r2, sl
 8007a04:	465b      	mov	r3, fp
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	f7f8 fd65 	bl	80004d8 <__aeabi_dmul>
 8007a0e:	e7b1      	b.n	8007974 <__ieee754_pow+0x3c>
 8007a10:	2900      	cmp	r1, #0
 8007a12:	d14c      	bne.n	8007aae <__ieee754_pow+0x176>
 8007a14:	f1c2 0214 	rsb	r2, r2, #20
 8007a18:	fa47 f402 	asr.w	r4, r7, r2
 8007a1c:	fa04 f202 	lsl.w	r2, r4, r2
 8007a20:	42ba      	cmp	r2, r7
 8007a22:	f040 847a 	bne.w	800831a <__ieee754_pow+0x9e2>
 8007a26:	f004 0401 	and.w	r4, r4, #1
 8007a2a:	f1c4 0402 	rsb	r4, r4, #2
 8007a2e:	4a63      	ldr	r2, [pc, #396]	@ (8007bbc <__ieee754_pow+0x284>)
 8007a30:	4297      	cmp	r7, r2
 8007a32:	d1e3      	bne.n	80079fc <__ieee754_pow+0xc4>
 8007a34:	f1b8 0f00 	cmp.w	r8, #0
 8007a38:	f280 846b 	bge.w	8008312 <__ieee754_pow+0x9da>
 8007a3c:	4652      	mov	r2, sl
 8007a3e:	465b      	mov	r3, fp
 8007a40:	2000      	movs	r0, #0
 8007a42:	495e      	ldr	r1, [pc, #376]	@ (8007bbc <__ieee754_pow+0x284>)
 8007a44:	f7f8 fe72 	bl	800072c <__aeabi_ddiv>
 8007a48:	e794      	b.n	8007974 <__ieee754_pow+0x3c>
 8007a4a:	2400      	movs	r4, #0
 8007a4c:	bb81      	cbnz	r1, 8007ab0 <__ieee754_pow+0x178>
 8007a4e:	4a59      	ldr	r2, [pc, #356]	@ (8007bb4 <__ieee754_pow+0x27c>)
 8007a50:	4297      	cmp	r7, r2
 8007a52:	d1ec      	bne.n	8007a2e <__ieee754_pow+0xf6>
 8007a54:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8007a58:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007a5c:	ea53 0309 	orrs.w	r3, r3, r9
 8007a60:	f000 844f 	beq.w	8008302 <__ieee754_pow+0x9ca>
 8007a64:	4b56      	ldr	r3, [pc, #344]	@ (8007bc0 <__ieee754_pow+0x288>)
 8007a66:	429d      	cmp	r5, r3
 8007a68:	d908      	bls.n	8007a7c <__ieee754_pow+0x144>
 8007a6a:	f1b8 0f00 	cmp.w	r8, #0
 8007a6e:	f280 844c 	bge.w	800830a <__ieee754_pow+0x9d2>
 8007a72:	2000      	movs	r0, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	e77d      	b.n	8007974 <__ieee754_pow+0x3c>
 8007a78:	2402      	movs	r4, #2
 8007a7a:	e7e7      	b.n	8007a4c <__ieee754_pow+0x114>
 8007a7c:	f1b8 0f00 	cmp.w	r8, #0
 8007a80:	f04f 0000 	mov.w	r0, #0
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	f6bf af74 	bge.w	8007974 <__ieee754_pow+0x3c>
 8007a8c:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007a90:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007a94:	e76e      	b.n	8007974 <__ieee754_pow+0x3c>
 8007a96:	4a4b      	ldr	r2, [pc, #300]	@ (8007bc4 <__ieee754_pow+0x28c>)
 8007a98:	4590      	cmp	r8, r2
 8007a9a:	d109      	bne.n	8007ab0 <__ieee754_pow+0x178>
 8007a9c:	2e00      	cmp	r6, #0
 8007a9e:	db07      	blt.n	8007ab0 <__ieee754_pow+0x178>
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	b011      	add	sp, #68	@ 0x44
 8007aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	f000 bd0f 	b.w	80084cc <__ieee754_sqrt>
 8007aae:	2400      	movs	r4, #0
 8007ab0:	4650      	mov	r0, sl
 8007ab2:	4659      	mov	r1, fp
 8007ab4:	9302      	str	r3, [sp, #8]
 8007ab6:	f000 fc69 	bl	800838c <fabs>
 8007aba:	9b02      	ldr	r3, [sp, #8]
 8007abc:	f1b9 0f00 	cmp.w	r9, #0
 8007ac0:	d127      	bne.n	8007b12 <__ieee754_pow+0x1da>
 8007ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8007bbc <__ieee754_pow+0x284>)
 8007ac4:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8007ac8:	4594      	cmp	ip, r2
 8007aca:	d000      	beq.n	8007ace <__ieee754_pow+0x196>
 8007acc:	bb0d      	cbnz	r5, 8007b12 <__ieee754_pow+0x1da>
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	da05      	bge.n	8007ae0 <__ieee754_pow+0x1a8>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	2000      	movs	r0, #0
 8007ada:	4938      	ldr	r1, [pc, #224]	@ (8007bbc <__ieee754_pow+0x284>)
 8007adc:	f7f8 fe26 	bl	800072c <__aeabi_ddiv>
 8007ae0:	2e00      	cmp	r6, #0
 8007ae2:	f6bf af47 	bge.w	8007974 <__ieee754_pow+0x3c>
 8007ae6:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007aea:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007aee:	4325      	orrs	r5, r4
 8007af0:	d108      	bne.n	8007b04 <__ieee754_pow+0x1cc>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	f7f8 fb35 	bl	8000168 <__aeabi_dsub>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	e79f      	b.n	8007a44 <__ieee754_pow+0x10c>
 8007b04:	2c01      	cmp	r4, #1
 8007b06:	f47f af35 	bne.w	8007974 <__ieee754_pow+0x3c>
 8007b0a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b0e:	4619      	mov	r1, r3
 8007b10:	e730      	b.n	8007974 <__ieee754_pow+0x3c>
 8007b12:	0ff2      	lsrs	r2, r6, #31
 8007b14:	3a01      	subs	r2, #1
 8007b16:	ea52 0c04 	orrs.w	ip, r2, r4
 8007b1a:	d102      	bne.n	8007b22 <__ieee754_pow+0x1ea>
 8007b1c:	4652      	mov	r2, sl
 8007b1e:	465b      	mov	r3, fp
 8007b20:	e7e9      	b.n	8007af6 <__ieee754_pow+0x1be>
 8007b22:	f04f 0900 	mov.w	r9, #0
 8007b26:	3c01      	subs	r4, #1
 8007b28:	4314      	orrs	r4, r2
 8007b2a:	bf14      	ite	ne
 8007b2c:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007bbc <__ieee754_pow+0x284>
 8007b30:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007bc8 <__ieee754_pow+0x290>
 8007b34:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007b38:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8007b3c:	f240 8104 	bls.w	8007d48 <__ieee754_pow+0x410>
 8007b40:	4b22      	ldr	r3, [pc, #136]	@ (8007bcc <__ieee754_pow+0x294>)
 8007b42:	429f      	cmp	r7, r3
 8007b44:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <__ieee754_pow+0x288>)
 8007b46:	d913      	bls.n	8007b70 <__ieee754_pow+0x238>
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	d808      	bhi.n	8007b5e <__ieee754_pow+0x226>
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	da08      	bge.n	8007b64 <__ieee754_pow+0x22c>
 8007b52:	2000      	movs	r0, #0
 8007b54:	b011      	add	sp, #68	@ 0x44
 8007b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f000 bcb1 	b.w	80084c0 <__math_oflow>
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	dcf6      	bgt.n	8007b52 <__ieee754_pow+0x21a>
 8007b64:	2000      	movs	r0, #0
 8007b66:	b011      	add	sp, #68	@ 0x44
 8007b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	f000 bca3 	b.w	80084b6 <__math_uflow>
 8007b70:	429d      	cmp	r5, r3
 8007b72:	d20c      	bcs.n	8007b8e <__ieee754_pow+0x256>
 8007b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f7f8 ff1e 	bl	80009bc <__aeabi_dcmplt>
 8007b80:	3800      	subs	r0, #0
 8007b82:	bf18      	it	ne
 8007b84:	2001      	movne	r0, #1
 8007b86:	f1b8 0f00 	cmp.w	r8, #0
 8007b8a:	daec      	bge.n	8007b66 <__ieee754_pow+0x22e>
 8007b8c:	e7e2      	b.n	8007b54 <__ieee754_pow+0x21c>
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bbc <__ieee754_pow+0x284>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	429d      	cmp	r5, r3
 8007b94:	d91c      	bls.n	8007bd0 <__ieee754_pow+0x298>
 8007b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f7f8 ff0e 	bl	80009bc <__aeabi_dcmplt>
 8007ba0:	3800      	subs	r0, #0
 8007ba2:	bf18      	it	ne
 8007ba4:	2001      	movne	r0, #1
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	dcd3      	bgt.n	8007b54 <__ieee754_pow+0x21c>
 8007bac:	e7db      	b.n	8007b66 <__ieee754_pow+0x22e>
 8007bae:	bf00      	nop
 8007bb0:	fff00000 	.word	0xfff00000
 8007bb4:	7ff00000 	.word	0x7ff00000
 8007bb8:	433fffff 	.word	0x433fffff
 8007bbc:	3ff00000 	.word	0x3ff00000
 8007bc0:	3fefffff 	.word	0x3fefffff
 8007bc4:	3fe00000 	.word	0x3fe00000
 8007bc8:	bff00000 	.word	0xbff00000
 8007bcc:	43f00000 	.word	0x43f00000
 8007bd0:	4b59      	ldr	r3, [pc, #356]	@ (8007d38 <__ieee754_pow+0x400>)
 8007bd2:	f7f8 fac9 	bl	8000168 <__aeabi_dsub>
 8007bd6:	a350      	add	r3, pc, #320	@ (adr r3, 8007d18 <__ieee754_pow+0x3e0>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	f7f8 fc7a 	bl	80004d8 <__aeabi_dmul>
 8007be4:	a34e      	add	r3, pc, #312	@ (adr r3, 8007d20 <__ieee754_pow+0x3e8>)
 8007be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fc71 	bl	80004d8 <__aeabi_dmul>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4b4e      	ldr	r3, [pc, #312]	@ (8007d3c <__ieee754_pow+0x404>)
 8007c02:	f7f8 fc69 	bl	80004d8 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	a147      	add	r1, pc, #284	@ (adr r1, 8007d28 <__ieee754_pow+0x3f0>)
 8007c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c10:	f7f8 faaa 	bl	8000168 <__aeabi_dsub>
 8007c14:	4622      	mov	r2, r4
 8007c16:	462b      	mov	r3, r5
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	2000      	movs	r0, #0
 8007c22:	4947      	ldr	r1, [pc, #284]	@ (8007d40 <__ieee754_pow+0x408>)
 8007c24:	f7f8 faa0 	bl	8000168 <__aeabi_dsub>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	462b      	mov	r3, r5
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fc50 	bl	80004d8 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fc4a 	bl	80004d8 <__aeabi_dmul>
 8007c44:	a33a      	add	r3, pc, #232	@ (adr r3, 8007d30 <__ieee754_pow+0x3f8>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fc45 	bl	80004d8 <__aeabi_dmul>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4650      	mov	r0, sl
 8007c54:	4659      	mov	r1, fp
 8007c56:	f7f8 fa87 	bl	8000168 <__aeabi_dsub>
 8007c5a:	2400      	movs	r4, #0
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4680      	mov	r8, r0
 8007c62:	4689      	mov	r9, r1
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fa80 	bl	800016c <__adddf3>
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	463b      	mov	r3, r7
 8007c70:	4620      	mov	r0, r4
 8007c72:	460d      	mov	r5, r1
 8007c74:	f7f8 fa78 	bl	8000168 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 fa72 	bl	8000168 <__aeabi_dsub>
 8007c84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c9c:	465b      	mov	r3, fp
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	f7f8 fa62 	bl	8000168 <__aeabi_dsub>
 8007ca4:	4622      	mov	r2, r4
 8007ca6:	462b      	mov	r3, r5
 8007ca8:	f7f8 fc16 	bl	80004d8 <__aeabi_dmul>
 8007cac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fc0e 	bl	80004d8 <__aeabi_dmul>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4640      	mov	r0, r8
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	f7f8 fa52 	bl	800016c <__adddf3>
 8007cc8:	465b      	mov	r3, fp
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	4652      	mov	r2, sl
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7f8 fc00 	bl	80004d8 <__aeabi_dmul>
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4680      	mov	r8, r0
 8007cde:	4689      	mov	r9, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 fa42 	bl	800016c <__adddf3>
 8007ce8:	4b16      	ldr	r3, [pc, #88]	@ (8007d44 <__ieee754_pow+0x40c>)
 8007cea:	4604      	mov	r4, r0
 8007cec:	4299      	cmp	r1, r3
 8007cee:	460d      	mov	r5, r1
 8007cf0:	468b      	mov	fp, r1
 8007cf2:	f340 81fd 	ble.w	80080f0 <__ieee754_pow+0x7b8>
 8007cf6:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007cfa:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007cfe:	4303      	orrs	r3, r0
 8007d00:	f000 81dc 	beq.w	80080bc <__ieee754_pow+0x784>
 8007d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f7f8 fe56 	bl	80009bc <__aeabi_dcmplt>
 8007d10:	3800      	subs	r0, #0
 8007d12:	bf18      	it	ne
 8007d14:	2001      	movne	r0, #1
 8007d16:	e71d      	b.n	8007b54 <__ieee754_pow+0x21c>
 8007d18:	60000000 	.word	0x60000000
 8007d1c:	3ff71547 	.word	0x3ff71547
 8007d20:	f85ddf44 	.word	0xf85ddf44
 8007d24:	3e54ae0b 	.word	0x3e54ae0b
 8007d28:	55555555 	.word	0x55555555
 8007d2c:	3fd55555 	.word	0x3fd55555
 8007d30:	652b82fe 	.word	0x652b82fe
 8007d34:	3ff71547 	.word	0x3ff71547
 8007d38:	3ff00000 	.word	0x3ff00000
 8007d3c:	3fd00000 	.word	0x3fd00000
 8007d40:	3fe00000 	.word	0x3fe00000
 8007d44:	408fffff 	.word	0x408fffff
 8007d48:	4ad3      	ldr	r2, [pc, #844]	@ (8008098 <__ieee754_pow+0x760>)
 8007d4a:	4032      	ands	r2, r6
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	f040 817a 	bne.w	8008046 <__ieee754_pow+0x70e>
 8007d52:	4bd2      	ldr	r3, [pc, #840]	@ (800809c <__ieee754_pow+0x764>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	f7f8 fbbf 	bl	80004d8 <__aeabi_dmul>
 8007d5a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8007d5e:	460b      	mov	r3, r1
 8007d60:	151a      	asrs	r2, r3, #20
 8007d62:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007d66:	4422      	add	r2, r4
 8007d68:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d6a:	4acd      	ldr	r2, [pc, #820]	@ (80080a0 <__ieee754_pow+0x768>)
 8007d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d70:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007d74:	4293      	cmp	r3, r2
 8007d76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007d7a:	dd08      	ble.n	8007d8e <__ieee754_pow+0x456>
 8007d7c:	4ac9      	ldr	r2, [pc, #804]	@ (80080a4 <__ieee754_pow+0x76c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	f340 8163 	ble.w	800804a <__ieee754_pow+0x712>
 8007d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d86:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d8e:	2600      	movs	r6, #0
 8007d90:	00f3      	lsls	r3, r6, #3
 8007d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d94:	4bc4      	ldr	r3, [pc, #784]	@ (80080a8 <__ieee754_pow+0x770>)
 8007d96:	4629      	mov	r1, r5
 8007d98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007da0:	461a      	mov	r2, r3
 8007da2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007da6:	4623      	mov	r3, r4
 8007da8:	4682      	mov	sl, r0
 8007daa:	f7f8 f9dd 	bl	8000168 <__aeabi_dsub>
 8007dae:	4652      	mov	r2, sl
 8007db0:	462b      	mov	r3, r5
 8007db2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007db6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dba:	f7f8 f9d7 	bl	800016c <__adddf3>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	49b9      	ldr	r1, [pc, #740]	@ (80080ac <__ieee754_pow+0x774>)
 8007dc6:	f7f8 fcb1 	bl	800072c <__aeabi_ddiv>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dd6:	f7f8 fb7f 	bl	80004d8 <__aeabi_dmul>
 8007dda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dde:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007de2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	46ab      	mov	fp, r5
 8007dec:	106d      	asrs	r5, r5, #1
 8007dee:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007df8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007dfc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007e00:	4640      	mov	r0, r8
 8007e02:	4649      	mov	r1, r9
 8007e04:	4614      	mov	r4, r2
 8007e06:	461d      	mov	r5, r3
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e14:	f7f8 f9a8 	bl	8000168 <__aeabi_dsub>
 8007e18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4620      	mov	r0, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	f7f8 f9a0 	bl	8000168 <__aeabi_dsub>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4650      	mov	r0, sl
 8007e2e:	4659      	mov	r1, fp
 8007e30:	f7f8 f99a 	bl	8000168 <__aeabi_dsub>
 8007e34:	4642      	mov	r2, r8
 8007e36:	464b      	mov	r3, r9
 8007e38:	f7f8 fb4e 	bl	80004d8 <__aeabi_dmul>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	f7f8 f990 	bl	8000168 <__aeabi_dsub>
 8007e48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e4c:	f7f8 fb44 	bl	80004d8 <__aeabi_dmul>
 8007e50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f7f8 fb3c 	bl	80004d8 <__aeabi_dmul>
 8007e60:	a37b      	add	r3, pc, #492	@ (adr r3, 8008050 <__ieee754_pow+0x718>)
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f7f8 fb35 	bl	80004d8 <__aeabi_dmul>
 8007e6e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008058 <__ieee754_pow+0x720>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 f97a 	bl	800016c <__adddf3>
 8007e78:	4622      	mov	r2, r4
 8007e7a:	462b      	mov	r3, r5
 8007e7c:	f7f8 fb2c 	bl	80004d8 <__aeabi_dmul>
 8007e80:	a377      	add	r3, pc, #476	@ (adr r3, 8008060 <__ieee754_pow+0x728>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 f971 	bl	800016c <__adddf3>
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	f7f8 fb23 	bl	80004d8 <__aeabi_dmul>
 8007e92:	a375      	add	r3, pc, #468	@ (adr r3, 8008068 <__ieee754_pow+0x730>)
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f7f8 f968 	bl	800016c <__adddf3>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	462b      	mov	r3, r5
 8007ea0:	f7f8 fb1a 	bl	80004d8 <__aeabi_dmul>
 8007ea4:	a372      	add	r3, pc, #456	@ (adr r3, 8008070 <__ieee754_pow+0x738>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 f95f 	bl	800016c <__adddf3>
 8007eae:	4622      	mov	r2, r4
 8007eb0:	462b      	mov	r3, r5
 8007eb2:	f7f8 fb11 	bl	80004d8 <__aeabi_dmul>
 8007eb6:	a370      	add	r3, pc, #448	@ (adr r3, 8008078 <__ieee754_pow+0x740>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 f956 	bl	800016c <__adddf3>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	462b      	mov	r3, r5
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7f8 fb04 	bl	80004d8 <__aeabi_dmul>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	f7f8 f940 	bl	800016c <__adddf3>
 8007eec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ef0:	f7f8 faf2 	bl	80004d8 <__aeabi_dmul>
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	462b      	mov	r3, r5
 8007ef8:	f7f8 f938 	bl	800016c <__adddf3>
 8007efc:	4642      	mov	r2, r8
 8007efe:	4682      	mov	sl, r0
 8007f00:	468b      	mov	fp, r1
 8007f02:	464b      	mov	r3, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 fae6 	bl	80004d8 <__aeabi_dmul>
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	4b68      	ldr	r3, [pc, #416]	@ (80080b0 <__ieee754_pow+0x778>)
 8007f10:	4606      	mov	r6, r0
 8007f12:	460f      	mov	r7, r1
 8007f14:	f7f8 f92a 	bl	800016c <__adddf3>
 8007f18:	4652      	mov	r2, sl
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	f7f8 f926 	bl	800016c <__adddf3>
 8007f20:	2400      	movs	r4, #0
 8007f22:	460d      	mov	r5, r1
 8007f24:	4622      	mov	r2, r4
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fad4 	bl	80004d8 <__aeabi_dmul>
 8007f30:	2200      	movs	r2, #0
 8007f32:	4680      	mov	r8, r0
 8007f34:	4689      	mov	r9, r1
 8007f36:	4620      	mov	r0, r4
 8007f38:	4629      	mov	r1, r5
 8007f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80080b0 <__ieee754_pow+0x778>)
 8007f3c:	f7f8 f914 	bl	8000168 <__aeabi_dsub>
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	f7f8 f910 	bl	8000168 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4650      	mov	r0, sl
 8007f4e:	4659      	mov	r1, fp
 8007f50:	f7f8 f90a 	bl	8000168 <__aeabi_dsub>
 8007f54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f58:	f7f8 fabe 	bl	80004d8 <__aeabi_dmul>
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460f      	mov	r7, r1
 8007f62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007f66:	462b      	mov	r3, r5
 8007f68:	f7f8 fab6 	bl	80004d8 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f7f8 f8fa 	bl	800016c <__adddf3>
 8007f78:	2400      	movs	r4, #0
 8007f7a:	4606      	mov	r6, r0
 8007f7c:	460f      	mov	r7, r1
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 f8f1 	bl	800016c <__adddf3>
 8007f8a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008080 <__ieee754_pow+0x748>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	4620      	mov	r0, r4
 8007f92:	460d      	mov	r5, r1
 8007f94:	f7f8 faa0 	bl	80004d8 <__aeabi_dmul>
 8007f98:	4642      	mov	r2, r8
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 f8e0 	bl	8000168 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f8da 	bl	8000168 <__aeabi_dsub>
 8007fb4:	a334      	add	r3, pc, #208	@ (adr r3, 8008088 <__ieee754_pow+0x750>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 fa8d 	bl	80004d8 <__aeabi_dmul>
 8007fbe:	a334      	add	r3, pc, #208	@ (adr r3, 8008090 <__ieee754_pow+0x758>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 fa84 	bl	80004d8 <__aeabi_dmul>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 f8c8 	bl	800016c <__adddf3>
 8007fdc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fde:	4b35      	ldr	r3, [pc, #212]	@ (80080b4 <__ieee754_pow+0x77c>)
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	4413      	add	r3, r2
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f7f8 f8c0 	bl	800016c <__adddf3>
 8007fec:	4682      	mov	sl, r0
 8007fee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	f7f8 fa07 	bl	8000404 <__aeabi_i2d>
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80080b8 <__ieee754_pow+0x780>)
 8007ffe:	4413      	add	r3, r2
 8008000:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008004:	4652      	mov	r2, sl
 8008006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800800a:	465b      	mov	r3, fp
 800800c:	f7f8 f8ae 	bl	800016c <__adddf3>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	f7f8 f8aa 	bl	800016c <__adddf3>
 8008018:	4632      	mov	r2, r6
 800801a:	463b      	mov	r3, r7
 800801c:	f7f8 f8a6 	bl	800016c <__adddf3>
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4620      	mov	r0, r4
 8008026:	460d      	mov	r5, r1
 8008028:	f7f8 f89e 	bl	8000168 <__aeabi_dsub>
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	f7f8 f89a 	bl	8000168 <__aeabi_dsub>
 8008034:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008038:	f7f8 f896 	bl	8000168 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	e61c      	b.n	8007c80 <__ieee754_pow+0x348>
 8008046:	2400      	movs	r4, #0
 8008048:	e68a      	b.n	8007d60 <__ieee754_pow+0x428>
 800804a:	2601      	movs	r6, #1
 800804c:	e6a0      	b.n	8007d90 <__ieee754_pow+0x458>
 800804e:	bf00      	nop
 8008050:	4a454eef 	.word	0x4a454eef
 8008054:	3fca7e28 	.word	0x3fca7e28
 8008058:	93c9db65 	.word	0x93c9db65
 800805c:	3fcd864a 	.word	0x3fcd864a
 8008060:	a91d4101 	.word	0xa91d4101
 8008064:	3fd17460 	.word	0x3fd17460
 8008068:	518f264d 	.word	0x518f264d
 800806c:	3fd55555 	.word	0x3fd55555
 8008070:	db6fabff 	.word	0xdb6fabff
 8008074:	3fdb6db6 	.word	0x3fdb6db6
 8008078:	33333303 	.word	0x33333303
 800807c:	3fe33333 	.word	0x3fe33333
 8008080:	e0000000 	.word	0xe0000000
 8008084:	3feec709 	.word	0x3feec709
 8008088:	dc3a03fd 	.word	0xdc3a03fd
 800808c:	3feec709 	.word	0x3feec709
 8008090:	145b01f5 	.word	0x145b01f5
 8008094:	be3e2fe0 	.word	0xbe3e2fe0
 8008098:	7ff00000 	.word	0x7ff00000
 800809c:	43400000 	.word	0x43400000
 80080a0:	0003988e 	.word	0x0003988e
 80080a4:	000bb679 	.word	0x000bb679
 80080a8:	08008b80 	.word	0x08008b80
 80080ac:	3ff00000 	.word	0x3ff00000
 80080b0:	40080000 	.word	0x40080000
 80080b4:	08008b60 	.word	0x08008b60
 80080b8:	08008b70 	.word	0x08008b70
 80080bc:	a39a      	add	r3, pc, #616	@ (adr r3, 8008328 <__ieee754_pow+0x9f0>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 f851 	bl	800016c <__adddf3>
 80080ca:	4642      	mov	r2, r8
 80080cc:	e9cd 0100 	strd	r0, r1, [sp]
 80080d0:	464b      	mov	r3, r9
 80080d2:	4620      	mov	r0, r4
 80080d4:	4629      	mov	r1, r5
 80080d6:	f7f8 f847 	bl	8000168 <__aeabi_dsub>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e2:	f7f8 fc89 	bl	80009f8 <__aeabi_dcmpgt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f47f ae0c 	bne.w	8007d04 <__ieee754_pow+0x3cc>
 80080ec:	4ba0      	ldr	r3, [pc, #640]	@ (8008370 <__ieee754_pow+0xa38>)
 80080ee:	e022      	b.n	8008136 <__ieee754_pow+0x7fe>
 80080f0:	4ca0      	ldr	r4, [pc, #640]	@ (8008374 <__ieee754_pow+0xa3c>)
 80080f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	d919      	bls.n	800812e <__ieee754_pow+0x7f6>
 80080fa:	4b9f      	ldr	r3, [pc, #636]	@ (8008378 <__ieee754_pow+0xa40>)
 80080fc:	440b      	add	r3, r1
 80080fe:	4303      	orrs	r3, r0
 8008100:	d009      	beq.n	8008116 <__ieee754_pow+0x7de>
 8008102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	2300      	movs	r3, #0
 800810a:	f7f8 fc57 	bl	80009bc <__aeabi_dcmplt>
 800810e:	3800      	subs	r0, #0
 8008110:	bf18      	it	ne
 8008112:	2001      	movne	r0, #1
 8008114:	e527      	b.n	8007b66 <__ieee754_pow+0x22e>
 8008116:	4642      	mov	r2, r8
 8008118:	464b      	mov	r3, r9
 800811a:	f7f8 f825 	bl	8000168 <__aeabi_dsub>
 800811e:	4632      	mov	r2, r6
 8008120:	463b      	mov	r3, r7
 8008122:	f7f8 fc5f 	bl	80009e4 <__aeabi_dcmpge>
 8008126:	2800      	cmp	r0, #0
 8008128:	d1eb      	bne.n	8008102 <__ieee754_pow+0x7ca>
 800812a:	4b94      	ldr	r3, [pc, #592]	@ (800837c <__ieee754_pow+0xa44>)
 800812c:	e003      	b.n	8008136 <__ieee754_pow+0x7fe>
 800812e:	4a94      	ldr	r2, [pc, #592]	@ (8008380 <__ieee754_pow+0xa48>)
 8008130:	4293      	cmp	r3, r2
 8008132:	f240 80e1 	bls.w	80082f8 <__ieee754_pow+0x9c0>
 8008136:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800813a:	151b      	asrs	r3, r3, #20
 800813c:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8008140:	fa4a fa03 	asr.w	sl, sl, r3
 8008144:	44da      	add	sl, fp
 8008146:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800814a:	488e      	ldr	r0, [pc, #568]	@ (8008384 <__ieee754_pow+0xa4c>)
 800814c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008150:	4108      	asrs	r0, r1
 8008152:	ea00 030a 	and.w	r3, r0, sl
 8008156:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800815a:	f1c1 0114 	rsb	r1, r1, #20
 800815e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008162:	4640      	mov	r0, r8
 8008164:	fa4a fa01 	asr.w	sl, sl, r1
 8008168:	f1bb 0f00 	cmp.w	fp, #0
 800816c:	4649      	mov	r1, r9
 800816e:	f04f 0200 	mov.w	r2, #0
 8008172:	bfb8      	it	lt
 8008174:	f1ca 0a00 	rsblt	sl, sl, #0
 8008178:	f7f7 fff6 	bl	8000168 <__aeabi_dsub>
 800817c:	4680      	mov	r8, r0
 800817e:	4689      	mov	r9, r1
 8008180:	2400      	movs	r4, #0
 8008182:	4632      	mov	r2, r6
 8008184:	463b      	mov	r3, r7
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f7 ffef 	bl	800016c <__adddf3>
 800818e:	a368      	add	r3, pc, #416	@ (adr r3, 8008330 <__ieee754_pow+0x9f8>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	4620      	mov	r0, r4
 8008196:	460d      	mov	r5, r1
 8008198:	f7f8 f99e 	bl	80004d8 <__aeabi_dmul>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	e9cd 0100 	strd	r0, r1, [sp]
 80081a4:	4620      	mov	r0, r4
 80081a6:	4629      	mov	r1, r5
 80081a8:	f7f7 ffde 	bl	8000168 <__aeabi_dsub>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4630      	mov	r0, r6
 80081b2:	4639      	mov	r1, r7
 80081b4:	f7f7 ffd8 	bl	8000168 <__aeabi_dsub>
 80081b8:	a35f      	add	r3, pc, #380	@ (adr r3, 8008338 <__ieee754_pow+0xa00>)
 80081ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081be:	f7f8 f98b 	bl	80004d8 <__aeabi_dmul>
 80081c2:	a35f      	add	r3, pc, #380	@ (adr r3, 8008340 <__ieee754_pow+0xa08>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	4680      	mov	r8, r0
 80081ca:	4689      	mov	r9, r1
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 f982 	bl	80004d8 <__aeabi_dmul>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f7 ffc6 	bl	800016c <__adddf3>
 80081e0:	4604      	mov	r4, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081ec:	f7f7 ffbe 	bl	800016c <__adddf3>
 80081f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	f7f7 ffb6 	bl	8000168 <__aeabi_dsub>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4620      	mov	r0, r4
 8008202:	4629      	mov	r1, r5
 8008204:	f7f7 ffb0 	bl	8000168 <__aeabi_dsub>
 8008208:	4642      	mov	r2, r8
 800820a:	4606      	mov	r6, r0
 800820c:	460f      	mov	r7, r1
 800820e:	464b      	mov	r3, r9
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	f7f8 f960 	bl	80004d8 <__aeabi_dmul>
 8008218:	a34b      	add	r3, pc, #300	@ (adr r3, 8008348 <__ieee754_pow+0xa10>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	4604      	mov	r4, r0
 8008220:	460d      	mov	r5, r1
 8008222:	f7f8 f959 	bl	80004d8 <__aeabi_dmul>
 8008226:	a34a      	add	r3, pc, #296	@ (adr r3, 8008350 <__ieee754_pow+0xa18>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f7 ff9c 	bl	8000168 <__aeabi_dsub>
 8008230:	4622      	mov	r2, r4
 8008232:	462b      	mov	r3, r5
 8008234:	f7f8 f950 	bl	80004d8 <__aeabi_dmul>
 8008238:	a347      	add	r3, pc, #284	@ (adr r3, 8008358 <__ieee754_pow+0xa20>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f7 ff95 	bl	800016c <__adddf3>
 8008242:	4622      	mov	r2, r4
 8008244:	462b      	mov	r3, r5
 8008246:	f7f8 f947 	bl	80004d8 <__aeabi_dmul>
 800824a:	a345      	add	r3, pc, #276	@ (adr r3, 8008360 <__ieee754_pow+0xa28>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f7 ff8a 	bl	8000168 <__aeabi_dsub>
 8008254:	4622      	mov	r2, r4
 8008256:	462b      	mov	r3, r5
 8008258:	f7f8 f93e 	bl	80004d8 <__aeabi_dmul>
 800825c:	a342      	add	r3, pc, #264	@ (adr r3, 8008368 <__ieee754_pow+0xa30>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f7f7 ff83 	bl	800016c <__adddf3>
 8008266:	4622      	mov	r2, r4
 8008268:	462b      	mov	r3, r5
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f7 ff77 	bl	8000168 <__aeabi_dsub>
 800827a:	4604      	mov	r4, r0
 800827c:	460d      	mov	r5, r1
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 f927 	bl	80004d8 <__aeabi_dmul>
 800828a:	2200      	movs	r2, #0
 800828c:	e9cd 0100 	strd	r0, r1, [sp]
 8008290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008294:	4620      	mov	r0, r4
 8008296:	4629      	mov	r1, r5
 8008298:	f7f7 ff66 	bl	8000168 <__aeabi_dsub>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082a4:	f7f8 fa42 	bl	800072c <__aeabi_ddiv>
 80082a8:	4632      	mov	r2, r6
 80082aa:	4604      	mov	r4, r0
 80082ac:	460d      	mov	r5, r1
 80082ae:	463b      	mov	r3, r7
 80082b0:	4640      	mov	r0, r8
 80082b2:	4649      	mov	r1, r9
 80082b4:	f7f8 f910 	bl	80004d8 <__aeabi_dmul>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	f7f7 ff56 	bl	800016c <__adddf3>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	f7f7 ff4e 	bl	8000168 <__aeabi_dsub>
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	f7f7 ff4a 	bl	8000168 <__aeabi_dsub>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	2000      	movs	r0, #0
 80082da:	492b      	ldr	r1, [pc, #172]	@ (8008388 <__ieee754_pow+0xa50>)
 80082dc:	f7f7 ff44 	bl	8000168 <__aeabi_dsub>
 80082e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80082e4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80082e8:	da09      	bge.n	80082fe <__ieee754_pow+0x9c6>
 80082ea:	4652      	mov	r2, sl
 80082ec:	f000 f854 	bl	8008398 <scalbn>
 80082f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f4:	f7ff bb89 	b.w	8007a0a <__ieee754_pow+0xd2>
 80082f8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80082fc:	e740      	b.n	8008180 <__ieee754_pow+0x848>
 80082fe:	4621      	mov	r1, r4
 8008300:	e7f6      	b.n	80082f0 <__ieee754_pow+0x9b8>
 8008302:	2000      	movs	r0, #0
 8008304:	4920      	ldr	r1, [pc, #128]	@ (8008388 <__ieee754_pow+0xa50>)
 8008306:	f7ff bb35 	b.w	8007974 <__ieee754_pow+0x3c>
 800830a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800830e:	f7ff bb31 	b.w	8007974 <__ieee754_pow+0x3c>
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	f7ff bb2d 	b.w	8007974 <__ieee754_pow+0x3c>
 800831a:	460c      	mov	r4, r1
 800831c:	f7ff bb87 	b.w	8007a2e <__ieee754_pow+0xf6>
 8008320:	2400      	movs	r4, #0
 8008322:	f7ff bb69 	b.w	80079f8 <__ieee754_pow+0xc0>
 8008326:	bf00      	nop
 8008328:	652b82fe 	.word	0x652b82fe
 800832c:	3c971547 	.word	0x3c971547
 8008330:	00000000 	.word	0x00000000
 8008334:	3fe62e43 	.word	0x3fe62e43
 8008338:	fefa39ef 	.word	0xfefa39ef
 800833c:	3fe62e42 	.word	0x3fe62e42
 8008340:	0ca86c39 	.word	0x0ca86c39
 8008344:	be205c61 	.word	0xbe205c61
 8008348:	72bea4d0 	.word	0x72bea4d0
 800834c:	3e663769 	.word	0x3e663769
 8008350:	c5d26bf1 	.word	0xc5d26bf1
 8008354:	3ebbbd41 	.word	0x3ebbbd41
 8008358:	af25de2c 	.word	0xaf25de2c
 800835c:	3f11566a 	.word	0x3f11566a
 8008360:	16bebd93 	.word	0x16bebd93
 8008364:	3f66c16c 	.word	0x3f66c16c
 8008368:	5555553e 	.word	0x5555553e
 800836c:	3fc55555 	.word	0x3fc55555
 8008370:	40900000 	.word	0x40900000
 8008374:	4090cbff 	.word	0x4090cbff
 8008378:	3f6f3400 	.word	0x3f6f3400
 800837c:	4090cc00 	.word	0x4090cc00
 8008380:	3fe00000 	.word	0x3fe00000
 8008384:	fff00000 	.word	0xfff00000
 8008388:	3ff00000 	.word	0x3ff00000

0800838c <fabs>:
 800838c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008390:	4619      	mov	r1, r3
 8008392:	4770      	bx	lr
 8008394:	0000      	movs	r0, r0
	...

08008398 <scalbn>:
 8008398:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800839c:	4616      	mov	r6, r2
 800839e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083a2:	4683      	mov	fp, r0
 80083a4:	468c      	mov	ip, r1
 80083a6:	460b      	mov	r3, r1
 80083a8:	b982      	cbnz	r2, 80083cc <scalbn+0x34>
 80083aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80083ae:	4303      	orrs	r3, r0
 80083b0:	d035      	beq.n	800841e <scalbn+0x86>
 80083b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008468 <scalbn+0xd0>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	f7f8 f88f 	bl	80004d8 <__aeabi_dmul>
 80083ba:	4b2c      	ldr	r3, [pc, #176]	@ (800846c <scalbn+0xd4>)
 80083bc:	4683      	mov	fp, r0
 80083be:	429e      	cmp	r6, r3
 80083c0:	468c      	mov	ip, r1
 80083c2:	da0d      	bge.n	80083e0 <scalbn+0x48>
 80083c4:	a324      	add	r3, pc, #144	@ (adr r3, 8008458 <scalbn+0xc0>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	e019      	b.n	8008400 <scalbn+0x68>
 80083cc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80083d0:	42ba      	cmp	r2, r7
 80083d2:	d109      	bne.n	80083e8 <scalbn+0x50>
 80083d4:	4602      	mov	r2, r0
 80083d6:	f7f7 fec9 	bl	800016c <__adddf3>
 80083da:	4683      	mov	fp, r0
 80083dc:	468c      	mov	ip, r1
 80083de:	e01e      	b.n	800841e <scalbn+0x86>
 80083e0:	460b      	mov	r3, r1
 80083e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083e6:	3a36      	subs	r2, #54	@ 0x36
 80083e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80083ec:	428e      	cmp	r6, r1
 80083ee:	dd0a      	ble.n	8008406 <scalbn+0x6e>
 80083f0:	a31b      	add	r3, pc, #108	@ (adr r3, 8008460 <scalbn+0xc8>)
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	4665      	mov	r5, ip
 80083f8:	f363 051e 	bfi	r5, r3, #0, #31
 80083fc:	4629      	mov	r1, r5
 80083fe:	481c      	ldr	r0, [pc, #112]	@ (8008470 <scalbn+0xd8>)
 8008400:	f7f8 f86a 	bl	80004d8 <__aeabi_dmul>
 8008404:	e7e9      	b.n	80083da <scalbn+0x42>
 8008406:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800840a:	4432      	add	r2, r6
 800840c:	428a      	cmp	r2, r1
 800840e:	dcef      	bgt.n	80083f0 <scalbn+0x58>
 8008410:	2a00      	cmp	r2, #0
 8008412:	dd08      	ble.n	8008426 <scalbn+0x8e>
 8008414:	f36f 531e 	bfc	r3, #20, #11
 8008418:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800841c:	46ac      	mov	ip, r5
 800841e:	4658      	mov	r0, fp
 8008420:	4661      	mov	r1, ip
 8008422:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008426:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800842a:	da09      	bge.n	8008440 <scalbn+0xa8>
 800842c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008430:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008434:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008438:	480e      	ldr	r0, [pc, #56]	@ (8008474 <scalbn+0xdc>)
 800843a:	f041 011f 	orr.w	r1, r1, #31
 800843e:	e7c1      	b.n	80083c4 <scalbn+0x2c>
 8008440:	3236      	adds	r2, #54	@ 0x36
 8008442:	f36f 531e 	bfc	r3, #20, #11
 8008446:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800844a:	4658      	mov	r0, fp
 800844c:	4629      	mov	r1, r5
 800844e:	2200      	movs	r2, #0
 8008450:	4b09      	ldr	r3, [pc, #36]	@ (8008478 <scalbn+0xe0>)
 8008452:	e7d5      	b.n	8008400 <scalbn+0x68>
 8008454:	f3af 8000 	nop.w
 8008458:	c2f8f359 	.word	0xc2f8f359
 800845c:	01a56e1f 	.word	0x01a56e1f
 8008460:	8800759c 	.word	0x8800759c
 8008464:	7e37e43c 	.word	0x7e37e43c
 8008468:	43500000 	.word	0x43500000
 800846c:	ffff3cb0 	.word	0xffff3cb0
 8008470:	8800759c 	.word	0x8800759c
 8008474:	c2f8f359 	.word	0xc2f8f359
 8008478:	3c900000 	.word	0x3c900000

0800847c <with_errno>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	4616      	mov	r6, r2
 8008484:	f7fd f962 	bl	800574c <__errno>
 8008488:	4629      	mov	r1, r5
 800848a:	6006      	str	r6, [r0, #0]
 800848c:	4620      	mov	r0, r4
 800848e:	bd70      	pop	{r4, r5, r6, pc}

08008490 <xflow>:
 8008490:	b513      	push	{r0, r1, r4, lr}
 8008492:	4604      	mov	r4, r0
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	b10c      	cbz	r4, 800849e <xflow+0xe>
 800849a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800849e:	e9cd 2300 	strd	r2, r3, [sp]
 80084a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a6:	f7f8 f817 	bl	80004d8 <__aeabi_dmul>
 80084aa:	2222      	movs	r2, #34	@ 0x22
 80084ac:	b002      	add	sp, #8
 80084ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b2:	f7ff bfe3 	b.w	800847c <with_errno>

080084b6 <__math_uflow>:
 80084b6:	2200      	movs	r2, #0
 80084b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80084bc:	f7ff bfe8 	b.w	8008490 <xflow>

080084c0 <__math_oflow>:
 80084c0:	2200      	movs	r2, #0
 80084c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80084c6:	f7ff bfe3 	b.w	8008490 <xflow>
	...

080084cc <__ieee754_sqrt>:
 80084cc:	4a65      	ldr	r2, [pc, #404]	@ (8008664 <__ieee754_sqrt+0x198>)
 80084ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d2:	438a      	bics	r2, r1
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	460b      	mov	r3, r1
 80084da:	4604      	mov	r4, r0
 80084dc:	d10e      	bne.n	80084fc <__ieee754_sqrt+0x30>
 80084de:	4602      	mov	r2, r0
 80084e0:	f7f7 fffa 	bl	80004d8 <__aeabi_dmul>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f7 fe3e 	bl	800016c <__adddf3>
 80084f0:	4606      	mov	r6, r0
 80084f2:	460f      	mov	r7, r1
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	2900      	cmp	r1, #0
 80084fe:	dc0c      	bgt.n	800851a <__ieee754_sqrt+0x4e>
 8008500:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008504:	4302      	orrs	r2, r0
 8008506:	d0f5      	beq.n	80084f4 <__ieee754_sqrt+0x28>
 8008508:	b189      	cbz	r1, 800852e <__ieee754_sqrt+0x62>
 800850a:	4602      	mov	r2, r0
 800850c:	f7f7 fe2c 	bl	8000168 <__aeabi_dsub>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	f7f8 f90a 	bl	800072c <__aeabi_ddiv>
 8008518:	e7ea      	b.n	80084f0 <__ieee754_sqrt+0x24>
 800851a:	150a      	asrs	r2, r1, #20
 800851c:	d115      	bne.n	800854a <__ieee754_sqrt+0x7e>
 800851e:	2100      	movs	r1, #0
 8008520:	e009      	b.n	8008536 <__ieee754_sqrt+0x6a>
 8008522:	0ae3      	lsrs	r3, r4, #11
 8008524:	3a15      	subs	r2, #21
 8008526:	0564      	lsls	r4, r4, #21
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0fa      	beq.n	8008522 <__ieee754_sqrt+0x56>
 800852c:	e7f7      	b.n	800851e <__ieee754_sqrt+0x52>
 800852e:	460a      	mov	r2, r1
 8008530:	e7fa      	b.n	8008528 <__ieee754_sqrt+0x5c>
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	3101      	adds	r1, #1
 8008536:	02d8      	lsls	r0, r3, #11
 8008538:	d5fb      	bpl.n	8008532 <__ieee754_sqrt+0x66>
 800853a:	1e48      	subs	r0, r1, #1
 800853c:	1a12      	subs	r2, r2, r0
 800853e:	f1c1 0020 	rsb	r0, r1, #32
 8008542:	fa24 f000 	lsr.w	r0, r4, r0
 8008546:	4303      	orrs	r3, r0
 8008548:	408c      	lsls	r4, r1
 800854a:	2700      	movs	r7, #0
 800854c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8008550:	2116      	movs	r1, #22
 8008552:	07d2      	lsls	r2, r2, #31
 8008554:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008558:	463a      	mov	r2, r7
 800855a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800855e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008562:	bf5c      	itt	pl
 8008564:	005b      	lslpl	r3, r3, #1
 8008566:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800856a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800856e:	bf58      	it	pl
 8008570:	0064      	lslpl	r4, r4, #1
 8008572:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008576:	ea4f 0868 	mov.w	r8, r8, asr #1
 800857a:	0064      	lsls	r4, r4, #1
 800857c:	1815      	adds	r5, r2, r0
 800857e:	429d      	cmp	r5, r3
 8008580:	bfde      	ittt	le
 8008582:	182a      	addle	r2, r5, r0
 8008584:	1b5b      	suble	r3, r3, r5
 8008586:	183f      	addle	r7, r7, r0
 8008588:	0fe5      	lsrs	r5, r4, #31
 800858a:	3901      	subs	r1, #1
 800858c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008590:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008594:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008598:	d1f0      	bne.n	800857c <__ieee754_sqrt+0xb0>
 800859a:	460d      	mov	r5, r1
 800859c:	2620      	movs	r6, #32
 800859e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80085a2:	4293      	cmp	r3, r2
 80085a4:	eb00 0c01 	add.w	ip, r0, r1
 80085a8:	dc02      	bgt.n	80085b0 <__ieee754_sqrt+0xe4>
 80085aa:	d113      	bne.n	80085d4 <__ieee754_sqrt+0x108>
 80085ac:	45a4      	cmp	ip, r4
 80085ae:	d811      	bhi.n	80085d4 <__ieee754_sqrt+0x108>
 80085b0:	f1bc 0f00 	cmp.w	ip, #0
 80085b4:	eb0c 0100 	add.w	r1, ip, r0
 80085b8:	da3e      	bge.n	8008638 <__ieee754_sqrt+0x16c>
 80085ba:	2900      	cmp	r1, #0
 80085bc:	db3c      	blt.n	8008638 <__ieee754_sqrt+0x16c>
 80085be:	f102 0e01 	add.w	lr, r2, #1
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	4672      	mov	r2, lr
 80085c6:	45a4      	cmp	ip, r4
 80085c8:	bf88      	it	hi
 80085ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80085ce:	eba4 040c 	sub.w	r4, r4, ip
 80085d2:	4405      	add	r5, r0
 80085d4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80085d8:	3e01      	subs	r6, #1
 80085da:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80085de:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80085e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80085e6:	d1dc      	bne.n	80085a2 <__ieee754_sqrt+0xd6>
 80085e8:	431c      	orrs	r4, r3
 80085ea:	d01a      	beq.n	8008622 <__ieee754_sqrt+0x156>
 80085ec:	4c1e      	ldr	r4, [pc, #120]	@ (8008668 <__ieee754_sqrt+0x19c>)
 80085ee:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800866c <__ieee754_sqrt+0x1a0>
 80085f2:	e9d4 0100 	ldrd	r0, r1, [r4]
 80085f6:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085fa:	f7f7 fdb5 	bl	8000168 <__aeabi_dsub>
 80085fe:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4650      	mov	r0, sl
 8008608:	4659      	mov	r1, fp
 800860a:	f7f8 f9e1 	bl	80009d0 <__aeabi_dcmple>
 800860e:	b140      	cbz	r0, 8008622 <__ieee754_sqrt+0x156>
 8008610:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008618:	f1b5 3fff 	cmp.w	r5, #4294967295
 800861c:	d10e      	bne.n	800863c <__ieee754_sqrt+0x170>
 800861e:	4635      	mov	r5, r6
 8008620:	3701      	adds	r7, #1
 8008622:	107b      	asrs	r3, r7, #1
 8008624:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8008628:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800862c:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8008630:	086b      	lsrs	r3, r5, #1
 8008632:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8008636:	e75b      	b.n	80084f0 <__ieee754_sqrt+0x24>
 8008638:	4696      	mov	lr, r2
 800863a:	e7c2      	b.n	80085c2 <__ieee754_sqrt+0xf6>
 800863c:	f7f7 fd96 	bl	800016c <__adddf3>
 8008640:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	f7f8 f9b6 	bl	80009bc <__aeabi_dcmplt>
 8008650:	b120      	cbz	r0, 800865c <__ieee754_sqrt+0x190>
 8008652:	1cab      	adds	r3, r5, #2
 8008654:	bf08      	it	eq
 8008656:	3701      	addeq	r7, #1
 8008658:	3502      	adds	r5, #2
 800865a:	e7e2      	b.n	8008622 <__ieee754_sqrt+0x156>
 800865c:	1c6b      	adds	r3, r5, #1
 800865e:	f023 0501 	bic.w	r5, r3, #1
 8008662:	e7de      	b.n	8008622 <__ieee754_sqrt+0x156>
 8008664:	7ff00000 	.word	0x7ff00000
 8008668:	08008b98 	.word	0x08008b98
 800866c:	08008b90 	.word	0x08008b90

08008670 <_init>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	bf00      	nop
 8008674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008676:	bc08      	pop	{r3}
 8008678:	469e      	mov	lr, r3
 800867a:	4770      	bx	lr

0800867c <_fini>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr
