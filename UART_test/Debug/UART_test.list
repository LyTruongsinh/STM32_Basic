
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005290  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080053a0  080053a0  000063a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800573c  0800573c  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800573c  0800573c  0000673c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005744  08005744  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005744  08005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005748  08005748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800574c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001d4  08005920  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08005920  00007390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000784d  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d5  00000000  00000000  0000ea4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00010220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000584  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179ea  00000000  00000000  00010eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cdf  00000000  00000000  000288d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e0a  00000000  00000000  000315b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b53bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c00  00000000  00000000  000b5404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000b8004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005388 	.word	0x08005388

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005388 	.word	0x08005388

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data_rx;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	  if(data_rx =='a') {
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <HAL_UART_RxCpltCallback+0x44>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b61      	cmp	r3, #97	@ 0x61
 8000a96:	d106      	bne.n	8000aa6 <HAL_UART_RxCpltCallback+0x1e>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x48>)
 8000aa0:	f000 fe32 	bl	8001708 <HAL_GPIO_WritePin>
 8000aa4:	e009      	b.n	8000aba <HAL_UART_RxCpltCallback+0x32>
	  }
	  else {
		  if(data_rx == 'b') {
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_UART_RxCpltCallback+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b62      	cmp	r3, #98	@ 0x62
 8000aac:	d105      	bne.n	8000aba <HAL_UART_RxCpltCallback+0x32>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab4:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x48>)
 8000ab6:	f000 fe27 	bl	8001708 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_UART_Receive_IT(&huart1,&data_rx,1);
 8000aba:	2201      	movs	r2, #1
 8000abc:	4903      	ldr	r1, [pc, #12]	@ (8000acc <HAL_UART_RxCpltCallback+0x44>)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x4c>)
 8000ac0:	f001 fa9a 	bl	8001ff8 <HAL_UART_Receive_IT>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000238 	.word	0x20000238
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	200001f0 	.word	0x200001f0

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fa6e 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f810 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 f87a 	bl	8000bdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ae8:	f000 f84e 	bl	8000b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&data_rx,1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	4903      	ldr	r1, [pc, #12]	@ (8000afc <main+0x24>)
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <main+0x28>)
 8000af2:	f001 fa81 	bl	8001ff8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af6:	bf00      	nop
 8000af8:	e7fd      	b.n	8000af6 <main+0x1e>
 8000afa:	bf00      	nop
 8000afc:	20000238 	.word	0x20000238
 8000b00:	200001f0 	.word	0x200001f0

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b090      	sub	sp, #64	@ 0x40
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0318 	add.w	r3, r7, #24
 8000b0e:	2228      	movs	r2, #40	@ 0x28
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fd07 	bl	8003526 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b3a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fdf7 	bl	8001738 <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b50:	f000 f884 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
 8000b56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f864 	bl	8001c3c <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b7a:	f000 f86f 	bl	8000c5c <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3740      	adds	r7, #64	@ 0x40
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f001 f9ca 	bl	8001f58 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 f847 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001f0 	.word	0x200001f0
 8000bd8:	40013800 	.word	0x40013800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_GPIO_Init+0x78>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c26:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <MX_GPIO_Init+0x7c>)
 8000c28:	f000 fd6e 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4619      	mov	r1, r3
 8000c44:	4804      	ldr	r0, [pc, #16]	@ (8000c58 <MX_GPIO_Init+0x7c>)
 8000c46:	f000 fbdb 	bl	8001400 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40011000 	.word	0x40011000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_MspInit+0x5c>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_MspInit+0x60>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_MspInit+0x60>)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000

08000ccc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a20      	ldr	r2, [pc, #128]	@ (8000d68 <HAL_UART_MspInit+0x9c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d139      	bne.n	8000d60 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cec:	4b1f      	ldr	r3, [pc, #124]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a18      	ldr	r2, [pc, #96]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <HAL_UART_MspInit+0xa0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <HAL_UART_MspInit+0xa4>)
 8000d32:	f000 fb65 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <HAL_UART_MspInit+0xa4>)
 8000d4c:	f000 fb58 	bl	8001400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	2025      	movs	r0, #37	@ 0x25
 8000d56:	f000 fa6a 	bl	800122e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5a:	2025      	movs	r0, #37	@ 0x25
 8000d5c:	f000 fa83 	bl	8001266 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f940 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	f001 f937 	bl	8002044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001f0 	.word	0x200001f0

08000de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <_kill>:

int _kill(int pid, int sig)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000df8:	f002 fbe8 	bl	80035cc <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2216      	movs	r2, #22
 8000e00:	601a      	str	r2, [r3, #0]
  return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_exit>:

void _exit (int status)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e16:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffe7 	bl	8000dee <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <_exit+0x12>

08000e24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e00a      	b.n	8000e4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e36:	f3af 8000 	nop.w
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dbf0      	blt.n	8000e36 <_read+0x12>
  }

  return len;
 8000e54:	687b      	ldr	r3, [r7, #4]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b086      	sub	sp, #24
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	60f8      	str	r0, [r7, #12]
 8000e66:	60b9      	str	r1, [r7, #8]
 8000e68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	e009      	b.n	8000e84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf1      	blt.n	8000e70 <_write+0x12>
  }
  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_close>:

int _close(int file)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <_isatty>:

int _isatty(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	@ (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fb50 	bl	80035cc <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20005000 	.word	0x20005000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000023c 	.word	0x2000023c
 8000f60:	20000390 	.word	0x20000390

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f70:	f7ff fff8 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480b      	ldr	r0, [pc, #44]	@ (8000fa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f76:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f78:	4a0c      	ldr	r2, [pc, #48]	@ (8000fac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f8c:	4c09      	ldr	r4, [pc, #36]	@ (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 fb1d 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fd9b 	bl	8000ad8 <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000fac:	0800574c 	.word	0x0800574c
  ldr r2, =_sbss
 8000fb0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000fb4:	20000390 	.word	0x20000390

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_Init+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <HAL_Init+0x28>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f923 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fe46 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f93b 	bl	8001282 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f903 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a03      	ldr	r2, [pc, #12]	@ (8001068 <HAL_IncTick+0x20>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000008 	.word	0x20000008
 8001068:	20000240 	.word	0x20000240

0800106c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	@ (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	20000240 	.word	0x20000240

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4906      	ldr	r1, [pc, #24]	@ (8001118 <__NVIC_EnableIRQ+0x34>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff90 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff2d 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff42 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff35 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa2 	bl	80011d4 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d008      	beq.n	80012c4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2204      	movs	r2, #4
 80012b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e020      	b.n	8001306 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 020e 	bic.w	r2, r2, #14
 80012d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d005      	beq.n	8001334 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e051      	b.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 020e 	bic.w	r2, r2, #14
 8001342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <HAL_DMA_Abort_IT+0xd4>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d029      	beq.n	80013b2 <HAL_DMA_Abort_IT+0xa2>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <HAL_DMA_Abort_IT+0xd8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d022      	beq.n	80013ae <HAL_DMA_Abort_IT+0x9e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <HAL_DMA_Abort_IT+0xdc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01a      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x98>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1e      	ldr	r2, [pc, #120]	@ (80013f0 <HAL_DMA_Abort_IT+0xe0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d012      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x92>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_DMA_Abort_IT+0xe4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00a      	beq.n	800139c <HAL_DMA_Abort_IT+0x8c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <HAL_DMA_Abort_IT+0xe8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d102      	bne.n	8001396 <HAL_DMA_Abort_IT+0x86>
 8001390:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001394:	e00e      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 8001396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800139a:	e00b      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 800139c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a0:	e008      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	e005      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 80013a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ac:	e002      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 80013ae:	2310      	movs	r3, #16
 80013b0:	e000      	b.n	80013b4 <HAL_DMA_Abort_IT+0xa4>
 80013b2:	2301      	movs	r3, #1
 80013b4:	4a11      	ldr	r2, [pc, #68]	@ (80013fc <HAL_DMA_Abort_IT+0xec>)
 80013b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
    } 
  }
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020008 	.word	0x40020008
 80013e8:	4002001c 	.word	0x4002001c
 80013ec:	40020030 	.word	0x40020030
 80013f0:	40020044 	.word	0x40020044
 80013f4:	40020058 	.word	0x40020058
 80013f8:	4002006c 	.word	0x4002006c
 80013fc:	40020000 	.word	0x40020000

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b08b      	sub	sp, #44	@ 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e169      	b.n	80016e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001414:	2201      	movs	r2, #1
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8158 	bne.w	80016e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a9a      	ldr	r2, [pc, #616]	@ (80016a0 <HAL_GPIO_Init+0x2a0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d05e      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800143c:	4a98      	ldr	r2, [pc, #608]	@ (80016a0 <HAL_GPIO_Init+0x2a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d875      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001442:	4a98      	ldr	r2, [pc, #608]	@ (80016a4 <HAL_GPIO_Init+0x2a4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d058      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001448:	4a96      	ldr	r2, [pc, #600]	@ (80016a4 <HAL_GPIO_Init+0x2a4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d86f      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800144e:	4a96      	ldr	r2, [pc, #600]	@ (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d052      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001454:	4a94      	ldr	r2, [pc, #592]	@ (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d869      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800145a:	4a94      	ldr	r2, [pc, #592]	@ (80016ac <HAL_GPIO_Init+0x2ac>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04c      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001460:	4a92      	ldr	r2, [pc, #584]	@ (80016ac <HAL_GPIO_Init+0x2ac>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d863      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001466:	4a92      	ldr	r2, [pc, #584]	@ (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d046      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800146c:	4a90      	ldr	r2, [pc, #576]	@ (80016b0 <HAL_GPIO_Init+0x2b0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d85d      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d82a      	bhi.n	80014cc <HAL_GPIO_Init+0xcc>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d859      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800147a:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <HAL_GPIO_Init+0x80>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	080014fb 	.word	0x080014fb
 8001484:	080014d5 	.word	0x080014d5
 8001488:	080014e7 	.word	0x080014e7
 800148c:	08001529 	.word	0x08001529
 8001490:	0800152f 	.word	0x0800152f
 8001494:	0800152f 	.word	0x0800152f
 8001498:	0800152f 	.word	0x0800152f
 800149c:	0800152f 	.word	0x0800152f
 80014a0:	0800152f 	.word	0x0800152f
 80014a4:	0800152f 	.word	0x0800152f
 80014a8:	0800152f 	.word	0x0800152f
 80014ac:	0800152f 	.word	0x0800152f
 80014b0:	0800152f 	.word	0x0800152f
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	0800152f 	.word	0x0800152f
 80014bc:	0800152f 	.word	0x0800152f
 80014c0:	0800152f 	.word	0x0800152f
 80014c4:	080014dd 	.word	0x080014dd
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	4a79      	ldr	r2, [pc, #484]	@ (80016b4 <HAL_GPIO_Init+0x2b4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d2:	e02c      	b.n	800152e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e029      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e024      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3308      	adds	r3, #8
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e01f      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	330c      	adds	r3, #12
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e01a      	b.n	8001530 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e013      	b.n	8001530 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	611a      	str	r2, [r3, #16]
          break;
 800151a:	e009      	b.n	8001530 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	615a      	str	r2, [r3, #20]
          break;
 8001526:	e003      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x130>
          break;
 800152e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2bff      	cmp	r3, #255	@ 0xff
 8001534:	d801      	bhi.n	800153a <HAL_GPIO_Init+0x13a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e001      	b.n	800153e <HAL_GPIO_Init+0x13e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	@ 0xff
 8001544:	d802      	bhi.n	800154c <HAL_GPIO_Init+0x14c>
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x152>
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	3b08      	subs	r3, #8
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	210f      	movs	r1, #15
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	6a39      	ldr	r1, [r7, #32]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	431a      	orrs	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80b1 	beq.w	80016e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	4b4d      	ldr	r3, [pc, #308]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001598:	4a48      	ldr	r2, [pc, #288]	@ (80016bc <HAL_GPIO_Init+0x2bc>)
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a40      	ldr	r2, [pc, #256]	@ (80016c0 <HAL_GPIO_Init+0x2c0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d013      	beq.n	80015ec <HAL_GPIO_Init+0x1ec>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3f      	ldr	r2, [pc, #252]	@ (80016c4 <HAL_GPIO_Init+0x2c4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00d      	beq.n	80015e8 <HAL_GPIO_Init+0x1e8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3e      	ldr	r2, [pc, #248]	@ (80016c8 <HAL_GPIO_Init+0x2c8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1e4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3d      	ldr	r2, [pc, #244]	@ (80016cc <HAL_GPIO_Init+0x2cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_Init+0x1e0>
 80015dc:	2303      	movs	r3, #3
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015ec:	2300      	movs	r3, #0
 80015ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fe:	492f      	ldr	r1, [pc, #188]	@ (80016bc <HAL_GPIO_Init+0x2bc>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	492c      	ldr	r1, [pc, #176]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4928      	ldr	r1, [pc, #160]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4922      	ldr	r1, [pc, #136]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	491e      	ldr	r1, [pc, #120]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4918      	ldr	r1, [pc, #96]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001676:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4914      	ldr	r1, [pc, #80]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d021      	beq.n	80016d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	490e      	ldr	r1, [pc, #56]	@ (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e021      	b.n	80016e2 <HAL_GPIO_Init+0x2e2>
 800169e:	bf00      	nop
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40011400 	.word	0x40011400
 80016d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_GPIO_Init+0x304>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4909      	ldr	r1, [pc, #36]	@ (8001704 <HAL_GPIO_Init+0x304>)
 80016de:	4013      	ands	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f ae8e 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	372c      	adds	r7, #44	@ 0x2c
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e272      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8087 	beq.w	8001866 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001758:	4b92      	ldr	r3, [pc, #584]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00c      	beq.n	800177e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001764:	4b8f      	ldr	r3, [pc, #572]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d112      	bne.n	8001796 <HAL_RCC_OscConfig+0x5e>
 8001770:	4b8c      	ldr	r3, [pc, #560]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177c:	d10b      	bne.n	8001796 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177e:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d06c      	beq.n	8001864 <HAL_RCC_OscConfig+0x12c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d168      	bne.n	8001864 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e24c      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x76>
 80017a0:	4b80      	ldr	r3, [pc, #512]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a7f      	ldr	r2, [pc, #508]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e02e      	b.n	800180c <HAL_RCC_OscConfig+0xd4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x98>
 80017b6:	4b7b      	ldr	r3, [pc, #492]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7a      	ldr	r2, [pc, #488]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b78      	ldr	r3, [pc, #480]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a77      	ldr	r2, [pc, #476]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01d      	b.n	800180c <HAL_RCC_OscConfig+0xd4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0xbc>
 80017da:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a71      	ldr	r2, [pc, #452]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xd4>
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6a      	ldr	r2, [pc, #424]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b68      	ldr	r3, [pc, #416]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a67      	ldr	r2, [pc, #412]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d013      	beq.n	800183c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc2a 	bl	800106c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fc26 	bl	800106c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e200      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b5d      	ldr	r3, [pc, #372]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0xe4>
 800183a:	e014      	b.n	8001866 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc16 	bl	800106c <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc12 	bl	800106c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1ec      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001856:	4b53      	ldr	r3, [pc, #332]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x10c>
 8001862:	e000      	b.n	8001866 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d063      	beq.n	800193a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001872:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00b      	beq.n	8001896 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d11c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x18c>
 800188a:	4b46      	ldr	r3, [pc, #280]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d116      	bne.n	80018c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x176>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e1c0      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4939      	ldr	r1, [pc, #228]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	e03a      	b.n	800193a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d020      	beq.n	800190e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018cc:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fbcb 	bl	800106c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fbc7 	bl	800106c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1a1      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4927      	ldr	r1, [pc, #156]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	600b      	str	r3, [r1, #0]
 800190c:	e015      	b.n	800193a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190e:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_RCC_OscConfig+0x270>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fbaa 	bl	800106c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191c:	f7ff fba6 	bl	800106c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e180      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d03a      	beq.n	80019bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d019      	beq.n	8001982 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_RCC_OscConfig+0x274>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001954:	f7ff fb8a 	bl	800106c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fb86 	bl	800106c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e160      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_OscConfig+0x26c>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800197a:	2001      	movs	r0, #1
 800197c:	f000 face 	bl	8001f1c <RCC_Delay>
 8001980:	e01c      	b.n	80019bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_RCC_OscConfig+0x274>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fb70 	bl	800106c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198e:	e00f      	b.n	80019b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fb6c 	bl	800106c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d908      	bls.n	80019b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e146      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	42420000 	.word	0x42420000
 80019ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	4b92      	ldr	r3, [pc, #584]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1e9      	bne.n	8001990 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80a6 	beq.w	8001b16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ce:	4b8b      	ldr	r3, [pc, #556]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10d      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	4b88      	ldr	r3, [pc, #544]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a87      	ldr	r2, [pc, #540]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b85      	ldr	r3, [pc, #532]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b82      	ldr	r3, [pc, #520]	@ (8001c00 <HAL_RCC_OscConfig+0x4c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d118      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	4b7f      	ldr	r3, [pc, #508]	@ (8001c00 <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7e      	ldr	r2, [pc, #504]	@ (8001c00 <HAL_RCC_OscConfig+0x4c8>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fb2d 	bl	800106c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff fb29 	bl	800106c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	@ 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e103      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b75      	ldr	r3, [pc, #468]	@ (8001c00 <HAL_RCC_OscConfig+0x4c8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x312>
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a6e      	ldr	r2, [pc, #440]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e02d      	b.n	8001aa6 <HAL_RCC_OscConfig+0x36e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x334>
 8001a52:	4b6a      	ldr	r3, [pc, #424]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a69      	ldr	r2, [pc, #420]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6213      	str	r3, [r2, #32]
 8001a5e:	4b67      	ldr	r3, [pc, #412]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a66      	ldr	r2, [pc, #408]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	e01c      	b.n	8001aa6 <HAL_RCC_OscConfig+0x36e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x356>
 8001a74:	4b61      	ldr	r3, [pc, #388]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4a60      	ldr	r2, [pc, #384]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6213      	str	r3, [r2, #32]
 8001a80:	4b5e      	ldr	r3, [pc, #376]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a5d      	ldr	r2, [pc, #372]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	e00b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x36e>
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a5a      	ldr	r2, [pc, #360]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	6213      	str	r3, [r2, #32]
 8001a9a:	4b58      	ldr	r3, [pc, #352]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a57      	ldr	r2, [pc, #348]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0304 	bic.w	r3, r3, #4
 8001aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d015      	beq.n	8001ada <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fadd 	bl	800106c <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fad9 	bl	800106c <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0b1      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	4b4b      	ldr	r3, [pc, #300]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0ee      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x37e>
 8001ad8:	e014      	b.n	8001b04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fac7 	bl	800106c <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fac3 	bl	800106c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e09b      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ee      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d105      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a3b      	ldr	r2, [pc, #236]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d061      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d146      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b34:	4b33      	ldr	r3, [pc, #204]	@ (8001c04 <HAL_RCC_OscConfig+0x4cc>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa97 	bl	800106c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fa93 	bl	800106c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e06d      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d108      	bne.n	8001b7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4921      	ldr	r1, [pc, #132]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a19      	ldr	r1, [r3, #32]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	491b      	ldr	r1, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_RCC_OscConfig+0x4cc>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fa67 	bl	800106c <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff fa63 	bl	800106c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e03d      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb4:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46a>
 8001bc0:	e035      	b.n	8001c2e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fa50 	bl	800106c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fa4c 	bl	800106c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e026      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x498>
 8001bee:	e01e      	b.n	8001c2e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d107      	bne.n	8001c08 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e019      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40007000 	.word	0x40007000
 8001c04:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c08:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_RCC_OscConfig+0x500>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000

08001c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0d0      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b6a      	ldr	r3, [pc, #424]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b67      	ldr	r3, [pc, #412]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4965      	ldr	r1, [pc, #404]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d040      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e073      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06b      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b39      	ldr	r3, [pc, #228]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4936      	ldr	r1, [pc, #216]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff f99e 	bl	800106c <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff f99a 	bl	800106c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e053      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d210      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4922      	ldr	r1, [pc, #136]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <HAL_RCC_ClockConfig+0x1cc>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1d0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f8fc 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080053a0 	.word	0x080053a0
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x30>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3e:	e027      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	613b      	str	r3, [r7, #16]
      break;
 8001e44:	e027      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0c5b      	lsrs	r3, r3, #17
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e72:	fb03 f202 	mul.w	r2, r3, r2
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e004      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e92:	613b      	str	r3, [r7, #16]
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	693b      	ldr	r3, [r7, #16]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	080053b8 	.word	0x080053b8
 8001eb0:	080053c8 	.word	0x080053c8
 8001eb4:	003d0900 	.word	0x003d0900

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	@ (8001ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff2 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080053b0 	.word	0x080053b0

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080053b0 	.word	0x080053b0

08001f1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <RCC_Delay+0x34>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <RCC_Delay+0x38>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0a5b      	lsrs	r3, r3, #9
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f38:	bf00      	nop
  }
  while (Delay --);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1e5a      	subs	r2, r3, #1
 8001f3e:	60fa      	str	r2, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f9      	bne.n	8001f38 <RCC_Delay+0x1c>
}
 8001f44:	bf00      	nop
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000000 	.word	0x20000000
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e042      	b.n	8001ff0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fea4 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	@ 0x24
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fcd5 	bl	800294c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b20      	cmp	r3, #32
 8002010:	d112      	bne.n	8002038 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_UART_Receive_IT+0x26>
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00b      	b.n	800203a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	461a      	mov	r2, r3
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fab7 	bl	80025a2 <UART_Start_Receive_IT>
 8002034:	4603      	mov	r3, r0
 8002036:	e000      	b.n	800203a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b0ba      	sub	sp, #232	@ 0xe8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10f      	bne.n	80020aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800208a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
 8002096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fb93 	bl	80027ce <UART_Receive_IT>
      return;
 80020a8:	e25b      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80de 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
 80020b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80d1 	beq.w	8002270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
 80020da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
 80020fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
 8002122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800213a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d011      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
 8002146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	f043 0208 	orr.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 81f2 	beq.w	8002558 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002178:	f003 0320 	and.w	r3, r3, #32
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
 8002180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fb1e 	bl	80027ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_UART_IRQHandler+0x17a>
 80021b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d04f      	beq.n	800225e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa28 	bl	8002614 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d041      	beq.n	8002256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3314      	adds	r3, #20
 80021d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021e0:	e853 3f00 	ldrex	r3, [r3]
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80021e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002202:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800220a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800220e:	e841 2300 	strex	r3, r2, [r1]
 8002212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1d9      	bne.n	80021d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d013      	beq.n	800224e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222a:	4a7e      	ldr	r2, [pc, #504]	@ (8002424 <HAL_UART_IRQHandler+0x3e0>)
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f86c 	bl	8001310 <HAL_DMA_Abort_IT>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002248:	4610      	mov	r0, r2
 800224a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800224c:	e00e      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f993 	bl	800257a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002254:	e00a      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f98f 	bl	800257a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	e006      	b.n	800226c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f98b 	bl	800257a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800226a:	e175      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	bf00      	nop
    return;
 800226e:	e173      	b.n	8002558 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 814f 	bne.w	8002518 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800227a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8148 	beq.w	8002518 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8141 	beq.w	8002518 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80b6 	beq.w	8002428 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8145 	beq.w	800255c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80022d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022da:	429a      	cmp	r2, r3
 80022dc:	f080 813e 	bcs.w	800255c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	f000 8088 	beq.w	8002404 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	330c      	adds	r3, #12
 80022fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002302:	e853 3f00 	ldrex	r3, [r3]
 8002306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800230a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800230e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002312:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002320:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002324:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002328:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800232c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002330:	e841 2300 	strex	r3, r2, [r1]
 8002334:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1d9      	bne.n	80022f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3314      	adds	r3, #20
 8002346:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002350:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002364:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002368:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800236c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002370:	e841 2300 	strex	r3, r2, [r1]
 8002374:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e1      	bne.n	8002340 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3314      	adds	r3, #20
 8002382:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002386:	e853 3f00 	ldrex	r3, [r3]
 800238a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800238c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3314      	adds	r3, #20
 800239c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023a8:	e841 2300 	strex	r3, r2, [r1]
 80023ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e3      	bne.n	800237c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80023d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023d4:	f023 0310 	bic.w	r3, r3, #16
 80023d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80023e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80023e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80023ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023ee:	e841 2300 	strex	r3, r2, [r1]
 80023f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1e3      	bne.n	80023c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ff4b 	bl	800129a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002412:	b29b      	uxth	r3, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	b29b      	uxth	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8b6 	bl	800258c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002420:	e09c      	b.n	800255c <HAL_UART_IRQHandler+0x518>
 8002422:	bf00      	nop
 8002424:	080026d9 	.word	0x080026d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002430:	b29b      	uxth	r3, r3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 808e 	beq.w	8002560 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8089 	beq.w	8002560 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800245e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002464:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002472:	647a      	str	r2, [r7, #68]	@ 0x44
 8002474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002476:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800247a:	e841 2300 	strex	r3, r2, [r1]
 800247e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1e3      	bne.n	800244e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	623b      	str	r3, [r7, #32]
   return(result);
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80024ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b2:	e841 2300 	strex	r3, r2, [r1]
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e3      	bne.n	8002486 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	330c      	adds	r3, #12
 80024d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	e853 3f00 	ldrex	r3, [r3]
 80024da:	60fb      	str	r3, [r7, #12]
   return(result);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0310 	bic.w	r3, r3, #16
 80024e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024f0:	61fa      	str	r2, [r7, #28]
 80024f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f4:	69b9      	ldr	r1, [r7, #24]
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	e841 2300 	strex	r3, r2, [r1]
 80024fc:	617b      	str	r3, [r7, #20]
   return(result);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e3      	bne.n	80024cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800250a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800250e:	4619      	mov	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f83b 	bl	800258c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002516:	e023      	b.n	8002560 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_UART_IRQHandler+0x4f4>
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f8e5 	bl	8002700 <UART_Transmit_IT>
    return;
 8002536:	e014      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <HAL_UART_IRQHandler+0x51e>
 8002544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f924 	bl	800279e <UART_EndTransmit_IT>
    return;
 8002556:	e004      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
    return;
 8002558:	bf00      	nop
 800255a:	e002      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
      return;
 800255c:	bf00      	nop
 800255e:	e000      	b.n	8002562 <HAL_UART_IRQHandler+0x51e>
      return;
 8002560:	bf00      	nop
  }
}
 8002562:	37e8      	adds	r7, #232	@ 0xe8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	4613      	mov	r3, r2
 80025ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2222      	movs	r2, #34	@ 0x22
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002614:	b480      	push	{r7}
 8002616:	b095      	sub	sp, #84	@ 0x54
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002626:	e853 3f00 	ldrex	r3, [r3]
 800262a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800263c:	643a      	str	r2, [r7, #64]	@ 0x40
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002644:	e841 2300 	strex	r3, r2, [r1]
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1e5      	bne.n	800261c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3314      	adds	r3, #20
 8002656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	e853 3f00 	ldrex	r3, [r3]
 800265e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3314      	adds	r3, #20
 800266e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002678:	e841 2300 	strex	r3, r2, [r1]
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e5      	bne.n	8002650 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	2b01      	cmp	r3, #1
 800268a:	d119      	bne.n	80026c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	e853 3f00 	ldrex	r3, [r3]
 800269a:	60bb      	str	r3, [r7, #8]
   return(result);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f023 0310 	bic.w	r3, r3, #16
 80026a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80026ac:	61ba      	str	r2, [r7, #24]
 80026ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	6979      	ldr	r1, [r7, #20]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	613b      	str	r3, [r7, #16]
   return(result);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e5      	bne.n	800268c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026ce:	bf00      	nop
 80026d0:	3754      	adds	r7, #84	@ 0x54
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff41 	bl	800257a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b21      	cmp	r3, #33	@ 0x21
 8002712:	d13e      	bne.n	8002792 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271c:	d114      	bne.n	8002748 <UART_Transmit_IT+0x48>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d110      	bne.n	8002748 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	1c9a      	adds	r2, r3, #2
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]
 8002746:	e008      	b.n	800275a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	1c59      	adds	r1, r3, #1
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6211      	str	r1, [r2, #32]
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29b      	uxth	r3, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4619      	mov	r1, r3
 8002768:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800277c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800278c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	e000      	b.n	8002794 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002792:	2302      	movs	r3, #2
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff fed2 	bl	8002568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08c      	sub	sp, #48	@ 0x30
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b22      	cmp	r3, #34	@ 0x22
 80027e0:	f040 80ae 	bne.w	8002940 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ec:	d117      	bne.n	800281e <UART_Receive_IT+0x50>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d113      	bne.n	800281e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280c:	b29a      	uxth	r2, r3
 800280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002810:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	1c9a      	adds	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
 800281c:	e026      	b.n	800286c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002830:	d007      	beq.n	8002842 <UART_Receive_IT+0x74>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <UART_Receive_IT+0x82>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e008      	b.n	8002862 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800285c:	b2da      	uxtb	r2, r3
 800285e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002860:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29b      	uxth	r3, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4619      	mov	r1, r3
 800287a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800287c:	2b00      	cmp	r3, #0
 800287e:	d15d      	bne.n	800293c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0220 	bic.w	r2, r2, #32
 800288e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800289e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d135      	bne.n	8002932 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	613b      	str	r3, [r7, #16]
   return(result);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 0310 	bic.w	r3, r3, #16
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	623a      	str	r2, [r7, #32]
 80028ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	69f9      	ldr	r1, [r7, #28]
 80028f2:	6a3a      	ldr	r2, [r7, #32]
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b10      	cmp	r3, #16
 800290c:	d10a      	bne.n	8002924 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002928:	4619      	mov	r1, r3
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff fe2e 	bl	800258c <HAL_UARTEx_RxEventCallback>
 8002930:	e002      	b.n	8002938 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe f8a8 	bl	8000a88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e002      	b.n	8002942 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3730      	adds	r7, #48	@ 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689a      	ldr	r2, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002986:	f023 030c 	bic.w	r3, r3, #12
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002a60 <UART_SetConfig+0x114>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029b4:	f7ff fa9e 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	e002      	b.n	80029c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029bc:	f7ff fa86 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a22      	ldr	r2, [pc, #136]	@ (8002a64 <UART_SetConfig+0x118>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	0119      	lsls	r1, r3, #4
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <UART_SetConfig+0x118>)
 80029fa:	fba3 0302 	umull	r0, r3, r3, r2
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2064      	movs	r0, #100	@ 0x64
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	3332      	adds	r3, #50	@ 0x32
 8002a0c:	4a15      	ldr	r2, [pc, #84]	@ (8002a64 <UART_SetConfig+0x118>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a18:	4419      	add	r1, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <UART_SetConfig+0x118>)
 8002a32:	fba3 0302 	umull	r0, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2064      	movs	r0, #100	@ 0x64
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	3332      	adds	r3, #50	@ 0x32
 8002a44:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	440a      	add	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013800 	.word	0x40013800
 8002a64:	51eb851f 	.word	0x51eb851f

08002a68 <__cvt>:
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6e:	461d      	mov	r5, r3
 8002a70:	bfbb      	ittet	lt
 8002a72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002a76:	461d      	movlt	r5, r3
 8002a78:	2300      	movge	r3, #0
 8002a7a:	232d      	movlt	r3, #45	@ 0x2d
 8002a7c:	b088      	sub	sp, #32
 8002a7e:	4614      	mov	r4, r2
 8002a80:	bfb8      	it	lt
 8002a82:	4614      	movlt	r4, r2
 8002a84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002a86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002a88:	7013      	strb	r3, [r2, #0]
 8002a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002a90:	f023 0820 	bic.w	r8, r3, #32
 8002a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a98:	d005      	beq.n	8002aa6 <__cvt+0x3e>
 8002a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a9e:	d100      	bne.n	8002aa2 <__cvt+0x3a>
 8002aa0:	3601      	adds	r6, #1
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e000      	b.n	8002aa8 <__cvt+0x40>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	aa07      	add	r2, sp, #28
 8002aaa:	9204      	str	r2, [sp, #16]
 8002aac:	aa06      	add	r2, sp, #24
 8002aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ab2:	e9cd 3600 	strd	r3, r6, [sp]
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	462b      	mov	r3, r5
 8002aba:	f000 fe4d 	bl	8003758 <_dtoa_r>
 8002abe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ac2:	4607      	mov	r7, r0
 8002ac4:	d119      	bne.n	8002afa <__cvt+0x92>
 8002ac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002ac8:	07db      	lsls	r3, r3, #31
 8002aca:	d50e      	bpl.n	8002aea <__cvt+0x82>
 8002acc:	eb00 0906 	add.w	r9, r0, r6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8002adc:	b108      	cbz	r0, 8002ae2 <__cvt+0x7a>
 8002ade:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ae2:	2230      	movs	r2, #48	@ 0x30
 8002ae4:	9b07      	ldr	r3, [sp, #28]
 8002ae6:	454b      	cmp	r3, r9
 8002ae8:	d31e      	bcc.n	8002b28 <__cvt+0xc0>
 8002aea:	4638      	mov	r0, r7
 8002aec:	9b07      	ldr	r3, [sp, #28]
 8002aee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002af0:	1bdb      	subs	r3, r3, r7
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	b008      	add	sp, #32
 8002af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002afe:	eb00 0906 	add.w	r9, r0, r6
 8002b02:	d1e5      	bne.n	8002ad0 <__cvt+0x68>
 8002b04:	7803      	ldrb	r3, [r0, #0]
 8002b06:	2b30      	cmp	r3, #48	@ 0x30
 8002b08:	d10a      	bne.n	8002b20 <__cvt+0xb8>
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4620      	mov	r0, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	f7fd ff49 	bl	80009a8 <__aeabi_dcmpeq>
 8002b16:	b918      	cbnz	r0, 8002b20 <__cvt+0xb8>
 8002b18:	f1c6 0601 	rsb	r6, r6, #1
 8002b1c:	f8ca 6000 	str.w	r6, [sl]
 8002b20:	f8da 3000 	ldr.w	r3, [sl]
 8002b24:	4499      	add	r9, r3
 8002b26:	e7d3      	b.n	8002ad0 <__cvt+0x68>
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	9107      	str	r1, [sp, #28]
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e7d9      	b.n	8002ae4 <__cvt+0x7c>

08002b30 <__exponent>:
 8002b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b32:	2900      	cmp	r1, #0
 8002b34:	bfb6      	itet	lt
 8002b36:	232d      	movlt	r3, #45	@ 0x2d
 8002b38:	232b      	movge	r3, #43	@ 0x2b
 8002b3a:	4249      	neglt	r1, r1
 8002b3c:	2909      	cmp	r1, #9
 8002b3e:	7002      	strb	r2, [r0, #0]
 8002b40:	7043      	strb	r3, [r0, #1]
 8002b42:	dd29      	ble.n	8002b98 <__exponent+0x68>
 8002b44:	f10d 0307 	add.w	r3, sp, #7
 8002b48:	461d      	mov	r5, r3
 8002b4a:	270a      	movs	r7, #10
 8002b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002b50:	461a      	mov	r2, r3
 8002b52:	fb07 1416 	mls	r4, r7, r6, r1
 8002b56:	3430      	adds	r4, #48	@ 0x30
 8002b58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	2c63      	cmp	r4, #99	@ 0x63
 8002b60:	4631      	mov	r1, r6
 8002b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b66:	dcf1      	bgt.n	8002b4c <__exponent+0x1c>
 8002b68:	3130      	adds	r1, #48	@ 0x30
 8002b6a:	1e94      	subs	r4, r2, #2
 8002b6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b70:	4623      	mov	r3, r4
 8002b72:	1c41      	adds	r1, r0, #1
 8002b74:	42ab      	cmp	r3, r5
 8002b76:	d30a      	bcc.n	8002b8e <__exponent+0x5e>
 8002b78:	f10d 0309 	add.w	r3, sp, #9
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	42ac      	cmp	r4, r5
 8002b80:	bf88      	it	hi
 8002b82:	2300      	movhi	r3, #0
 8002b84:	3302      	adds	r3, #2
 8002b86:	4403      	add	r3, r0
 8002b88:	1a18      	subs	r0, r3, r0
 8002b8a:	b003      	add	sp, #12
 8002b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002b92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002b96:	e7ed      	b.n	8002b74 <__exponent+0x44>
 8002b98:	2330      	movs	r3, #48	@ 0x30
 8002b9a:	3130      	adds	r1, #48	@ 0x30
 8002b9c:	7083      	strb	r3, [r0, #2]
 8002b9e:	70c1      	strb	r1, [r0, #3]
 8002ba0:	1d03      	adds	r3, r0, #4
 8002ba2:	e7f1      	b.n	8002b88 <__exponent+0x58>

08002ba4 <_printf_float>:
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	b091      	sub	sp, #68	@ 0x44
 8002baa:	460c      	mov	r4, r1
 8002bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002bb0:	4616      	mov	r6, r2
 8002bb2:	461f      	mov	r7, r3
 8002bb4:	4605      	mov	r5, r0
 8002bb6:	f000 fcbf 	bl	8003538 <_localeconv_r>
 8002bba:	6803      	ldr	r3, [r0, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	9308      	str	r3, [sp, #32]
 8002bc0:	f7fd fac6 	bl	8000150 <strlen>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8002bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8002bce:	3307      	adds	r3, #7
 8002bd0:	f023 0307 	bic.w	r3, r3, #7
 8002bd4:	f103 0208 	add.w	r2, r3, #8
 8002bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8002be0:	f8c8 2000 	str.w	r2, [r8]
 8002be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002bec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002bee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002bfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8002e70 <_printf_float+0x2cc>)
 8002c00:	f7fd ff04 	bl	8000a0c <__aeabi_dcmpun>
 8002c04:	bb70      	cbnz	r0, 8002c64 <_printf_float+0xc0>
 8002c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0e:	4b98      	ldr	r3, [pc, #608]	@ (8002e70 <_printf_float+0x2cc>)
 8002c10:	f7fd fede 	bl	80009d0 <__aeabi_dcmple>
 8002c14:	bb30      	cbnz	r0, 8002c64 <_printf_float+0xc0>
 8002c16:	2200      	movs	r2, #0
 8002c18:	2300      	movs	r3, #0
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	f7fd fecd 	bl	80009bc <__aeabi_dcmplt>
 8002c22:	b110      	cbz	r0, 8002c2a <_printf_float+0x86>
 8002c24:	232d      	movs	r3, #45	@ 0x2d
 8002c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c2a:	4a92      	ldr	r2, [pc, #584]	@ (8002e74 <_printf_float+0x2d0>)
 8002c2c:	4b92      	ldr	r3, [pc, #584]	@ (8002e78 <_printf_float+0x2d4>)
 8002c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002c32:	bf8c      	ite	hi
 8002c34:	4690      	movhi	r8, r2
 8002c36:	4698      	movls	r8, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	f04f 0900 	mov.w	r9, #0
 8002c3e:	6123      	str	r3, [r4, #16]
 8002c40:	f02b 0304 	bic.w	r3, fp, #4
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	4633      	mov	r3, r6
 8002c48:	4621      	mov	r1, r4
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	9700      	str	r7, [sp, #0]
 8002c4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002c50:	f000 f9d4 	bl	8002ffc <_printf_common>
 8002c54:	3001      	adds	r0, #1
 8002c56:	f040 8090 	bne.w	8002d7a <_printf_float+0x1d6>
 8002c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5e:	b011      	add	sp, #68	@ 0x44
 8002c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c64:	4642      	mov	r2, r8
 8002c66:	464b      	mov	r3, r9
 8002c68:	4640      	mov	r0, r8
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	f7fd fece 	bl	8000a0c <__aeabi_dcmpun>
 8002c70:	b148      	cbz	r0, 8002c86 <_printf_float+0xe2>
 8002c72:	464b      	mov	r3, r9
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bfb8      	it	lt
 8002c78:	232d      	movlt	r3, #45	@ 0x2d
 8002c7a:	4a80      	ldr	r2, [pc, #512]	@ (8002e7c <_printf_float+0x2d8>)
 8002c7c:	bfb8      	it	lt
 8002c7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002c82:	4b7f      	ldr	r3, [pc, #508]	@ (8002e80 <_printf_float+0x2dc>)
 8002c84:	e7d3      	b.n	8002c2e <_printf_float+0x8a>
 8002c86:	6863      	ldr	r3, [r4, #4]
 8002c88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	d13f      	bne.n	8002d10 <_printf_float+0x16c>
 8002c90:	2306      	movs	r3, #6
 8002c92:	6063      	str	r3, [r4, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	9206      	str	r2, [sp, #24]
 8002c9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8002ca0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002ca4:	aa0d      	add	r2, sp, #52	@ 0x34
 8002ca6:	9203      	str	r2, [sp, #12]
 8002ca8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002cac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	4642      	mov	r2, r8
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	464b      	mov	r3, r9
 8002cba:	910a      	str	r1, [sp, #40]	@ 0x28
 8002cbc:	f7ff fed4 	bl	8002a68 <__cvt>
 8002cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002cc2:	4680      	mov	r8, r0
 8002cc4:	2947      	cmp	r1, #71	@ 0x47
 8002cc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002cc8:	d128      	bne.n	8002d1c <_printf_float+0x178>
 8002cca:	1cc8      	adds	r0, r1, #3
 8002ccc:	db02      	blt.n	8002cd4 <_printf_float+0x130>
 8002cce:	6863      	ldr	r3, [r4, #4]
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	dd40      	ble.n	8002d56 <_printf_float+0x1b2>
 8002cd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8002cd8:	fa5f fa8a 	uxtb.w	sl, sl
 8002cdc:	4652      	mov	r2, sl
 8002cde:	3901      	subs	r1, #1
 8002ce0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ce4:	910d      	str	r1, [sp, #52]	@ 0x34
 8002ce6:	f7ff ff23 	bl	8002b30 <__exponent>
 8002cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002cec:	4681      	mov	r9, r0
 8002cee:	1813      	adds	r3, r2, r0
 8002cf0:	2a01      	cmp	r2, #1
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	dc02      	bgt.n	8002cfc <_printf_float+0x158>
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	07d2      	lsls	r2, r2, #31
 8002cfa:	d501      	bpl.n	8002d00 <_printf_float+0x15c>
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	6123      	str	r3, [r4, #16]
 8002d00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d09e      	beq.n	8002c46 <_printf_float+0xa2>
 8002d08:	232d      	movs	r3, #45	@ 0x2d
 8002d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d0e:	e79a      	b.n	8002c46 <_printf_float+0xa2>
 8002d10:	2947      	cmp	r1, #71	@ 0x47
 8002d12:	d1bf      	bne.n	8002c94 <_printf_float+0xf0>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1bd      	bne.n	8002c94 <_printf_float+0xf0>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e7ba      	b.n	8002c92 <_printf_float+0xee>
 8002d1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d20:	d9dc      	bls.n	8002cdc <_printf_float+0x138>
 8002d22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002d26:	d118      	bne.n	8002d5a <_printf_float+0x1b6>
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	dd0b      	ble.n	8002d46 <_printf_float+0x1a2>
 8002d2e:	6121      	str	r1, [r4, #16]
 8002d30:	b913      	cbnz	r3, 8002d38 <_printf_float+0x194>
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	07d0      	lsls	r0, r2, #31
 8002d36:	d502      	bpl.n	8002d3e <_printf_float+0x19a>
 8002d38:	3301      	adds	r3, #1
 8002d3a:	440b      	add	r3, r1
 8002d3c:	6123      	str	r3, [r4, #16]
 8002d3e:	f04f 0900 	mov.w	r9, #0
 8002d42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002d44:	e7dc      	b.n	8002d00 <_printf_float+0x15c>
 8002d46:	b913      	cbnz	r3, 8002d4e <_printf_float+0x1aa>
 8002d48:	6822      	ldr	r2, [r4, #0]
 8002d4a:	07d2      	lsls	r2, r2, #31
 8002d4c:	d501      	bpl.n	8002d52 <_printf_float+0x1ae>
 8002d4e:	3302      	adds	r3, #2
 8002d50:	e7f4      	b.n	8002d3c <_printf_float+0x198>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e7f2      	b.n	8002d3c <_printf_float+0x198>
 8002d56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d5c:	4299      	cmp	r1, r3
 8002d5e:	db05      	blt.n	8002d6c <_printf_float+0x1c8>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	6121      	str	r1, [r4, #16]
 8002d64:	07d8      	lsls	r0, r3, #31
 8002d66:	d5ea      	bpl.n	8002d3e <_printf_float+0x19a>
 8002d68:	1c4b      	adds	r3, r1, #1
 8002d6a:	e7e7      	b.n	8002d3c <_printf_float+0x198>
 8002d6c:	2900      	cmp	r1, #0
 8002d6e:	bfcc      	ite	gt
 8002d70:	2201      	movgt	r2, #1
 8002d72:	f1c1 0202 	rsble	r2, r1, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	e7e0      	b.n	8002d3c <_printf_float+0x198>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	055a      	lsls	r2, r3, #21
 8002d7e:	d407      	bmi.n	8002d90 <_printf_float+0x1ec>
 8002d80:	6923      	ldr	r3, [r4, #16]
 8002d82:	4642      	mov	r2, r8
 8002d84:	4631      	mov	r1, r6
 8002d86:	4628      	mov	r0, r5
 8002d88:	47b8      	blx	r7
 8002d8a:	3001      	adds	r0, #1
 8002d8c:	d12b      	bne.n	8002de6 <_printf_float+0x242>
 8002d8e:	e764      	b.n	8002c5a <_printf_float+0xb6>
 8002d90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d94:	f240 80dc 	bls.w	8002f50 <_printf_float+0x3ac>
 8002d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f7fd fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d033      	beq.n	8002e10 <_printf_float+0x26c>
 8002da8:	2301      	movs	r3, #1
 8002daa:	4631      	mov	r1, r6
 8002dac:	4628      	mov	r0, r5
 8002dae:	4a35      	ldr	r2, [pc, #212]	@ (8002e84 <_printf_float+0x2e0>)
 8002db0:	47b8      	blx	r7
 8002db2:	3001      	adds	r0, #1
 8002db4:	f43f af51 	beq.w	8002c5a <_printf_float+0xb6>
 8002db8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002dbc:	4543      	cmp	r3, r8
 8002dbe:	db02      	blt.n	8002dc6 <_printf_float+0x222>
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	07d8      	lsls	r0, r3, #31
 8002dc4:	d50f      	bpl.n	8002de6 <_printf_float+0x242>
 8002dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002dca:	4631      	mov	r1, r6
 8002dcc:	4628      	mov	r0, r5
 8002dce:	47b8      	blx	r7
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	f43f af42 	beq.w	8002c5a <_printf_float+0xb6>
 8002dd6:	f04f 0900 	mov.w	r9, #0
 8002dda:	f108 38ff 	add.w	r8, r8, #4294967295
 8002dde:	f104 0a1a 	add.w	sl, r4, #26
 8002de2:	45c8      	cmp	r8, r9
 8002de4:	dc09      	bgt.n	8002dfa <_printf_float+0x256>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	079b      	lsls	r3, r3, #30
 8002dea:	f100 8102 	bmi.w	8002ff2 <_printf_float+0x44e>
 8002dee:	68e0      	ldr	r0, [r4, #12]
 8002df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002df2:	4298      	cmp	r0, r3
 8002df4:	bfb8      	it	lt
 8002df6:	4618      	movlt	r0, r3
 8002df8:	e731      	b.n	8002c5e <_printf_float+0xba>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4652      	mov	r2, sl
 8002dfe:	4631      	mov	r1, r6
 8002e00:	4628      	mov	r0, r5
 8002e02:	47b8      	blx	r7
 8002e04:	3001      	adds	r0, #1
 8002e06:	f43f af28 	beq.w	8002c5a <_printf_float+0xb6>
 8002e0a:	f109 0901 	add.w	r9, r9, #1
 8002e0e:	e7e8      	b.n	8002de2 <_printf_float+0x23e>
 8002e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dc38      	bgt.n	8002e88 <_printf_float+0x2e4>
 8002e16:	2301      	movs	r3, #1
 8002e18:	4631      	mov	r1, r6
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <_printf_float+0x2e0>)
 8002e1e:	47b8      	blx	r7
 8002e20:	3001      	adds	r0, #1
 8002e22:	f43f af1a 	beq.w	8002c5a <_printf_float+0xb6>
 8002e26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002e2a:	ea59 0303 	orrs.w	r3, r9, r3
 8002e2e:	d102      	bne.n	8002e36 <_printf_float+0x292>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	07d9      	lsls	r1, r3, #31
 8002e34:	d5d7      	bpl.n	8002de6 <_printf_float+0x242>
 8002e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	47b8      	blx	r7
 8002e40:	3001      	adds	r0, #1
 8002e42:	f43f af0a 	beq.w	8002c5a <_printf_float+0xb6>
 8002e46:	f04f 0a00 	mov.w	sl, #0
 8002e4a:	f104 0b1a 	add.w	fp, r4, #26
 8002e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e50:	425b      	negs	r3, r3
 8002e52:	4553      	cmp	r3, sl
 8002e54:	dc01      	bgt.n	8002e5a <_printf_float+0x2b6>
 8002e56:	464b      	mov	r3, r9
 8002e58:	e793      	b.n	8002d82 <_printf_float+0x1de>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	465a      	mov	r2, fp
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4628      	mov	r0, r5
 8002e62:	47b8      	blx	r7
 8002e64:	3001      	adds	r0, #1
 8002e66:	f43f aef8 	beq.w	8002c5a <_printf_float+0xb6>
 8002e6a:	f10a 0a01 	add.w	sl, sl, #1
 8002e6e:	e7ee      	b.n	8002e4e <_printf_float+0x2aa>
 8002e70:	7fefffff 	.word	0x7fefffff
 8002e74:	080053ce 	.word	0x080053ce
 8002e78:	080053ca 	.word	0x080053ca
 8002e7c:	080053d6 	.word	0x080053d6
 8002e80:	080053d2 	.word	0x080053d2
 8002e84:	080053da 	.word	0x080053da
 8002e88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002e8e:	4553      	cmp	r3, sl
 8002e90:	bfa8      	it	ge
 8002e92:	4653      	movge	r3, sl
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	4699      	mov	r9, r3
 8002e98:	dc36      	bgt.n	8002f08 <_printf_float+0x364>
 8002e9a:	f04f 0b00 	mov.w	fp, #0
 8002e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ea2:	f104 021a 	add.w	r2, r4, #26
 8002ea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8002eaa:	eba3 0309 	sub.w	r3, r3, r9
 8002eae:	455b      	cmp	r3, fp
 8002eb0:	dc31      	bgt.n	8002f16 <_printf_float+0x372>
 8002eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002eb4:	459a      	cmp	sl, r3
 8002eb6:	dc3a      	bgt.n	8002f2e <_printf_float+0x38a>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	07da      	lsls	r2, r3, #31
 8002ebc:	d437      	bmi.n	8002f2e <_printf_float+0x38a>
 8002ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ec0:	ebaa 0903 	sub.w	r9, sl, r3
 8002ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002ec6:	ebaa 0303 	sub.w	r3, sl, r3
 8002eca:	4599      	cmp	r9, r3
 8002ecc:	bfa8      	it	ge
 8002ece:	4699      	movge	r9, r3
 8002ed0:	f1b9 0f00 	cmp.w	r9, #0
 8002ed4:	dc33      	bgt.n	8002f3e <_printf_float+0x39a>
 8002ed6:	f04f 0800 	mov.w	r8, #0
 8002eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ede:	f104 0b1a 	add.w	fp, r4, #26
 8002ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8002ee8:	eba3 0309 	sub.w	r3, r3, r9
 8002eec:	4543      	cmp	r3, r8
 8002eee:	f77f af7a 	ble.w	8002de6 <_printf_float+0x242>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	465a      	mov	r2, fp
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4628      	mov	r0, r5
 8002efa:	47b8      	blx	r7
 8002efc:	3001      	adds	r0, #1
 8002efe:	f43f aeac 	beq.w	8002c5a <_printf_float+0xb6>
 8002f02:	f108 0801 	add.w	r8, r8, #1
 8002f06:	e7ec      	b.n	8002ee2 <_printf_float+0x33e>
 8002f08:	4642      	mov	r2, r8
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	47b8      	blx	r7
 8002f10:	3001      	adds	r0, #1
 8002f12:	d1c2      	bne.n	8002e9a <_printf_float+0x2f6>
 8002f14:	e6a1      	b.n	8002c5a <_printf_float+0xb6>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4631      	mov	r1, r6
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f ae9a 	beq.w	8002c5a <_printf_float+0xb6>
 8002f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f28:	f10b 0b01 	add.w	fp, fp, #1
 8002f2c:	e7bb      	b.n	8002ea6 <_printf_float+0x302>
 8002f2e:	4631      	mov	r1, r6
 8002f30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f34:	4628      	mov	r0, r5
 8002f36:	47b8      	blx	r7
 8002f38:	3001      	adds	r0, #1
 8002f3a:	d1c0      	bne.n	8002ebe <_printf_float+0x31a>
 8002f3c:	e68d      	b.n	8002c5a <_printf_float+0xb6>
 8002f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f40:	464b      	mov	r3, r9
 8002f42:	4631      	mov	r1, r6
 8002f44:	4628      	mov	r0, r5
 8002f46:	4442      	add	r2, r8
 8002f48:	47b8      	blx	r7
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d1c3      	bne.n	8002ed6 <_printf_float+0x332>
 8002f4e:	e684      	b.n	8002c5a <_printf_float+0xb6>
 8002f50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002f54:	f1ba 0f01 	cmp.w	sl, #1
 8002f58:	dc01      	bgt.n	8002f5e <_printf_float+0x3ba>
 8002f5a:	07db      	lsls	r3, r3, #31
 8002f5c:	d536      	bpl.n	8002fcc <_printf_float+0x428>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	4642      	mov	r2, r8
 8002f62:	4631      	mov	r1, r6
 8002f64:	4628      	mov	r0, r5
 8002f66:	47b8      	blx	r7
 8002f68:	3001      	adds	r0, #1
 8002f6a:	f43f ae76 	beq.w	8002c5a <_printf_float+0xb6>
 8002f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f72:	4631      	mov	r1, r6
 8002f74:	4628      	mov	r0, r5
 8002f76:	47b8      	blx	r7
 8002f78:	3001      	adds	r0, #1
 8002f7a:	f43f ae6e 	beq.w	8002c5a <_printf_float+0xb6>
 8002f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f82:	2200      	movs	r2, #0
 8002f84:	2300      	movs	r3, #0
 8002f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f8a:	f7fd fd0d 	bl	80009a8 <__aeabi_dcmpeq>
 8002f8e:	b9c0      	cbnz	r0, 8002fc2 <_printf_float+0x41e>
 8002f90:	4653      	mov	r3, sl
 8002f92:	f108 0201 	add.w	r2, r8, #1
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d10c      	bne.n	8002fba <_printf_float+0x416>
 8002fa0:	e65b      	b.n	8002c5a <_printf_float+0xb6>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	465a      	mov	r2, fp
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b8      	blx	r7
 8002fac:	3001      	adds	r0, #1
 8002fae:	f43f ae54 	beq.w	8002c5a <_printf_float+0xb6>
 8002fb2:	f108 0801 	add.w	r8, r8, #1
 8002fb6:	45d0      	cmp	r8, sl
 8002fb8:	dbf3      	blt.n	8002fa2 <_printf_float+0x3fe>
 8002fba:	464b      	mov	r3, r9
 8002fbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002fc0:	e6e0      	b.n	8002d84 <_printf_float+0x1e0>
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	f104 0b1a 	add.w	fp, r4, #26
 8002fca:	e7f4      	b.n	8002fb6 <_printf_float+0x412>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4642      	mov	r2, r8
 8002fd0:	e7e1      	b.n	8002f96 <_printf_float+0x3f2>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	464a      	mov	r2, r9
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	4628      	mov	r0, r5
 8002fda:	47b8      	blx	r7
 8002fdc:	3001      	adds	r0, #1
 8002fde:	f43f ae3c 	beq.w	8002c5a <_printf_float+0xb6>
 8002fe2:	f108 0801 	add.w	r8, r8, #1
 8002fe6:	68e3      	ldr	r3, [r4, #12]
 8002fe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8002fea:	1a5b      	subs	r3, r3, r1
 8002fec:	4543      	cmp	r3, r8
 8002fee:	dcf0      	bgt.n	8002fd2 <_printf_float+0x42e>
 8002ff0:	e6fd      	b.n	8002dee <_printf_float+0x24a>
 8002ff2:	f04f 0800 	mov.w	r8, #0
 8002ff6:	f104 0919 	add.w	r9, r4, #25
 8002ffa:	e7f4      	b.n	8002fe6 <_printf_float+0x442>

08002ffc <_printf_common>:
 8002ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003000:	4616      	mov	r6, r2
 8003002:	4698      	mov	r8, r3
 8003004:	688a      	ldr	r2, [r1, #8]
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	4607      	mov	r7, r0
 800300a:	4293      	cmp	r3, r2
 800300c:	bfb8      	it	lt
 800300e:	4613      	movlt	r3, r2
 8003010:	6033      	str	r3, [r6, #0]
 8003012:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003016:	460c      	mov	r4, r1
 8003018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800301c:	b10a      	cbz	r2, 8003022 <_printf_common+0x26>
 800301e:	3301      	adds	r3, #1
 8003020:	6033      	str	r3, [r6, #0]
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0699      	lsls	r1, r3, #26
 8003026:	bf42      	ittt	mi
 8003028:	6833      	ldrmi	r3, [r6, #0]
 800302a:	3302      	addmi	r3, #2
 800302c:	6033      	strmi	r3, [r6, #0]
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	f015 0506 	ands.w	r5, r5, #6
 8003034:	d106      	bne.n	8003044 <_printf_common+0x48>
 8003036:	f104 0a19 	add.w	sl, r4, #25
 800303a:	68e3      	ldr	r3, [r4, #12]
 800303c:	6832      	ldr	r2, [r6, #0]
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	42ab      	cmp	r3, r5
 8003042:	dc2b      	bgt.n	800309c <_printf_common+0xa0>
 8003044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003048:	6822      	ldr	r2, [r4, #0]
 800304a:	3b00      	subs	r3, #0
 800304c:	bf18      	it	ne
 800304e:	2301      	movne	r3, #1
 8003050:	0692      	lsls	r2, r2, #26
 8003052:	d430      	bmi.n	80030b6 <_printf_common+0xba>
 8003054:	4641      	mov	r1, r8
 8003056:	4638      	mov	r0, r7
 8003058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800305c:	47c8      	blx	r9
 800305e:	3001      	adds	r0, #1
 8003060:	d023      	beq.n	80030aa <_printf_common+0xae>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	6922      	ldr	r2, [r4, #16]
 8003066:	f003 0306 	and.w	r3, r3, #6
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf14      	ite	ne
 800306e:	2500      	movne	r5, #0
 8003070:	6833      	ldreq	r3, [r6, #0]
 8003072:	f04f 0600 	mov.w	r6, #0
 8003076:	bf08      	it	eq
 8003078:	68e5      	ldreq	r5, [r4, #12]
 800307a:	f104 041a 	add.w	r4, r4, #26
 800307e:	bf08      	it	eq
 8003080:	1aed      	subeq	r5, r5, r3
 8003082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003086:	bf08      	it	eq
 8003088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800308c:	4293      	cmp	r3, r2
 800308e:	bfc4      	itt	gt
 8003090:	1a9b      	subgt	r3, r3, r2
 8003092:	18ed      	addgt	r5, r5, r3
 8003094:	42b5      	cmp	r5, r6
 8003096:	d11a      	bne.n	80030ce <_printf_common+0xd2>
 8003098:	2000      	movs	r0, #0
 800309a:	e008      	b.n	80030ae <_printf_common+0xb2>
 800309c:	2301      	movs	r3, #1
 800309e:	4652      	mov	r2, sl
 80030a0:	4641      	mov	r1, r8
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c8      	blx	r9
 80030a6:	3001      	adds	r0, #1
 80030a8:	d103      	bne.n	80030b2 <_printf_common+0xb6>
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295
 80030ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b2:	3501      	adds	r5, #1
 80030b4:	e7c1      	b.n	800303a <_printf_common+0x3e>
 80030b6:	2030      	movs	r0, #48	@ 0x30
 80030b8:	18e1      	adds	r1, r4, r3
 80030ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80030c4:	4422      	add	r2, r4
 80030c6:	3302      	adds	r3, #2
 80030c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80030cc:	e7c2      	b.n	8003054 <_printf_common+0x58>
 80030ce:	2301      	movs	r3, #1
 80030d0:	4622      	mov	r2, r4
 80030d2:	4641      	mov	r1, r8
 80030d4:	4638      	mov	r0, r7
 80030d6:	47c8      	blx	r9
 80030d8:	3001      	adds	r0, #1
 80030da:	d0e6      	beq.n	80030aa <_printf_common+0xae>
 80030dc:	3601      	adds	r6, #1
 80030de:	e7d9      	b.n	8003094 <_printf_common+0x98>

080030e0 <_printf_i>:
 80030e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030e4:	7e0f      	ldrb	r7, [r1, #24]
 80030e6:	4691      	mov	r9, r2
 80030e8:	2f78      	cmp	r7, #120	@ 0x78
 80030ea:	4680      	mov	r8, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	469a      	mov	sl, r3
 80030f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030f6:	d807      	bhi.n	8003108 <_printf_i+0x28>
 80030f8:	2f62      	cmp	r7, #98	@ 0x62
 80030fa:	d80a      	bhi.n	8003112 <_printf_i+0x32>
 80030fc:	2f00      	cmp	r7, #0
 80030fe:	f000 80d1 	beq.w	80032a4 <_printf_i+0x1c4>
 8003102:	2f58      	cmp	r7, #88	@ 0x58
 8003104:	f000 80b8 	beq.w	8003278 <_printf_i+0x198>
 8003108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800310c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003110:	e03a      	b.n	8003188 <_printf_i+0xa8>
 8003112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003116:	2b15      	cmp	r3, #21
 8003118:	d8f6      	bhi.n	8003108 <_printf_i+0x28>
 800311a:	a101      	add	r1, pc, #4	@ (adr r1, 8003120 <_printf_i+0x40>)
 800311c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003120:	08003179 	.word	0x08003179
 8003124:	0800318d 	.word	0x0800318d
 8003128:	08003109 	.word	0x08003109
 800312c:	08003109 	.word	0x08003109
 8003130:	08003109 	.word	0x08003109
 8003134:	08003109 	.word	0x08003109
 8003138:	0800318d 	.word	0x0800318d
 800313c:	08003109 	.word	0x08003109
 8003140:	08003109 	.word	0x08003109
 8003144:	08003109 	.word	0x08003109
 8003148:	08003109 	.word	0x08003109
 800314c:	0800328b 	.word	0x0800328b
 8003150:	080031b7 	.word	0x080031b7
 8003154:	08003245 	.word	0x08003245
 8003158:	08003109 	.word	0x08003109
 800315c:	08003109 	.word	0x08003109
 8003160:	080032ad 	.word	0x080032ad
 8003164:	08003109 	.word	0x08003109
 8003168:	080031b7 	.word	0x080031b7
 800316c:	08003109 	.word	0x08003109
 8003170:	08003109 	.word	0x08003109
 8003174:	0800324d 	.word	0x0800324d
 8003178:	6833      	ldr	r3, [r6, #0]
 800317a:	1d1a      	adds	r2, r3, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6032      	str	r2, [r6, #0]
 8003180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003188:	2301      	movs	r3, #1
 800318a:	e09c      	b.n	80032c6 <_printf_i+0x1e6>
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	6820      	ldr	r0, [r4, #0]
 8003190:	1d19      	adds	r1, r3, #4
 8003192:	6031      	str	r1, [r6, #0]
 8003194:	0606      	lsls	r6, r0, #24
 8003196:	d501      	bpl.n	800319c <_printf_i+0xbc>
 8003198:	681d      	ldr	r5, [r3, #0]
 800319a:	e003      	b.n	80031a4 <_printf_i+0xc4>
 800319c:	0645      	lsls	r5, r0, #25
 800319e:	d5fb      	bpl.n	8003198 <_printf_i+0xb8>
 80031a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	da03      	bge.n	80031b0 <_printf_i+0xd0>
 80031a8:	232d      	movs	r3, #45	@ 0x2d
 80031aa:	426d      	negs	r5, r5
 80031ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031b0:	230a      	movs	r3, #10
 80031b2:	4858      	ldr	r0, [pc, #352]	@ (8003314 <_printf_i+0x234>)
 80031b4:	e011      	b.n	80031da <_printf_i+0xfa>
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	0608      	lsls	r0, r1, #24
 80031bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80031c0:	d402      	bmi.n	80031c8 <_printf_i+0xe8>
 80031c2:	0649      	lsls	r1, r1, #25
 80031c4:	bf48      	it	mi
 80031c6:	b2ad      	uxthmi	r5, r5
 80031c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	bf14      	ite	ne
 80031ce:	230a      	movne	r3, #10
 80031d0:	2308      	moveq	r3, #8
 80031d2:	4850      	ldr	r0, [pc, #320]	@ (8003314 <_printf_i+0x234>)
 80031d4:	2100      	movs	r1, #0
 80031d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80031da:	6866      	ldr	r6, [r4, #4]
 80031dc:	2e00      	cmp	r6, #0
 80031de:	60a6      	str	r6, [r4, #8]
 80031e0:	db05      	blt.n	80031ee <_printf_i+0x10e>
 80031e2:	6821      	ldr	r1, [r4, #0]
 80031e4:	432e      	orrs	r6, r5
 80031e6:	f021 0104 	bic.w	r1, r1, #4
 80031ea:	6021      	str	r1, [r4, #0]
 80031ec:	d04b      	beq.n	8003286 <_printf_i+0x1a6>
 80031ee:	4616      	mov	r6, r2
 80031f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80031f4:	fb03 5711 	mls	r7, r3, r1, r5
 80031f8:	5dc7      	ldrb	r7, [r0, r7]
 80031fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031fe:	462f      	mov	r7, r5
 8003200:	42bb      	cmp	r3, r7
 8003202:	460d      	mov	r5, r1
 8003204:	d9f4      	bls.n	80031f0 <_printf_i+0x110>
 8003206:	2b08      	cmp	r3, #8
 8003208:	d10b      	bne.n	8003222 <_printf_i+0x142>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	07df      	lsls	r7, r3, #31
 800320e:	d508      	bpl.n	8003222 <_printf_i+0x142>
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	6861      	ldr	r1, [r4, #4]
 8003214:	4299      	cmp	r1, r3
 8003216:	bfde      	ittt	le
 8003218:	2330      	movle	r3, #48	@ 0x30
 800321a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800321e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003222:	1b92      	subs	r2, r2, r6
 8003224:	6122      	str	r2, [r4, #16]
 8003226:	464b      	mov	r3, r9
 8003228:	4621      	mov	r1, r4
 800322a:	4640      	mov	r0, r8
 800322c:	f8cd a000 	str.w	sl, [sp]
 8003230:	aa03      	add	r2, sp, #12
 8003232:	f7ff fee3 	bl	8002ffc <_printf_common>
 8003236:	3001      	adds	r0, #1
 8003238:	d14a      	bne.n	80032d0 <_printf_i+0x1f0>
 800323a:	f04f 30ff 	mov.w	r0, #4294967295
 800323e:	b004      	add	sp, #16
 8003240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	6023      	str	r3, [r4, #0]
 800324c:	2778      	movs	r7, #120	@ 0x78
 800324e:	4832      	ldr	r0, [pc, #200]	@ (8003318 <_printf_i+0x238>)
 8003250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	6831      	ldr	r1, [r6, #0]
 8003258:	061f      	lsls	r7, r3, #24
 800325a:	f851 5b04 	ldr.w	r5, [r1], #4
 800325e:	d402      	bmi.n	8003266 <_printf_i+0x186>
 8003260:	065f      	lsls	r7, r3, #25
 8003262:	bf48      	it	mi
 8003264:	b2ad      	uxthmi	r5, r5
 8003266:	6031      	str	r1, [r6, #0]
 8003268:	07d9      	lsls	r1, r3, #31
 800326a:	bf44      	itt	mi
 800326c:	f043 0320 	orrmi.w	r3, r3, #32
 8003270:	6023      	strmi	r3, [r4, #0]
 8003272:	b11d      	cbz	r5, 800327c <_printf_i+0x19c>
 8003274:	2310      	movs	r3, #16
 8003276:	e7ad      	b.n	80031d4 <_printf_i+0xf4>
 8003278:	4826      	ldr	r0, [pc, #152]	@ (8003314 <_printf_i+0x234>)
 800327a:	e7e9      	b.n	8003250 <_printf_i+0x170>
 800327c:	6823      	ldr	r3, [r4, #0]
 800327e:	f023 0320 	bic.w	r3, r3, #32
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	e7f6      	b.n	8003274 <_printf_i+0x194>
 8003286:	4616      	mov	r6, r2
 8003288:	e7bd      	b.n	8003206 <_printf_i+0x126>
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	6825      	ldr	r5, [r4, #0]
 800328e:	1d18      	adds	r0, r3, #4
 8003290:	6961      	ldr	r1, [r4, #20]
 8003292:	6030      	str	r0, [r6, #0]
 8003294:	062e      	lsls	r6, r5, #24
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	d501      	bpl.n	800329e <_printf_i+0x1be>
 800329a:	6019      	str	r1, [r3, #0]
 800329c:	e002      	b.n	80032a4 <_printf_i+0x1c4>
 800329e:	0668      	lsls	r0, r5, #25
 80032a0:	d5fb      	bpl.n	800329a <_printf_i+0x1ba>
 80032a2:	8019      	strh	r1, [r3, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	4616      	mov	r6, r2
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	e7bc      	b.n	8003226 <_printf_i+0x146>
 80032ac:	6833      	ldr	r3, [r6, #0]
 80032ae:	2100      	movs	r1, #0
 80032b0:	1d1a      	adds	r2, r3, #4
 80032b2:	6032      	str	r2, [r6, #0]
 80032b4:	681e      	ldr	r6, [r3, #0]
 80032b6:	6862      	ldr	r2, [r4, #4]
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f9b4 	bl	8003626 <memchr>
 80032be:	b108      	cbz	r0, 80032c4 <_printf_i+0x1e4>
 80032c0:	1b80      	subs	r0, r0, r6
 80032c2:	6060      	str	r0, [r4, #4]
 80032c4:	6863      	ldr	r3, [r4, #4]
 80032c6:	6123      	str	r3, [r4, #16]
 80032c8:	2300      	movs	r3, #0
 80032ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80032ce:	e7aa      	b.n	8003226 <_printf_i+0x146>
 80032d0:	4632      	mov	r2, r6
 80032d2:	4649      	mov	r1, r9
 80032d4:	4640      	mov	r0, r8
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	47d0      	blx	sl
 80032da:	3001      	adds	r0, #1
 80032dc:	d0ad      	beq.n	800323a <_printf_i+0x15a>
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	079b      	lsls	r3, r3, #30
 80032e2:	d413      	bmi.n	800330c <_printf_i+0x22c>
 80032e4:	68e0      	ldr	r0, [r4, #12]
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	4298      	cmp	r0, r3
 80032ea:	bfb8      	it	lt
 80032ec:	4618      	movlt	r0, r3
 80032ee:	e7a6      	b.n	800323e <_printf_i+0x15e>
 80032f0:	2301      	movs	r3, #1
 80032f2:	4632      	mov	r2, r6
 80032f4:	4649      	mov	r1, r9
 80032f6:	4640      	mov	r0, r8
 80032f8:	47d0      	blx	sl
 80032fa:	3001      	adds	r0, #1
 80032fc:	d09d      	beq.n	800323a <_printf_i+0x15a>
 80032fe:	3501      	adds	r5, #1
 8003300:	68e3      	ldr	r3, [r4, #12]
 8003302:	9903      	ldr	r1, [sp, #12]
 8003304:	1a5b      	subs	r3, r3, r1
 8003306:	42ab      	cmp	r3, r5
 8003308:	dcf2      	bgt.n	80032f0 <_printf_i+0x210>
 800330a:	e7eb      	b.n	80032e4 <_printf_i+0x204>
 800330c:	2500      	movs	r5, #0
 800330e:	f104 0619 	add.w	r6, r4, #25
 8003312:	e7f5      	b.n	8003300 <_printf_i+0x220>
 8003314:	080053dc 	.word	0x080053dc
 8003318:	080053ed 	.word	0x080053ed

0800331c <std>:
 800331c:	2300      	movs	r3, #0
 800331e:	b510      	push	{r4, lr}
 8003320:	4604      	mov	r4, r0
 8003322:	e9c0 3300 	strd	r3, r3, [r0]
 8003326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800332a:	6083      	str	r3, [r0, #8]
 800332c:	8181      	strh	r1, [r0, #12]
 800332e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003330:	81c2      	strh	r2, [r0, #14]
 8003332:	6183      	str	r3, [r0, #24]
 8003334:	4619      	mov	r1, r3
 8003336:	2208      	movs	r2, #8
 8003338:	305c      	adds	r0, #92	@ 0x5c
 800333a:	f000 f8f4 	bl	8003526 <memset>
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <std+0x58>)
 8003340:	6224      	str	r4, [r4, #32]
 8003342:	6263      	str	r3, [r4, #36]	@ 0x24
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <std+0x5c>)
 8003346:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <std+0x60>)
 800334a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800334c:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <std+0x64>)
 800334e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003350:	4b0c      	ldr	r3, [pc, #48]	@ (8003384 <std+0x68>)
 8003352:	429c      	cmp	r4, r3
 8003354:	d006      	beq.n	8003364 <std+0x48>
 8003356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800335a:	4294      	cmp	r4, r2
 800335c:	d002      	beq.n	8003364 <std+0x48>
 800335e:	33d0      	adds	r3, #208	@ 0xd0
 8003360:	429c      	cmp	r4, r3
 8003362:	d105      	bne.n	8003370 <std+0x54>
 8003364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800336c:	f000 b958 	b.w	8003620 <__retarget_lock_init_recursive>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	bf00      	nop
 8003374:	080034a1 	.word	0x080034a1
 8003378:	080034c3 	.word	0x080034c3
 800337c:	080034fb 	.word	0x080034fb
 8003380:	0800351f 	.word	0x0800351f
 8003384:	20000244 	.word	0x20000244

08003388 <stdio_exit_handler>:
 8003388:	4a02      	ldr	r2, [pc, #8]	@ (8003394 <stdio_exit_handler+0xc>)
 800338a:	4903      	ldr	r1, [pc, #12]	@ (8003398 <stdio_exit_handler+0x10>)
 800338c:	4803      	ldr	r0, [pc, #12]	@ (800339c <stdio_exit_handler+0x14>)
 800338e:	f000 b869 	b.w	8003464 <_fwalk_sglue>
 8003392:	bf00      	nop
 8003394:	2000000c 	.word	0x2000000c
 8003398:	08004cf1 	.word	0x08004cf1
 800339c:	2000001c 	.word	0x2000001c

080033a0 <cleanup_stdio>:
 80033a0:	6841      	ldr	r1, [r0, #4]
 80033a2:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <cleanup_stdio+0x34>)
 80033a4:	b510      	push	{r4, lr}
 80033a6:	4299      	cmp	r1, r3
 80033a8:	4604      	mov	r4, r0
 80033aa:	d001      	beq.n	80033b0 <cleanup_stdio+0x10>
 80033ac:	f001 fca0 	bl	8004cf0 <_fflush_r>
 80033b0:	68a1      	ldr	r1, [r4, #8]
 80033b2:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <cleanup_stdio+0x38>)
 80033b4:	4299      	cmp	r1, r3
 80033b6:	d002      	beq.n	80033be <cleanup_stdio+0x1e>
 80033b8:	4620      	mov	r0, r4
 80033ba:	f001 fc99 	bl	8004cf0 <_fflush_r>
 80033be:	68e1      	ldr	r1, [r4, #12]
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <cleanup_stdio+0x3c>)
 80033c2:	4299      	cmp	r1, r3
 80033c4:	d004      	beq.n	80033d0 <cleanup_stdio+0x30>
 80033c6:	4620      	mov	r0, r4
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033cc:	f001 bc90 	b.w	8004cf0 <_fflush_r>
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	bf00      	nop
 80033d4:	20000244 	.word	0x20000244
 80033d8:	200002ac 	.word	0x200002ac
 80033dc:	20000314 	.word	0x20000314

080033e0 <global_stdio_init.part.0>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <global_stdio_init.part.0+0x30>)
 80033e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003414 <global_stdio_init.part.0+0x34>)
 80033e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003418 <global_stdio_init.part.0+0x38>)
 80033e8:	4620      	mov	r0, r4
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	2104      	movs	r1, #4
 80033ee:	2200      	movs	r2, #0
 80033f0:	f7ff ff94 	bl	800331c <std>
 80033f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033f8:	2201      	movs	r2, #1
 80033fa:	2109      	movs	r1, #9
 80033fc:	f7ff ff8e 	bl	800331c <std>
 8003400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003404:	2202      	movs	r2, #2
 8003406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800340a:	2112      	movs	r1, #18
 800340c:	f7ff bf86 	b.w	800331c <std>
 8003410:	2000037c 	.word	0x2000037c
 8003414:	20000244 	.word	0x20000244
 8003418:	08003389 	.word	0x08003389

0800341c <__sfp_lock_acquire>:
 800341c:	4801      	ldr	r0, [pc, #4]	@ (8003424 <__sfp_lock_acquire+0x8>)
 800341e:	f000 b900 	b.w	8003622 <__retarget_lock_acquire_recursive>
 8003422:	bf00      	nop
 8003424:	20000385 	.word	0x20000385

08003428 <__sfp_lock_release>:
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <__sfp_lock_release+0x8>)
 800342a:	f000 b8fb 	b.w	8003624 <__retarget_lock_release_recursive>
 800342e:	bf00      	nop
 8003430:	20000385 	.word	0x20000385

08003434 <__sinit>:
 8003434:	b510      	push	{r4, lr}
 8003436:	4604      	mov	r4, r0
 8003438:	f7ff fff0 	bl	800341c <__sfp_lock_acquire>
 800343c:	6a23      	ldr	r3, [r4, #32]
 800343e:	b11b      	cbz	r3, 8003448 <__sinit+0x14>
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003444:	f7ff bff0 	b.w	8003428 <__sfp_lock_release>
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <__sinit+0x28>)
 800344a:	6223      	str	r3, [r4, #32]
 800344c:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <__sinit+0x2c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f5      	bne.n	8003440 <__sinit+0xc>
 8003454:	f7ff ffc4 	bl	80033e0 <global_stdio_init.part.0>
 8003458:	e7f2      	b.n	8003440 <__sinit+0xc>
 800345a:	bf00      	nop
 800345c:	080033a1 	.word	0x080033a1
 8003460:	2000037c 	.word	0x2000037c

08003464 <_fwalk_sglue>:
 8003464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003468:	4607      	mov	r7, r0
 800346a:	4688      	mov	r8, r1
 800346c:	4614      	mov	r4, r2
 800346e:	2600      	movs	r6, #0
 8003470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003474:	f1b9 0901 	subs.w	r9, r9, #1
 8003478:	d505      	bpl.n	8003486 <_fwalk_sglue+0x22>
 800347a:	6824      	ldr	r4, [r4, #0]
 800347c:	2c00      	cmp	r4, #0
 800347e:	d1f7      	bne.n	8003470 <_fwalk_sglue+0xc>
 8003480:	4630      	mov	r0, r6
 8003482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003486:	89ab      	ldrh	r3, [r5, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d907      	bls.n	800349c <_fwalk_sglue+0x38>
 800348c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003490:	3301      	adds	r3, #1
 8003492:	d003      	beq.n	800349c <_fwalk_sglue+0x38>
 8003494:	4629      	mov	r1, r5
 8003496:	4638      	mov	r0, r7
 8003498:	47c0      	blx	r8
 800349a:	4306      	orrs	r6, r0
 800349c:	3568      	adds	r5, #104	@ 0x68
 800349e:	e7e9      	b.n	8003474 <_fwalk_sglue+0x10>

080034a0 <__sread>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	460c      	mov	r4, r1
 80034a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a8:	f000 f86c 	bl	8003584 <_read_r>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	bfab      	itete	ge
 80034b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034b2:	89a3      	ldrhlt	r3, [r4, #12]
 80034b4:	181b      	addge	r3, r3, r0
 80034b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034ba:	bfac      	ite	ge
 80034bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034be:	81a3      	strhlt	r3, [r4, #12]
 80034c0:	bd10      	pop	{r4, pc}

080034c2 <__swrite>:
 80034c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c6:	461f      	mov	r7, r3
 80034c8:	898b      	ldrh	r3, [r1, #12]
 80034ca:	4605      	mov	r5, r0
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	460c      	mov	r4, r1
 80034d0:	4616      	mov	r6, r2
 80034d2:	d505      	bpl.n	80034e0 <__swrite+0x1e>
 80034d4:	2302      	movs	r3, #2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034dc:	f000 f840 	bl	8003560 <_lseek_r>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	4632      	mov	r2, r6
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	4628      	mov	r0, r5
 80034ec:	463b      	mov	r3, r7
 80034ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f6:	f000 b857 	b.w	80035a8 <_write_r>

080034fa <__sseek>:
 80034fa:	b510      	push	{r4, lr}
 80034fc:	460c      	mov	r4, r1
 80034fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003502:	f000 f82d 	bl	8003560 <_lseek_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	bf15      	itete	ne
 800350c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800350e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003516:	81a3      	strheq	r3, [r4, #12]
 8003518:	bf18      	it	ne
 800351a:	81a3      	strhne	r3, [r4, #12]
 800351c:	bd10      	pop	{r4, pc}

0800351e <__sclose>:
 800351e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003522:	f000 b80d 	b.w	8003540 <_close_r>

08003526 <memset>:
 8003526:	4603      	mov	r3, r0
 8003528:	4402      	add	r2, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	d100      	bne.n	8003530 <memset+0xa>
 800352e:	4770      	bx	lr
 8003530:	f803 1b01 	strb.w	r1, [r3], #1
 8003534:	e7f9      	b.n	800352a <memset+0x4>
	...

08003538 <_localeconv_r>:
 8003538:	4800      	ldr	r0, [pc, #0]	@ (800353c <_localeconv_r+0x4>)
 800353a:	4770      	bx	lr
 800353c:	20000158 	.word	0x20000158

08003540 <_close_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	2300      	movs	r3, #0
 8003544:	4d05      	ldr	r5, [pc, #20]	@ (800355c <_close_r+0x1c>)
 8003546:	4604      	mov	r4, r0
 8003548:	4608      	mov	r0, r1
 800354a:	602b      	str	r3, [r5, #0]
 800354c:	f7fd fca3 	bl	8000e96 <_close>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d102      	bne.n	800355a <_close_r+0x1a>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b103      	cbz	r3, 800355a <_close_r+0x1a>
 8003558:	6023      	str	r3, [r4, #0]
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	20000380 	.word	0x20000380

08003560 <_lseek_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	2200      	movs	r2, #0
 800356a:	4d05      	ldr	r5, [pc, #20]	@ (8003580 <_lseek_r+0x20>)
 800356c:	602a      	str	r2, [r5, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f7fd fcb5 	bl	8000ede <_lseek>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d102      	bne.n	800357e <_lseek_r+0x1e>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	b103      	cbz	r3, 800357e <_lseek_r+0x1e>
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	20000380 	.word	0x20000380

08003584 <_read_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	2200      	movs	r2, #0
 800358e:	4d05      	ldr	r5, [pc, #20]	@ (80035a4 <_read_r+0x20>)
 8003590:	602a      	str	r2, [r5, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	f7fd fc46 	bl	8000e24 <_read>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d102      	bne.n	80035a2 <_read_r+0x1e>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b103      	cbz	r3, 80035a2 <_read_r+0x1e>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	20000380 	.word	0x20000380

080035a8 <_write_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	2200      	movs	r2, #0
 80035b2:	4d05      	ldr	r5, [pc, #20]	@ (80035c8 <_write_r+0x20>)
 80035b4:	602a      	str	r2, [r5, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f7fd fc51 	bl	8000e5e <_write>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	d102      	bne.n	80035c6 <_write_r+0x1e>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	b103      	cbz	r3, 80035c6 <_write_r+0x1e>
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	bd38      	pop	{r3, r4, r5, pc}
 80035c8:	20000380 	.word	0x20000380

080035cc <__errno>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	@ (80035d4 <__errno+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000018 	.word	0x20000018

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	2600      	movs	r6, #0
 80035dc:	4d0c      	ldr	r5, [pc, #48]	@ (8003610 <__libc_init_array+0x38>)
 80035de:	4c0d      	ldr	r4, [pc, #52]	@ (8003614 <__libc_init_array+0x3c>)
 80035e0:	1b64      	subs	r4, r4, r5
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	42a6      	cmp	r6, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	f001 fece 	bl	8005388 <_init>
 80035ec:	2600      	movs	r6, #0
 80035ee:	4d0a      	ldr	r5, [pc, #40]	@ (8003618 <__libc_init_array+0x40>)
 80035f0:	4c0a      	ldr	r4, [pc, #40]	@ (800361c <__libc_init_array+0x44>)
 80035f2:	1b64      	subs	r4, r4, r5
 80035f4:	10a4      	asrs	r4, r4, #2
 80035f6:	42a6      	cmp	r6, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003600:	4798      	blx	r3
 8003602:	3601      	adds	r6, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f855 3b04 	ldr.w	r3, [r5], #4
 800360a:	4798      	blx	r3
 800360c:	3601      	adds	r6, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	08005744 	.word	0x08005744
 8003614:	08005744 	.word	0x08005744
 8003618:	08005744 	.word	0x08005744
 800361c:	08005748 	.word	0x08005748

08003620 <__retarget_lock_init_recursive>:
 8003620:	4770      	bx	lr

08003622 <__retarget_lock_acquire_recursive>:
 8003622:	4770      	bx	lr

08003624 <__retarget_lock_release_recursive>:
 8003624:	4770      	bx	lr

08003626 <memchr>:
 8003626:	4603      	mov	r3, r0
 8003628:	b510      	push	{r4, lr}
 800362a:	b2c9      	uxtb	r1, r1
 800362c:	4402      	add	r2, r0
 800362e:	4293      	cmp	r3, r2
 8003630:	4618      	mov	r0, r3
 8003632:	d101      	bne.n	8003638 <memchr+0x12>
 8003634:	2000      	movs	r0, #0
 8003636:	e003      	b.n	8003640 <memchr+0x1a>
 8003638:	7804      	ldrb	r4, [r0, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	428c      	cmp	r4, r1
 800363e:	d1f6      	bne.n	800362e <memchr+0x8>
 8003640:	bd10      	pop	{r4, pc}

08003642 <quorem>:
 8003642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003646:	6903      	ldr	r3, [r0, #16]
 8003648:	690c      	ldr	r4, [r1, #16]
 800364a:	4607      	mov	r7, r0
 800364c:	42a3      	cmp	r3, r4
 800364e:	db7e      	blt.n	800374e <quorem+0x10c>
 8003650:	3c01      	subs	r4, #1
 8003652:	00a3      	lsls	r3, r4, #2
 8003654:	f100 0514 	add.w	r5, r0, #20
 8003658:	f101 0814 	add.w	r8, r1, #20
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800366c:	3301      	adds	r3, #1
 800366e:	429a      	cmp	r2, r3
 8003670:	fbb2 f6f3 	udiv	r6, r2, r3
 8003674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003678:	d32e      	bcc.n	80036d8 <quorem+0x96>
 800367a:	f04f 0a00 	mov.w	sl, #0
 800367e:	46c4      	mov	ip, r8
 8003680:	46ae      	mov	lr, r5
 8003682:	46d3      	mov	fp, sl
 8003684:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003688:	b298      	uxth	r0, r3
 800368a:	fb06 a000 	mla	r0, r6, r0, sl
 800368e:	0c1b      	lsrs	r3, r3, #16
 8003690:	0c02      	lsrs	r2, r0, #16
 8003692:	fb06 2303 	mla	r3, r6, r3, r2
 8003696:	f8de 2000 	ldr.w	r2, [lr]
 800369a:	b280      	uxth	r0, r0
 800369c:	b292      	uxth	r2, r2
 800369e:	1a12      	subs	r2, r2, r0
 80036a0:	445a      	add	r2, fp
 80036a2:	f8de 0000 	ldr.w	r0, [lr]
 80036a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80036b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80036b4:	b292      	uxth	r2, r2
 80036b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80036ba:	45e1      	cmp	r9, ip
 80036bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80036c0:	f84e 2b04 	str.w	r2, [lr], #4
 80036c4:	d2de      	bcs.n	8003684 <quorem+0x42>
 80036c6:	9b00      	ldr	r3, [sp, #0]
 80036c8:	58eb      	ldr	r3, [r5, r3]
 80036ca:	b92b      	cbnz	r3, 80036d8 <quorem+0x96>
 80036cc:	9b01      	ldr	r3, [sp, #4]
 80036ce:	3b04      	subs	r3, #4
 80036d0:	429d      	cmp	r5, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	d32f      	bcc.n	8003736 <quorem+0xf4>
 80036d6:	613c      	str	r4, [r7, #16]
 80036d8:	4638      	mov	r0, r7
 80036da:	f001 f981 	bl	80049e0 <__mcmp>
 80036de:	2800      	cmp	r0, #0
 80036e0:	db25      	blt.n	800372e <quorem+0xec>
 80036e2:	4629      	mov	r1, r5
 80036e4:	2000      	movs	r0, #0
 80036e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80036ea:	f8d1 c000 	ldr.w	ip, [r1]
 80036ee:	fa1f fe82 	uxth.w	lr, r2
 80036f2:	fa1f f38c 	uxth.w	r3, ip
 80036f6:	eba3 030e 	sub.w	r3, r3, lr
 80036fa:	4403      	add	r3, r0
 80036fc:	0c12      	lsrs	r2, r2, #16
 80036fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003702:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003706:	b29b      	uxth	r3, r3
 8003708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800370c:	45c1      	cmp	r9, r8
 800370e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003712:	f841 3b04 	str.w	r3, [r1], #4
 8003716:	d2e6      	bcs.n	80036e6 <quorem+0xa4>
 8003718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800371c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003720:	b922      	cbnz	r2, 800372c <quorem+0xea>
 8003722:	3b04      	subs	r3, #4
 8003724:	429d      	cmp	r5, r3
 8003726:	461a      	mov	r2, r3
 8003728:	d30b      	bcc.n	8003742 <quorem+0x100>
 800372a:	613c      	str	r4, [r7, #16]
 800372c:	3601      	adds	r6, #1
 800372e:	4630      	mov	r0, r6
 8003730:	b003      	add	sp, #12
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	3b04      	subs	r3, #4
 800373a:	2a00      	cmp	r2, #0
 800373c:	d1cb      	bne.n	80036d6 <quorem+0x94>
 800373e:	3c01      	subs	r4, #1
 8003740:	e7c6      	b.n	80036d0 <quorem+0x8e>
 8003742:	6812      	ldr	r2, [r2, #0]
 8003744:	3b04      	subs	r3, #4
 8003746:	2a00      	cmp	r2, #0
 8003748:	d1ef      	bne.n	800372a <quorem+0xe8>
 800374a:	3c01      	subs	r4, #1
 800374c:	e7ea      	b.n	8003724 <quorem+0xe2>
 800374e:	2000      	movs	r0, #0
 8003750:	e7ee      	b.n	8003730 <quorem+0xee>
 8003752:	0000      	movs	r0, r0
 8003754:	0000      	movs	r0, r0
	...

08003758 <_dtoa_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	4614      	mov	r4, r2
 800375e:	461d      	mov	r5, r3
 8003760:	69c7      	ldr	r7, [r0, #28]
 8003762:	b097      	sub	sp, #92	@ 0x5c
 8003764:	4681      	mov	r9, r0
 8003766:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800376a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800376c:	b97f      	cbnz	r7, 800378e <_dtoa_r+0x36>
 800376e:	2010      	movs	r0, #16
 8003770:	f000 fe0e 	bl	8004390 <malloc>
 8003774:	4602      	mov	r2, r0
 8003776:	f8c9 001c 	str.w	r0, [r9, #28]
 800377a:	b920      	cbnz	r0, 8003786 <_dtoa_r+0x2e>
 800377c:	21ef      	movs	r1, #239	@ 0xef
 800377e:	4bac      	ldr	r3, [pc, #688]	@ (8003a30 <_dtoa_r+0x2d8>)
 8003780:	48ac      	ldr	r0, [pc, #688]	@ (8003a34 <_dtoa_r+0x2dc>)
 8003782:	f001 fafb 	bl	8004d7c <__assert_func>
 8003786:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800378a:	6007      	str	r7, [r0, #0]
 800378c:	60c7      	str	r7, [r0, #12]
 800378e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	b159      	cbz	r1, 80037ae <_dtoa_r+0x56>
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	2301      	movs	r3, #1
 800379a:	4093      	lsls	r3, r2
 800379c:	604a      	str	r2, [r1, #4]
 800379e:	608b      	str	r3, [r1, #8]
 80037a0:	4648      	mov	r0, r9
 80037a2:	f000 feeb 	bl	800457c <_Bfree>
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	1e2b      	subs	r3, r5, #0
 80037b0:	bfaf      	iteee	ge
 80037b2:	2300      	movge	r3, #0
 80037b4:	2201      	movlt	r2, #1
 80037b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80037ba:	9307      	strlt	r3, [sp, #28]
 80037bc:	bfa8      	it	ge
 80037be:	6033      	strge	r3, [r6, #0]
 80037c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80037c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a38 <_dtoa_r+0x2e0>)
 80037c6:	bfb8      	it	lt
 80037c8:	6032      	strlt	r2, [r6, #0]
 80037ca:	ea33 0308 	bics.w	r3, r3, r8
 80037ce:	d112      	bne.n	80037f6 <_dtoa_r+0x9e>
 80037d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80037d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80037dc:	4323      	orrs	r3, r4
 80037de:	f000 855e 	beq.w	800429e <_dtoa_r+0xb46>
 80037e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80037e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003a3c <_dtoa_r+0x2e4>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8560 	beq.w	80042ae <_dtoa_r+0xb56>
 80037ee:	f10a 0303 	add.w	r3, sl, #3
 80037f2:	f000 bd5a 	b.w	80042aa <_dtoa_r+0xb52>
 80037f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80037fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	2300      	movs	r3, #0
 8003806:	f7fd f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800380a:	4607      	mov	r7, r0
 800380c:	b158      	cbz	r0, 8003826 <_dtoa_r+0xce>
 800380e:	2301      	movs	r3, #1
 8003810:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003816:	b113      	cbz	r3, 800381e <_dtoa_r+0xc6>
 8003818:	4b89      	ldr	r3, [pc, #548]	@ (8003a40 <_dtoa_r+0x2e8>)
 800381a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003a44 <_dtoa_r+0x2ec>
 8003822:	f000 bd44 	b.w	80042ae <_dtoa_r+0xb56>
 8003826:	ab14      	add	r3, sp, #80	@ 0x50
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	ab15      	add	r3, sp, #84	@ 0x54
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	4648      	mov	r0, r9
 8003830:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003834:	f001 f984 	bl	8004b40 <__d2b>
 8003838:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800383c:	9003      	str	r0, [sp, #12]
 800383e:	2e00      	cmp	r6, #0
 8003840:	d078      	beq.n	8003934 <_dtoa_r+0x1dc>
 8003842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003848:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800384c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003850:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003854:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003858:	9712      	str	r7, [sp, #72]	@ 0x48
 800385a:	4619      	mov	r1, r3
 800385c:	2200      	movs	r2, #0
 800385e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a48 <_dtoa_r+0x2f0>)
 8003860:	f7fc fc82 	bl	8000168 <__aeabi_dsub>
 8003864:	a36c      	add	r3, pc, #432	@ (adr r3, 8003a18 <_dtoa_r+0x2c0>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fe35 	bl	80004d8 <__aeabi_dmul>
 800386e:	a36c      	add	r3, pc, #432	@ (adr r3, 8003a20 <_dtoa_r+0x2c8>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fc7a 	bl	800016c <__adddf3>
 8003878:	4604      	mov	r4, r0
 800387a:	4630      	mov	r0, r6
 800387c:	460d      	mov	r5, r1
 800387e:	f7fc fdc1 	bl	8000404 <__aeabi_i2d>
 8003882:	a369      	add	r3, pc, #420	@ (adr r3, 8003a28 <_dtoa_r+0x2d0>)
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f7fc fe26 	bl	80004d8 <__aeabi_dmul>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fc fc6a 	bl	800016c <__adddf3>
 8003898:	4604      	mov	r4, r0
 800389a:	460d      	mov	r5, r1
 800389c:	f7fd f8cc 	bl	8000a38 <__aeabi_d2iz>
 80038a0:	2200      	movs	r2, #0
 80038a2:	4607      	mov	r7, r0
 80038a4:	2300      	movs	r3, #0
 80038a6:	4620      	mov	r0, r4
 80038a8:	4629      	mov	r1, r5
 80038aa:	f7fd f887 	bl	80009bc <__aeabi_dcmplt>
 80038ae:	b140      	cbz	r0, 80038c2 <_dtoa_r+0x16a>
 80038b0:	4638      	mov	r0, r7
 80038b2:	f7fc fda7 	bl	8000404 <__aeabi_i2d>
 80038b6:	4622      	mov	r2, r4
 80038b8:	462b      	mov	r3, r5
 80038ba:	f7fd f875 	bl	80009a8 <__aeabi_dcmpeq>
 80038be:	b900      	cbnz	r0, 80038c2 <_dtoa_r+0x16a>
 80038c0:	3f01      	subs	r7, #1
 80038c2:	2f16      	cmp	r7, #22
 80038c4:	d854      	bhi.n	8003970 <_dtoa_r+0x218>
 80038c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038ca:	4b60      	ldr	r3, [pc, #384]	@ (8003a4c <_dtoa_r+0x2f4>)
 80038cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fd f872 	bl	80009bc <__aeabi_dcmplt>
 80038d8:	2800      	cmp	r0, #0
 80038da:	d04b      	beq.n	8003974 <_dtoa_r+0x21c>
 80038dc:	2300      	movs	r3, #0
 80038de:	3f01      	subs	r7, #1
 80038e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80038e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80038e4:	1b9b      	subs	r3, r3, r6
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	bf49      	itett	mi
 80038ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80038ee:	2300      	movpl	r3, #0
 80038f0:	9304      	strmi	r3, [sp, #16]
 80038f2:	2300      	movmi	r3, #0
 80038f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80038f6:	bf54      	ite	pl
 80038f8:	9304      	strpl	r3, [sp, #16]
 80038fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	db3b      	blt.n	8003978 <_dtoa_r+0x220>
 8003900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003902:	970e      	str	r7, [sp, #56]	@ 0x38
 8003904:	443b      	add	r3, r7
 8003906:	9309      	str	r3, [sp, #36]	@ 0x24
 8003908:	2300      	movs	r3, #0
 800390a:	930a      	str	r3, [sp, #40]	@ 0x28
 800390c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800390e:	2b09      	cmp	r3, #9
 8003910:	d865      	bhi.n	80039de <_dtoa_r+0x286>
 8003912:	2b05      	cmp	r3, #5
 8003914:	bfc4      	itt	gt
 8003916:	3b04      	subgt	r3, #4
 8003918:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800391a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800391c:	bfc8      	it	gt
 800391e:	2400      	movgt	r4, #0
 8003920:	f1a3 0302 	sub.w	r3, r3, #2
 8003924:	bfd8      	it	le
 8003926:	2401      	movle	r4, #1
 8003928:	2b03      	cmp	r3, #3
 800392a:	d864      	bhi.n	80039f6 <_dtoa_r+0x29e>
 800392c:	e8df f003 	tbb	[pc, r3]
 8003930:	2c385553 	.word	0x2c385553
 8003934:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003938:	441e      	add	r6, r3
 800393a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800393e:	2b20      	cmp	r3, #32
 8003940:	bfc1      	itttt	gt
 8003942:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003946:	fa08 f803 	lslgt.w	r8, r8, r3
 800394a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800394e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003952:	bfd6      	itet	le
 8003954:	f1c3 0320 	rsble	r3, r3, #32
 8003958:	ea48 0003 	orrgt.w	r0, r8, r3
 800395c:	fa04 f003 	lslle.w	r0, r4, r3
 8003960:	f7fc fd40 	bl	80003e4 <__aeabi_ui2d>
 8003964:	2201      	movs	r2, #1
 8003966:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800396a:	3e01      	subs	r6, #1
 800396c:	9212      	str	r2, [sp, #72]	@ 0x48
 800396e:	e774      	b.n	800385a <_dtoa_r+0x102>
 8003970:	2301      	movs	r3, #1
 8003972:	e7b5      	b.n	80038e0 <_dtoa_r+0x188>
 8003974:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003976:	e7b4      	b.n	80038e2 <_dtoa_r+0x18a>
 8003978:	9b04      	ldr	r3, [sp, #16]
 800397a:	1bdb      	subs	r3, r3, r7
 800397c:	9304      	str	r3, [sp, #16]
 800397e:	427b      	negs	r3, r7
 8003980:	930a      	str	r3, [sp, #40]	@ 0x28
 8003982:	2300      	movs	r3, #0
 8003984:	930e      	str	r3, [sp, #56]	@ 0x38
 8003986:	e7c1      	b.n	800390c <_dtoa_r+0x1b4>
 8003988:	2301      	movs	r3, #1
 800398a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800398c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800398e:	eb07 0b03 	add.w	fp, r7, r3
 8003992:	f10b 0301 	add.w	r3, fp, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	9308      	str	r3, [sp, #32]
 800399a:	bfb8      	it	lt
 800399c:	2301      	movlt	r3, #1
 800399e:	e006      	b.n	80039ae <_dtoa_r+0x256>
 80039a0:	2301      	movs	r3, #1
 80039a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	dd28      	ble.n	80039fc <_dtoa_r+0x2a4>
 80039aa:	469b      	mov	fp, r3
 80039ac:	9308      	str	r3, [sp, #32]
 80039ae:	2100      	movs	r1, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80039b6:	f102 0514 	add.w	r5, r2, #20
 80039ba:	429d      	cmp	r5, r3
 80039bc:	d926      	bls.n	8003a0c <_dtoa_r+0x2b4>
 80039be:	6041      	str	r1, [r0, #4]
 80039c0:	4648      	mov	r0, r9
 80039c2:	f000 fd9b 	bl	80044fc <_Balloc>
 80039c6:	4682      	mov	sl, r0
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d143      	bne.n	8003a54 <_dtoa_r+0x2fc>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80039d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a50 <_dtoa_r+0x2f8>)
 80039d4:	e6d4      	b.n	8003780 <_dtoa_r+0x28>
 80039d6:	2300      	movs	r3, #0
 80039d8:	e7e3      	b.n	80039a2 <_dtoa_r+0x24a>
 80039da:	2300      	movs	r3, #0
 80039dc:	e7d5      	b.n	800398a <_dtoa_r+0x232>
 80039de:	2401      	movs	r4, #1
 80039e0:	2300      	movs	r3, #0
 80039e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80039e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80039e6:	f04f 3bff 	mov.w	fp, #4294967295
 80039ea:	2200      	movs	r2, #0
 80039ec:	2312      	movs	r3, #18
 80039ee:	f8cd b020 	str.w	fp, [sp, #32]
 80039f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80039f4:	e7db      	b.n	80039ae <_dtoa_r+0x256>
 80039f6:	2301      	movs	r3, #1
 80039f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039fa:	e7f4      	b.n	80039e6 <_dtoa_r+0x28e>
 80039fc:	f04f 0b01 	mov.w	fp, #1
 8003a00:	465b      	mov	r3, fp
 8003a02:	f8cd b020 	str.w	fp, [sp, #32]
 8003a06:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003a0a:	e7d0      	b.n	80039ae <_dtoa_r+0x256>
 8003a0c:	3101      	adds	r1, #1
 8003a0e:	0052      	lsls	r2, r2, #1
 8003a10:	e7d1      	b.n	80039b6 <_dtoa_r+0x25e>
 8003a12:	bf00      	nop
 8003a14:	f3af 8000 	nop.w
 8003a18:	636f4361 	.word	0x636f4361
 8003a1c:	3fd287a7 	.word	0x3fd287a7
 8003a20:	8b60c8b3 	.word	0x8b60c8b3
 8003a24:	3fc68a28 	.word	0x3fc68a28
 8003a28:	509f79fb 	.word	0x509f79fb
 8003a2c:	3fd34413 	.word	0x3fd34413
 8003a30:	0800540b 	.word	0x0800540b
 8003a34:	08005422 	.word	0x08005422
 8003a38:	7ff00000 	.word	0x7ff00000
 8003a3c:	08005407 	.word	0x08005407
 8003a40:	080053db 	.word	0x080053db
 8003a44:	080053da 	.word	0x080053da
 8003a48:	3ff80000 	.word	0x3ff80000
 8003a4c:	08005570 	.word	0x08005570
 8003a50:	0800547a 	.word	0x0800547a
 8003a54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003a58:	6018      	str	r0, [r3, #0]
 8003a5a:	9b08      	ldr	r3, [sp, #32]
 8003a5c:	2b0e      	cmp	r3, #14
 8003a5e:	f200 80a1 	bhi.w	8003ba4 <_dtoa_r+0x44c>
 8003a62:	2c00      	cmp	r4, #0
 8003a64:	f000 809e 	beq.w	8003ba4 <_dtoa_r+0x44c>
 8003a68:	2f00      	cmp	r7, #0
 8003a6a:	dd33      	ble.n	8003ad4 <_dtoa_r+0x37c>
 8003a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce0 <_dtoa_r+0x588>)
 8003a6e:	f007 020f 	and.w	r2, r7, #15
 8003a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a76:	05f8      	lsls	r0, r7, #23
 8003a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003a80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003a84:	d516      	bpl.n	8003ab4 <_dtoa_r+0x35c>
 8003a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a8a:	4b96      	ldr	r3, [pc, #600]	@ (8003ce4 <_dtoa_r+0x58c>)
 8003a8c:	2603      	movs	r6, #3
 8003a8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a92:	f7fc fe4b 	bl	800072c <__aeabi_ddiv>
 8003a96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003a9a:	f004 040f 	and.w	r4, r4, #15
 8003a9e:	4d91      	ldr	r5, [pc, #580]	@ (8003ce4 <_dtoa_r+0x58c>)
 8003aa0:	b954      	cbnz	r4, 8003ab8 <_dtoa_r+0x360>
 8003aa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aaa:	f7fc fe3f 	bl	800072c <__aeabi_ddiv>
 8003aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003ab2:	e028      	b.n	8003b06 <_dtoa_r+0x3ae>
 8003ab4:	2602      	movs	r6, #2
 8003ab6:	e7f2      	b.n	8003a9e <_dtoa_r+0x346>
 8003ab8:	07e1      	lsls	r1, r4, #31
 8003aba:	d508      	bpl.n	8003ace <_dtoa_r+0x376>
 8003abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003ac4:	f7fc fd08 	bl	80004d8 <__aeabi_dmul>
 8003ac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003acc:	3601      	adds	r6, #1
 8003ace:	1064      	asrs	r4, r4, #1
 8003ad0:	3508      	adds	r5, #8
 8003ad2:	e7e5      	b.n	8003aa0 <_dtoa_r+0x348>
 8003ad4:	f000 80af 	beq.w	8003c36 <_dtoa_r+0x4de>
 8003ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003adc:	427c      	negs	r4, r7
 8003ade:	4b80      	ldr	r3, [pc, #512]	@ (8003ce0 <_dtoa_r+0x588>)
 8003ae0:	f004 020f 	and.w	r2, r4, #15
 8003ae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fcf4 	bl	80004d8 <__aeabi_dmul>
 8003af0:	2602      	movs	r6, #2
 8003af2:	2300      	movs	r3, #0
 8003af4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003af8:	4d7a      	ldr	r5, [pc, #488]	@ (8003ce4 <_dtoa_r+0x58c>)
 8003afa:	1124      	asrs	r4, r4, #4
 8003afc:	2c00      	cmp	r4, #0
 8003afe:	f040 808f 	bne.w	8003c20 <_dtoa_r+0x4c8>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1d3      	bne.n	8003aae <_dtoa_r+0x356>
 8003b06:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003b0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8094 	beq.w	8003c3a <_dtoa_r+0x4e2>
 8003b12:	2200      	movs	r2, #0
 8003b14:	4620      	mov	r0, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	4b73      	ldr	r3, [pc, #460]	@ (8003ce8 <_dtoa_r+0x590>)
 8003b1a:	f7fc ff4f 	bl	80009bc <__aeabi_dcmplt>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f000 808b 	beq.w	8003c3a <_dtoa_r+0x4e2>
 8003b24:	9b08      	ldr	r3, [sp, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <_dtoa_r+0x4e2>
 8003b2c:	f1bb 0f00 	cmp.w	fp, #0
 8003b30:	dd34      	ble.n	8003b9c <_dtoa_r+0x444>
 8003b32:	4620      	mov	r0, r4
 8003b34:	2200      	movs	r2, #0
 8003b36:	4629      	mov	r1, r5
 8003b38:	4b6c      	ldr	r3, [pc, #432]	@ (8003cec <_dtoa_r+0x594>)
 8003b3a:	f7fc fccd 	bl	80004d8 <__aeabi_dmul>
 8003b3e:	465c      	mov	r4, fp
 8003b40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b44:	f107 38ff 	add.w	r8, r7, #4294967295
 8003b48:	3601      	adds	r6, #1
 8003b4a:	4630      	mov	r0, r6
 8003b4c:	f7fc fc5a 	bl	8000404 <__aeabi_i2d>
 8003b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b54:	f7fc fcc0 	bl	80004d8 <__aeabi_dmul>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4b65      	ldr	r3, [pc, #404]	@ (8003cf0 <_dtoa_r+0x598>)
 8003b5c:	f7fc fb06 	bl	800016c <__adddf3>
 8003b60:	4605      	mov	r5, r0
 8003b62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003b66:	2c00      	cmp	r4, #0
 8003b68:	d16a      	bne.n	8003c40 <_dtoa_r+0x4e8>
 8003b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4b60      	ldr	r3, [pc, #384]	@ (8003cf4 <_dtoa_r+0x59c>)
 8003b72:	f7fc faf9 	bl	8000168 <__aeabi_dsub>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b7e:	462a      	mov	r2, r5
 8003b80:	4633      	mov	r3, r6
 8003b82:	f7fc ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	f040 8298 	bne.w	80040bc <_dtoa_r+0x964>
 8003b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b90:	462a      	mov	r2, r5
 8003b92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003b96:	f7fc ff11 	bl	80009bc <__aeabi_dcmplt>
 8003b9a:	bb38      	cbnz	r0, 8003bec <_dtoa_r+0x494>
 8003b9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003ba0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003ba4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f2c0 8157 	blt.w	8003e5a <_dtoa_r+0x702>
 8003bac:	2f0e      	cmp	r7, #14
 8003bae:	f300 8154 	bgt.w	8003e5a <_dtoa_r+0x702>
 8003bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce0 <_dtoa_r+0x588>)
 8003bb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003bb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003bc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f280 80e5 	bge.w	8003d92 <_dtoa_r+0x63a>
 8003bc8:	9b08      	ldr	r3, [sp, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f300 80e1 	bgt.w	8003d92 <_dtoa_r+0x63a>
 8003bd0:	d10c      	bne.n	8003bec <_dtoa_r+0x494>
 8003bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4b46      	ldr	r3, [pc, #280]	@ (8003cf4 <_dtoa_r+0x59c>)
 8003bda:	f7fc fc7d 	bl	80004d8 <__aeabi_dmul>
 8003bde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003be2:	f7fc feff 	bl	80009e4 <__aeabi_dcmpge>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	f000 8266 	beq.w	80040b8 <_dtoa_r+0x960>
 8003bec:	2400      	movs	r4, #0
 8003bee:	4625      	mov	r5, r4
 8003bf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003bf2:	4656      	mov	r6, sl
 8003bf4:	ea6f 0803 	mvn.w	r8, r3
 8003bf8:	2700      	movs	r7, #0
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4648      	mov	r0, r9
 8003bfe:	f000 fcbd 	bl	800457c <_Bfree>
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	f000 80bd 	beq.w	8003d82 <_dtoa_r+0x62a>
 8003c08:	b12f      	cbz	r7, 8003c16 <_dtoa_r+0x4be>
 8003c0a:	42af      	cmp	r7, r5
 8003c0c:	d003      	beq.n	8003c16 <_dtoa_r+0x4be>
 8003c0e:	4639      	mov	r1, r7
 8003c10:	4648      	mov	r0, r9
 8003c12:	f000 fcb3 	bl	800457c <_Bfree>
 8003c16:	4629      	mov	r1, r5
 8003c18:	4648      	mov	r0, r9
 8003c1a:	f000 fcaf 	bl	800457c <_Bfree>
 8003c1e:	e0b0      	b.n	8003d82 <_dtoa_r+0x62a>
 8003c20:	07e2      	lsls	r2, r4, #31
 8003c22:	d505      	bpl.n	8003c30 <_dtoa_r+0x4d8>
 8003c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c28:	f7fc fc56 	bl	80004d8 <__aeabi_dmul>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	3601      	adds	r6, #1
 8003c30:	1064      	asrs	r4, r4, #1
 8003c32:	3508      	adds	r5, #8
 8003c34:	e762      	b.n	8003afc <_dtoa_r+0x3a4>
 8003c36:	2602      	movs	r6, #2
 8003c38:	e765      	b.n	8003b06 <_dtoa_r+0x3ae>
 8003c3a:	46b8      	mov	r8, r7
 8003c3c:	9c08      	ldr	r4, [sp, #32]
 8003c3e:	e784      	b.n	8003b4a <_dtoa_r+0x3f2>
 8003c40:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <_dtoa_r+0x588>)
 8003c42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003c48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003c4c:	4454      	add	r4, sl
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	d054      	beq.n	8003cfc <_dtoa_r+0x5a4>
 8003c52:	2000      	movs	r0, #0
 8003c54:	4928      	ldr	r1, [pc, #160]	@ (8003cf8 <_dtoa_r+0x5a0>)
 8003c56:	f7fc fd69 	bl	800072c <__aeabi_ddiv>
 8003c5a:	4633      	mov	r3, r6
 8003c5c:	462a      	mov	r2, r5
 8003c5e:	f7fc fa83 	bl	8000168 <__aeabi_dsub>
 8003c62:	4656      	mov	r6, sl
 8003c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c6c:	f7fc fee4 	bl	8000a38 <__aeabi_d2iz>
 8003c70:	4605      	mov	r5, r0
 8003c72:	f7fc fbc7 	bl	8000404 <__aeabi_i2d>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c7e:	f7fc fa73 	bl	8000168 <__aeabi_dsub>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	3530      	adds	r5, #48	@ 0x30
 8003c88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003c8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003c90:	f806 5b01 	strb.w	r5, [r6], #1
 8003c94:	f7fc fe92 	bl	80009bc <__aeabi_dcmplt>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d172      	bne.n	8003d82 <_dtoa_r+0x62a>
 8003c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	4911      	ldr	r1, [pc, #68]	@ (8003ce8 <_dtoa_r+0x590>)
 8003ca4:	f7fc fa60 	bl	8000168 <__aeabi_dsub>
 8003ca8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003cac:	f7fc fe86 	bl	80009bc <__aeabi_dcmplt>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	f040 80b4 	bne.w	8003e1e <_dtoa_r+0x6c6>
 8003cb6:	42a6      	cmp	r6, r4
 8003cb8:	f43f af70 	beq.w	8003b9c <_dtoa_r+0x444>
 8003cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cec <_dtoa_r+0x594>)
 8003cc4:	f7fc fc08 	bl	80004d8 <__aeabi_dmul>
 8003cc8:	2200      	movs	r2, #0
 8003cca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <_dtoa_r+0x594>)
 8003cd4:	f7fc fc00 	bl	80004d8 <__aeabi_dmul>
 8003cd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003cdc:	e7c4      	b.n	8003c68 <_dtoa_r+0x510>
 8003cde:	bf00      	nop
 8003ce0:	08005570 	.word	0x08005570
 8003ce4:	08005548 	.word	0x08005548
 8003ce8:	3ff00000 	.word	0x3ff00000
 8003cec:	40240000 	.word	0x40240000
 8003cf0:	401c0000 	.word	0x401c0000
 8003cf4:	40140000 	.word	0x40140000
 8003cf8:	3fe00000 	.word	0x3fe00000
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f7fc fbea 	bl	80004d8 <__aeabi_dmul>
 8003d04:	4656      	mov	r6, sl
 8003d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d10:	f7fc fe92 	bl	8000a38 <__aeabi_d2iz>
 8003d14:	4605      	mov	r5, r0
 8003d16:	f7fc fb75 	bl	8000404 <__aeabi_i2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d22:	f7fc fa21 	bl	8000168 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	3530      	adds	r5, #48	@ 0x30
 8003d2c:	f806 5b01 	strb.w	r5, [r6], #1
 8003d30:	42a6      	cmp	r6, r4
 8003d32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	d124      	bne.n	8003d86 <_dtoa_r+0x62e>
 8003d3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003d40:	4bae      	ldr	r3, [pc, #696]	@ (8003ffc <_dtoa_r+0x8a4>)
 8003d42:	f7fc fa13 	bl	800016c <__adddf3>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d4e:	f7fc fe53 	bl	80009f8 <__aeabi_dcmpgt>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d163      	bne.n	8003e1e <_dtoa_r+0x6c6>
 8003d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	49a7      	ldr	r1, [pc, #668]	@ (8003ffc <_dtoa_r+0x8a4>)
 8003d5e:	f7fc fa03 	bl	8000168 <__aeabi_dsub>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d6a:	f7fc fe27 	bl	80009bc <__aeabi_dcmplt>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f43f af14 	beq.w	8003b9c <_dtoa_r+0x444>
 8003d74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003d76:	1e73      	subs	r3, r6, #1
 8003d78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003d7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003d7e:	2b30      	cmp	r3, #48	@ 0x30
 8003d80:	d0f8      	beq.n	8003d74 <_dtoa_r+0x61c>
 8003d82:	4647      	mov	r7, r8
 8003d84:	e03b      	b.n	8003dfe <_dtoa_r+0x6a6>
 8003d86:	4b9e      	ldr	r3, [pc, #632]	@ (8004000 <_dtoa_r+0x8a8>)
 8003d88:	f7fc fba6 	bl	80004d8 <__aeabi_dmul>
 8003d8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d90:	e7bc      	b.n	8003d0c <_dtoa_r+0x5b4>
 8003d92:	4656      	mov	r6, sl
 8003d94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	4629      	mov	r1, r5
 8003da0:	f7fc fcc4 	bl	800072c <__aeabi_ddiv>
 8003da4:	f7fc fe48 	bl	8000a38 <__aeabi_d2iz>
 8003da8:	4680      	mov	r8, r0
 8003daa:	f7fc fb2b 	bl	8000404 <__aeabi_i2d>
 8003dae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003db2:	f7fc fb91 	bl	80004d8 <__aeabi_dmul>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc f9d3 	bl	8000168 <__aeabi_dsub>
 8003dc2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003dc6:	9d08      	ldr	r5, [sp, #32]
 8003dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8003dcc:	eba6 040a 	sub.w	r4, r6, sl
 8003dd0:	42a5      	cmp	r5, r4
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	d133      	bne.n	8003e40 <_dtoa_r+0x6e8>
 8003dd8:	f7fc f9c8 	bl	800016c <__adddf3>
 8003ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003de0:	4604      	mov	r4, r0
 8003de2:	460d      	mov	r5, r1
 8003de4:	f7fc fe08 	bl	80009f8 <__aeabi_dcmpgt>
 8003de8:	b9c0      	cbnz	r0, 8003e1c <_dtoa_r+0x6c4>
 8003dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dee:	4620      	mov	r0, r4
 8003df0:	4629      	mov	r1, r5
 8003df2:	f7fc fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8003df6:	b110      	cbz	r0, 8003dfe <_dtoa_r+0x6a6>
 8003df8:	f018 0f01 	tst.w	r8, #1
 8003dfc:	d10e      	bne.n	8003e1c <_dtoa_r+0x6c4>
 8003dfe:	4648      	mov	r0, r9
 8003e00:	9903      	ldr	r1, [sp, #12]
 8003e02:	f000 fbbb 	bl	800457c <_Bfree>
 8003e06:	2300      	movs	r3, #0
 8003e08:	7033      	strb	r3, [r6, #0]
 8003e0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8003e0c:	3701      	adds	r7, #1
 8003e0e:	601f      	str	r7, [r3, #0]
 8003e10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 824b 	beq.w	80042ae <_dtoa_r+0xb56>
 8003e18:	601e      	str	r6, [r3, #0]
 8003e1a:	e248      	b.n	80042ae <_dtoa_r+0xb56>
 8003e1c:	46b8      	mov	r8, r7
 8003e1e:	4633      	mov	r3, r6
 8003e20:	461e      	mov	r6, r3
 8003e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e26:	2a39      	cmp	r2, #57	@ 0x39
 8003e28:	d106      	bne.n	8003e38 <_dtoa_r+0x6e0>
 8003e2a:	459a      	cmp	sl, r3
 8003e2c:	d1f8      	bne.n	8003e20 <_dtoa_r+0x6c8>
 8003e2e:	2230      	movs	r2, #48	@ 0x30
 8003e30:	f108 0801 	add.w	r8, r8, #1
 8003e34:	f88a 2000 	strb.w	r2, [sl]
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e7a0      	b.n	8003d82 <_dtoa_r+0x62a>
 8003e40:	2200      	movs	r2, #0
 8003e42:	4b6f      	ldr	r3, [pc, #444]	@ (8004000 <_dtoa_r+0x8a8>)
 8003e44:	f7fc fb48 	bl	80004d8 <__aeabi_dmul>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	460d      	mov	r5, r1
 8003e50:	f7fc fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d09f      	beq.n	8003d98 <_dtoa_r+0x640>
 8003e58:	e7d1      	b.n	8003dfe <_dtoa_r+0x6a6>
 8003e5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	f000 80ea 	beq.w	8004036 <_dtoa_r+0x8de>
 8003e62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	f300 80cd 	bgt.w	8004004 <_dtoa_r+0x8ac>
 8003e6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e6c:	2a00      	cmp	r2, #0
 8003e6e:	f000 80c1 	beq.w	8003ff4 <_dtoa_r+0x89c>
 8003e72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003e78:	9e04      	ldr	r6, [sp, #16]
 8003e7a:	9a04      	ldr	r2, [sp, #16]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	441a      	add	r2, r3
 8003e80:	9204      	str	r2, [sp, #16]
 8003e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e84:	4648      	mov	r0, r9
 8003e86:	441a      	add	r2, r3
 8003e88:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e8a:	f000 fc2b 	bl	80046e4 <__i2b>
 8003e8e:	4605      	mov	r5, r0
 8003e90:	b166      	cbz	r6, 8003eac <_dtoa_r+0x754>
 8003e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	dd09      	ble.n	8003eac <_dtoa_r+0x754>
 8003e98:	42b3      	cmp	r3, r6
 8003e9a:	bfa8      	it	ge
 8003e9c:	4633      	movge	r3, r6
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	1af6      	subs	r6, r6, r3
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	9204      	str	r2, [sp, #16]
 8003ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003eae:	b30b      	cbz	r3, 8003ef4 <_dtoa_r+0x79c>
 8003eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80c6 	beq.w	8004044 <_dtoa_r+0x8ec>
 8003eb8:	2c00      	cmp	r4, #0
 8003eba:	f000 80c0 	beq.w	800403e <_dtoa_r+0x8e6>
 8003ebe:	4629      	mov	r1, r5
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	4648      	mov	r0, r9
 8003ec4:	f000 fcc6 	bl	8004854 <__pow5mult>
 8003ec8:	9a03      	ldr	r2, [sp, #12]
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4605      	mov	r5, r0
 8003ece:	4648      	mov	r0, r9
 8003ed0:	f000 fc1e 	bl	8004710 <__multiply>
 8003ed4:	9903      	ldr	r1, [sp, #12]
 8003ed6:	4680      	mov	r8, r0
 8003ed8:	4648      	mov	r0, r9
 8003eda:	f000 fb4f 	bl	800457c <_Bfree>
 8003ede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ee0:	1b1b      	subs	r3, r3, r4
 8003ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ee4:	f000 80b1 	beq.w	800404a <_dtoa_r+0x8f2>
 8003ee8:	4641      	mov	r1, r8
 8003eea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003eec:	4648      	mov	r0, r9
 8003eee:	f000 fcb1 	bl	8004854 <__pow5mult>
 8003ef2:	9003      	str	r0, [sp, #12]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4648      	mov	r0, r9
 8003ef8:	f000 fbf4 	bl	80046e4 <__i2b>
 8003efc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003efe:	4604      	mov	r4, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 81d8 	beq.w	80042b6 <_dtoa_r+0xb5e>
 8003f06:	461a      	mov	r2, r3
 8003f08:	4601      	mov	r1, r0
 8003f0a:	4648      	mov	r0, r9
 8003f0c:	f000 fca2 	bl	8004854 <__pow5mult>
 8003f10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003f12:	4604      	mov	r4, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f300 809f 	bgt.w	8004058 <_dtoa_r+0x900>
 8003f1a:	9b06      	ldr	r3, [sp, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 8097 	bne.w	8004050 <_dtoa_r+0x8f8>
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 8093 	bne.w	8004054 <_dtoa_r+0x8fc>
 8003f2e:	9b07      	ldr	r3, [sp, #28]
 8003f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f34:	0d1b      	lsrs	r3, r3, #20
 8003f36:	051b      	lsls	r3, r3, #20
 8003f38:	b133      	cbz	r3, 8003f48 <_dtoa_r+0x7f0>
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f42:	3301      	adds	r3, #1
 8003f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f46:	2301      	movs	r3, #1
 8003f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 81b8 	beq.w	80042c2 <_dtoa_r+0xb6a>
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f58:	6918      	ldr	r0, [r3, #16]
 8003f5a:	f000 fb77 	bl	800464c <__hi0bits>
 8003f5e:	f1c0 0020 	rsb	r0, r0, #32
 8003f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f64:	4418      	add	r0, r3
 8003f66:	f010 001f 	ands.w	r0, r0, #31
 8003f6a:	f000 8082 	beq.w	8004072 <_dtoa_r+0x91a>
 8003f6e:	f1c0 0320 	rsb	r3, r0, #32
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	dd73      	ble.n	800405e <_dtoa_r+0x906>
 8003f76:	9b04      	ldr	r3, [sp, #16]
 8003f78:	f1c0 001c 	rsb	r0, r0, #28
 8003f7c:	4403      	add	r3, r0
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f82:	4406      	add	r6, r0
 8003f84:	4403      	add	r3, r0
 8003f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f88:	9b04      	ldr	r3, [sp, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dd05      	ble.n	8003f9a <_dtoa_r+0x842>
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4648      	mov	r0, r9
 8003f92:	9903      	ldr	r1, [sp, #12]
 8003f94:	f000 fcb8 	bl	8004908 <__lshift>
 8003f98:	9003      	str	r0, [sp, #12]
 8003f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	dd05      	ble.n	8003fac <_dtoa_r+0x854>
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4648      	mov	r0, r9
 8003fa6:	f000 fcaf 	bl	8004908 <__lshift>
 8003faa:	4604      	mov	r4, r0
 8003fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d061      	beq.n	8004076 <_dtoa_r+0x91e>
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	9803      	ldr	r0, [sp, #12]
 8003fb6:	f000 fd13 	bl	80049e0 <__mcmp>
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	da5b      	bge.n	8004076 <_dtoa_r+0x91e>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	220a      	movs	r2, #10
 8003fc2:	4648      	mov	r0, r9
 8003fc4:	9903      	ldr	r1, [sp, #12]
 8003fc6:	f000 fafb 	bl	80045c0 <__multadd>
 8003fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fcc:	f107 38ff 	add.w	r8, r7, #4294967295
 8003fd0:	9003      	str	r0, [sp, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8177 	beq.w	80042c6 <_dtoa_r+0xb6e>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	2300      	movs	r3, #0
 8003fdc:	220a      	movs	r2, #10
 8003fde:	4648      	mov	r0, r9
 8003fe0:	f000 faee 	bl	80045c0 <__multadd>
 8003fe4:	f1bb 0f00 	cmp.w	fp, #0
 8003fe8:	4605      	mov	r5, r0
 8003fea:	dc6f      	bgt.n	80040cc <_dtoa_r+0x974>
 8003fec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	dc49      	bgt.n	8004086 <_dtoa_r+0x92e>
 8003ff2:	e06b      	b.n	80040cc <_dtoa_r+0x974>
 8003ff4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ff6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003ffa:	e73c      	b.n	8003e76 <_dtoa_r+0x71e>
 8003ffc:	3fe00000 	.word	0x3fe00000
 8004000:	40240000 	.word	0x40240000
 8004004:	9b08      	ldr	r3, [sp, #32]
 8004006:	1e5c      	subs	r4, r3, #1
 8004008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800400a:	42a3      	cmp	r3, r4
 800400c:	db09      	blt.n	8004022 <_dtoa_r+0x8ca>
 800400e:	1b1c      	subs	r4, r3, r4
 8004010:	9b08      	ldr	r3, [sp, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f6bf af30 	bge.w	8003e78 <_dtoa_r+0x720>
 8004018:	9b04      	ldr	r3, [sp, #16]
 800401a:	9a08      	ldr	r2, [sp, #32]
 800401c:	1a9e      	subs	r6, r3, r2
 800401e:	2300      	movs	r3, #0
 8004020:	e72b      	b.n	8003e7a <_dtoa_r+0x722>
 8004022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004026:	1ae3      	subs	r3, r4, r3
 8004028:	441a      	add	r2, r3
 800402a:	940a      	str	r4, [sp, #40]	@ 0x28
 800402c:	9e04      	ldr	r6, [sp, #16]
 800402e:	2400      	movs	r4, #0
 8004030:	9b08      	ldr	r3, [sp, #32]
 8004032:	920e      	str	r2, [sp, #56]	@ 0x38
 8004034:	e721      	b.n	8003e7a <_dtoa_r+0x722>
 8004036:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004038:	9e04      	ldr	r6, [sp, #16]
 800403a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800403c:	e728      	b.n	8003e90 <_dtoa_r+0x738>
 800403e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004042:	e751      	b.n	8003ee8 <_dtoa_r+0x790>
 8004044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004046:	9903      	ldr	r1, [sp, #12]
 8004048:	e750      	b.n	8003eec <_dtoa_r+0x794>
 800404a:	f8cd 800c 	str.w	r8, [sp, #12]
 800404e:	e751      	b.n	8003ef4 <_dtoa_r+0x79c>
 8004050:	2300      	movs	r3, #0
 8004052:	e779      	b.n	8003f48 <_dtoa_r+0x7f0>
 8004054:	9b06      	ldr	r3, [sp, #24]
 8004056:	e777      	b.n	8003f48 <_dtoa_r+0x7f0>
 8004058:	2300      	movs	r3, #0
 800405a:	930a      	str	r3, [sp, #40]	@ 0x28
 800405c:	e779      	b.n	8003f52 <_dtoa_r+0x7fa>
 800405e:	d093      	beq.n	8003f88 <_dtoa_r+0x830>
 8004060:	9a04      	ldr	r2, [sp, #16]
 8004062:	331c      	adds	r3, #28
 8004064:	441a      	add	r2, r3
 8004066:	9204      	str	r2, [sp, #16]
 8004068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800406a:	441e      	add	r6, r3
 800406c:	441a      	add	r2, r3
 800406e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004070:	e78a      	b.n	8003f88 <_dtoa_r+0x830>
 8004072:	4603      	mov	r3, r0
 8004074:	e7f4      	b.n	8004060 <_dtoa_r+0x908>
 8004076:	9b08      	ldr	r3, [sp, #32]
 8004078:	46b8      	mov	r8, r7
 800407a:	2b00      	cmp	r3, #0
 800407c:	dc20      	bgt.n	80040c0 <_dtoa_r+0x968>
 800407e:	469b      	mov	fp, r3
 8004080:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004082:	2b02      	cmp	r3, #2
 8004084:	dd1e      	ble.n	80040c4 <_dtoa_r+0x96c>
 8004086:	f1bb 0f00 	cmp.w	fp, #0
 800408a:	f47f adb1 	bne.w	8003bf0 <_dtoa_r+0x498>
 800408e:	4621      	mov	r1, r4
 8004090:	465b      	mov	r3, fp
 8004092:	2205      	movs	r2, #5
 8004094:	4648      	mov	r0, r9
 8004096:	f000 fa93 	bl	80045c0 <__multadd>
 800409a:	4601      	mov	r1, r0
 800409c:	4604      	mov	r4, r0
 800409e:	9803      	ldr	r0, [sp, #12]
 80040a0:	f000 fc9e 	bl	80049e0 <__mcmp>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f77f ada3 	ble.w	8003bf0 <_dtoa_r+0x498>
 80040aa:	4656      	mov	r6, sl
 80040ac:	2331      	movs	r3, #49	@ 0x31
 80040ae:	f108 0801 	add.w	r8, r8, #1
 80040b2:	f806 3b01 	strb.w	r3, [r6], #1
 80040b6:	e59f      	b.n	8003bf8 <_dtoa_r+0x4a0>
 80040b8:	46b8      	mov	r8, r7
 80040ba:	9c08      	ldr	r4, [sp, #32]
 80040bc:	4625      	mov	r5, r4
 80040be:	e7f4      	b.n	80040aa <_dtoa_r+0x952>
 80040c0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80040c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8101 	beq.w	80042ce <_dtoa_r+0xb76>
 80040cc:	2e00      	cmp	r6, #0
 80040ce:	dd05      	ble.n	80040dc <_dtoa_r+0x984>
 80040d0:	4629      	mov	r1, r5
 80040d2:	4632      	mov	r2, r6
 80040d4:	4648      	mov	r0, r9
 80040d6:	f000 fc17 	bl	8004908 <__lshift>
 80040da:	4605      	mov	r5, r0
 80040dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d05c      	beq.n	800419c <_dtoa_r+0xa44>
 80040e2:	4648      	mov	r0, r9
 80040e4:	6869      	ldr	r1, [r5, #4]
 80040e6:	f000 fa09 	bl	80044fc <_Balloc>
 80040ea:	4606      	mov	r6, r0
 80040ec:	b928      	cbnz	r0, 80040fa <_dtoa_r+0x9a2>
 80040ee:	4602      	mov	r2, r0
 80040f0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80040f4:	4b80      	ldr	r3, [pc, #512]	@ (80042f8 <_dtoa_r+0xba0>)
 80040f6:	f7ff bb43 	b.w	8003780 <_dtoa_r+0x28>
 80040fa:	692a      	ldr	r2, [r5, #16]
 80040fc:	f105 010c 	add.w	r1, r5, #12
 8004100:	3202      	adds	r2, #2
 8004102:	0092      	lsls	r2, r2, #2
 8004104:	300c      	adds	r0, #12
 8004106:	f000 fe2b 	bl	8004d60 <memcpy>
 800410a:	2201      	movs	r2, #1
 800410c:	4631      	mov	r1, r6
 800410e:	4648      	mov	r0, r9
 8004110:	f000 fbfa 	bl	8004908 <__lshift>
 8004114:	462f      	mov	r7, r5
 8004116:	4605      	mov	r5, r0
 8004118:	f10a 0301 	add.w	r3, sl, #1
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	eb0a 030b 	add.w	r3, sl, fp
 8004122:	930a      	str	r3, [sp, #40]	@ 0x28
 8004124:	9b06      	ldr	r3, [sp, #24]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	9309      	str	r3, [sp, #36]	@ 0x24
 800412c:	9b04      	ldr	r3, [sp, #16]
 800412e:	4621      	mov	r1, r4
 8004130:	9803      	ldr	r0, [sp, #12]
 8004132:	f103 3bff 	add.w	fp, r3, #4294967295
 8004136:	f7ff fa84 	bl	8003642 <quorem>
 800413a:	4603      	mov	r3, r0
 800413c:	4639      	mov	r1, r7
 800413e:	3330      	adds	r3, #48	@ 0x30
 8004140:	9006      	str	r0, [sp, #24]
 8004142:	9803      	ldr	r0, [sp, #12]
 8004144:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004146:	f000 fc4b 	bl	80049e0 <__mcmp>
 800414a:	462a      	mov	r2, r5
 800414c:	9008      	str	r0, [sp, #32]
 800414e:	4621      	mov	r1, r4
 8004150:	4648      	mov	r0, r9
 8004152:	f000 fc61 	bl	8004a18 <__mdiff>
 8004156:	68c2      	ldr	r2, [r0, #12]
 8004158:	4606      	mov	r6, r0
 800415a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800415c:	bb02      	cbnz	r2, 80041a0 <_dtoa_r+0xa48>
 800415e:	4601      	mov	r1, r0
 8004160:	9803      	ldr	r0, [sp, #12]
 8004162:	f000 fc3d 	bl	80049e0 <__mcmp>
 8004166:	4602      	mov	r2, r0
 8004168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800416a:	4631      	mov	r1, r6
 800416c:	4648      	mov	r0, r9
 800416e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004172:	f000 fa03 	bl	800457c <_Bfree>
 8004176:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004178:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800417a:	9e04      	ldr	r6, [sp, #16]
 800417c:	ea42 0103 	orr.w	r1, r2, r3
 8004180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004182:	4319      	orrs	r1, r3
 8004184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004186:	d10d      	bne.n	80041a4 <_dtoa_r+0xa4c>
 8004188:	2b39      	cmp	r3, #57	@ 0x39
 800418a:	d027      	beq.n	80041dc <_dtoa_r+0xa84>
 800418c:	9a08      	ldr	r2, [sp, #32]
 800418e:	2a00      	cmp	r2, #0
 8004190:	dd01      	ble.n	8004196 <_dtoa_r+0xa3e>
 8004192:	9b06      	ldr	r3, [sp, #24]
 8004194:	3331      	adds	r3, #49	@ 0x31
 8004196:	f88b 3000 	strb.w	r3, [fp]
 800419a:	e52e      	b.n	8003bfa <_dtoa_r+0x4a2>
 800419c:	4628      	mov	r0, r5
 800419e:	e7b9      	b.n	8004114 <_dtoa_r+0x9bc>
 80041a0:	2201      	movs	r2, #1
 80041a2:	e7e2      	b.n	800416a <_dtoa_r+0xa12>
 80041a4:	9908      	ldr	r1, [sp, #32]
 80041a6:	2900      	cmp	r1, #0
 80041a8:	db04      	blt.n	80041b4 <_dtoa_r+0xa5c>
 80041aa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80041ac:	4301      	orrs	r1, r0
 80041ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041b0:	4301      	orrs	r1, r0
 80041b2:	d120      	bne.n	80041f6 <_dtoa_r+0xa9e>
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	ddee      	ble.n	8004196 <_dtoa_r+0xa3e>
 80041b8:	2201      	movs	r2, #1
 80041ba:	9903      	ldr	r1, [sp, #12]
 80041bc:	4648      	mov	r0, r9
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	f000 fba2 	bl	8004908 <__lshift>
 80041c4:	4621      	mov	r1, r4
 80041c6:	9003      	str	r0, [sp, #12]
 80041c8:	f000 fc0a 	bl	80049e0 <__mcmp>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	9b04      	ldr	r3, [sp, #16]
 80041d0:	dc02      	bgt.n	80041d8 <_dtoa_r+0xa80>
 80041d2:	d1e0      	bne.n	8004196 <_dtoa_r+0xa3e>
 80041d4:	07da      	lsls	r2, r3, #31
 80041d6:	d5de      	bpl.n	8004196 <_dtoa_r+0xa3e>
 80041d8:	2b39      	cmp	r3, #57	@ 0x39
 80041da:	d1da      	bne.n	8004192 <_dtoa_r+0xa3a>
 80041dc:	2339      	movs	r3, #57	@ 0x39
 80041de:	f88b 3000 	strb.w	r3, [fp]
 80041e2:	4633      	mov	r3, r6
 80041e4:	461e      	mov	r6, r3
 80041e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	2a39      	cmp	r2, #57	@ 0x39
 80041ee:	d04e      	beq.n	800428e <_dtoa_r+0xb36>
 80041f0:	3201      	adds	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	e501      	b.n	8003bfa <_dtoa_r+0x4a2>
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	dd03      	ble.n	8004202 <_dtoa_r+0xaaa>
 80041fa:	2b39      	cmp	r3, #57	@ 0x39
 80041fc:	d0ee      	beq.n	80041dc <_dtoa_r+0xa84>
 80041fe:	3301      	adds	r3, #1
 8004200:	e7c9      	b.n	8004196 <_dtoa_r+0xa3e>
 8004202:	9a04      	ldr	r2, [sp, #16]
 8004204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800420a:	428a      	cmp	r2, r1
 800420c:	d028      	beq.n	8004260 <_dtoa_r+0xb08>
 800420e:	2300      	movs	r3, #0
 8004210:	220a      	movs	r2, #10
 8004212:	9903      	ldr	r1, [sp, #12]
 8004214:	4648      	mov	r0, r9
 8004216:	f000 f9d3 	bl	80045c0 <__multadd>
 800421a:	42af      	cmp	r7, r5
 800421c:	9003      	str	r0, [sp, #12]
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f04f 020a 	mov.w	r2, #10
 8004226:	4639      	mov	r1, r7
 8004228:	4648      	mov	r0, r9
 800422a:	d107      	bne.n	800423c <_dtoa_r+0xae4>
 800422c:	f000 f9c8 	bl	80045c0 <__multadd>
 8004230:	4607      	mov	r7, r0
 8004232:	4605      	mov	r5, r0
 8004234:	9b04      	ldr	r3, [sp, #16]
 8004236:	3301      	adds	r3, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	e777      	b.n	800412c <_dtoa_r+0x9d4>
 800423c:	f000 f9c0 	bl	80045c0 <__multadd>
 8004240:	4629      	mov	r1, r5
 8004242:	4607      	mov	r7, r0
 8004244:	2300      	movs	r3, #0
 8004246:	220a      	movs	r2, #10
 8004248:	4648      	mov	r0, r9
 800424a:	f000 f9b9 	bl	80045c0 <__multadd>
 800424e:	4605      	mov	r5, r0
 8004250:	e7f0      	b.n	8004234 <_dtoa_r+0xadc>
 8004252:	f1bb 0f00 	cmp.w	fp, #0
 8004256:	bfcc      	ite	gt
 8004258:	465e      	movgt	r6, fp
 800425a:	2601      	movle	r6, #1
 800425c:	2700      	movs	r7, #0
 800425e:	4456      	add	r6, sl
 8004260:	2201      	movs	r2, #1
 8004262:	9903      	ldr	r1, [sp, #12]
 8004264:	4648      	mov	r0, r9
 8004266:	9304      	str	r3, [sp, #16]
 8004268:	f000 fb4e 	bl	8004908 <__lshift>
 800426c:	4621      	mov	r1, r4
 800426e:	9003      	str	r0, [sp, #12]
 8004270:	f000 fbb6 	bl	80049e0 <__mcmp>
 8004274:	2800      	cmp	r0, #0
 8004276:	dcb4      	bgt.n	80041e2 <_dtoa_r+0xa8a>
 8004278:	d102      	bne.n	8004280 <_dtoa_r+0xb28>
 800427a:	9b04      	ldr	r3, [sp, #16]
 800427c:	07db      	lsls	r3, r3, #31
 800427e:	d4b0      	bmi.n	80041e2 <_dtoa_r+0xa8a>
 8004280:	4633      	mov	r3, r6
 8004282:	461e      	mov	r6, r3
 8004284:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004288:	2a30      	cmp	r2, #48	@ 0x30
 800428a:	d0fa      	beq.n	8004282 <_dtoa_r+0xb2a>
 800428c:	e4b5      	b.n	8003bfa <_dtoa_r+0x4a2>
 800428e:	459a      	cmp	sl, r3
 8004290:	d1a8      	bne.n	80041e4 <_dtoa_r+0xa8c>
 8004292:	2331      	movs	r3, #49	@ 0x31
 8004294:	f108 0801 	add.w	r8, r8, #1
 8004298:	f88a 3000 	strb.w	r3, [sl]
 800429c:	e4ad      	b.n	8003bfa <_dtoa_r+0x4a2>
 800429e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80042fc <_dtoa_r+0xba4>
 80042a4:	b11b      	cbz	r3, 80042ae <_dtoa_r+0xb56>
 80042a6:	f10a 0308 	add.w	r3, sl, #8
 80042aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4650      	mov	r0, sl
 80042b0:	b017      	add	sp, #92	@ 0x5c
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f77f ae2e 	ble.w	8003f1a <_dtoa_r+0x7c2>
 80042be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80042c2:	2001      	movs	r0, #1
 80042c4:	e64d      	b.n	8003f62 <_dtoa_r+0x80a>
 80042c6:	f1bb 0f00 	cmp.w	fp, #0
 80042ca:	f77f aed9 	ble.w	8004080 <_dtoa_r+0x928>
 80042ce:	4656      	mov	r6, sl
 80042d0:	4621      	mov	r1, r4
 80042d2:	9803      	ldr	r0, [sp, #12]
 80042d4:	f7ff f9b5 	bl	8003642 <quorem>
 80042d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80042dc:	f806 3b01 	strb.w	r3, [r6], #1
 80042e0:	eba6 020a 	sub.w	r2, r6, sl
 80042e4:	4593      	cmp	fp, r2
 80042e6:	ddb4      	ble.n	8004252 <_dtoa_r+0xafa>
 80042e8:	2300      	movs	r3, #0
 80042ea:	220a      	movs	r2, #10
 80042ec:	4648      	mov	r0, r9
 80042ee:	9903      	ldr	r1, [sp, #12]
 80042f0:	f000 f966 	bl	80045c0 <__multadd>
 80042f4:	9003      	str	r0, [sp, #12]
 80042f6:	e7eb      	b.n	80042d0 <_dtoa_r+0xb78>
 80042f8:	0800547a 	.word	0x0800547a
 80042fc:	080053fe 	.word	0x080053fe

08004300 <_free_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4605      	mov	r5, r0
 8004304:	2900      	cmp	r1, #0
 8004306:	d040      	beq.n	800438a <_free_r+0x8a>
 8004308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800430c:	1f0c      	subs	r4, r1, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfb8      	it	lt
 8004312:	18e4      	addlt	r4, r4, r3
 8004314:	f000 f8e6 	bl	80044e4 <__malloc_lock>
 8004318:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <_free_r+0x8c>)
 800431a:	6813      	ldr	r3, [r2, #0]
 800431c:	b933      	cbnz	r3, 800432c <_free_r+0x2c>
 800431e:	6063      	str	r3, [r4, #4]
 8004320:	6014      	str	r4, [r2, #0]
 8004322:	4628      	mov	r0, r5
 8004324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004328:	f000 b8e2 	b.w	80044f0 <__malloc_unlock>
 800432c:	42a3      	cmp	r3, r4
 800432e:	d908      	bls.n	8004342 <_free_r+0x42>
 8004330:	6820      	ldr	r0, [r4, #0]
 8004332:	1821      	adds	r1, r4, r0
 8004334:	428b      	cmp	r3, r1
 8004336:	bf01      	itttt	eq
 8004338:	6819      	ldreq	r1, [r3, #0]
 800433a:	685b      	ldreq	r3, [r3, #4]
 800433c:	1809      	addeq	r1, r1, r0
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	e7ed      	b.n	800431e <_free_r+0x1e>
 8004342:	461a      	mov	r2, r3
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	b10b      	cbz	r3, 800434c <_free_r+0x4c>
 8004348:	42a3      	cmp	r3, r4
 800434a:	d9fa      	bls.n	8004342 <_free_r+0x42>
 800434c:	6811      	ldr	r1, [r2, #0]
 800434e:	1850      	adds	r0, r2, r1
 8004350:	42a0      	cmp	r0, r4
 8004352:	d10b      	bne.n	800436c <_free_r+0x6c>
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	4401      	add	r1, r0
 8004358:	1850      	adds	r0, r2, r1
 800435a:	4283      	cmp	r3, r0
 800435c:	6011      	str	r1, [r2, #0]
 800435e:	d1e0      	bne.n	8004322 <_free_r+0x22>
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4408      	add	r0, r1
 8004366:	6010      	str	r0, [r2, #0]
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	e7da      	b.n	8004322 <_free_r+0x22>
 800436c:	d902      	bls.n	8004374 <_free_r+0x74>
 800436e:	230c      	movs	r3, #12
 8004370:	602b      	str	r3, [r5, #0]
 8004372:	e7d6      	b.n	8004322 <_free_r+0x22>
 8004374:	6820      	ldr	r0, [r4, #0]
 8004376:	1821      	adds	r1, r4, r0
 8004378:	428b      	cmp	r3, r1
 800437a:	bf01      	itttt	eq
 800437c:	6819      	ldreq	r1, [r3, #0]
 800437e:	685b      	ldreq	r3, [r3, #4]
 8004380:	1809      	addeq	r1, r1, r0
 8004382:	6021      	streq	r1, [r4, #0]
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6054      	str	r4, [r2, #4]
 8004388:	e7cb      	b.n	8004322 <_free_r+0x22>
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	2000038c 	.word	0x2000038c

08004390 <malloc>:
 8004390:	4b02      	ldr	r3, [pc, #8]	@ (800439c <malloc+0xc>)
 8004392:	4601      	mov	r1, r0
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f000 b825 	b.w	80043e4 <_malloc_r>
 800439a:	bf00      	nop
 800439c:	20000018 	.word	0x20000018

080043a0 <sbrk_aligned>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4e0f      	ldr	r6, [pc, #60]	@ (80043e0 <sbrk_aligned+0x40>)
 80043a4:	460c      	mov	r4, r1
 80043a6:	6831      	ldr	r1, [r6, #0]
 80043a8:	4605      	mov	r5, r0
 80043aa:	b911      	cbnz	r1, 80043b2 <sbrk_aligned+0x12>
 80043ac:	f000 fcc8 	bl	8004d40 <_sbrk_r>
 80043b0:	6030      	str	r0, [r6, #0]
 80043b2:	4621      	mov	r1, r4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fcc3 	bl	8004d40 <_sbrk_r>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d103      	bne.n	80043c6 <sbrk_aligned+0x26>
 80043be:	f04f 34ff 	mov.w	r4, #4294967295
 80043c2:	4620      	mov	r0, r4
 80043c4:	bd70      	pop	{r4, r5, r6, pc}
 80043c6:	1cc4      	adds	r4, r0, #3
 80043c8:	f024 0403 	bic.w	r4, r4, #3
 80043cc:	42a0      	cmp	r0, r4
 80043ce:	d0f8      	beq.n	80043c2 <sbrk_aligned+0x22>
 80043d0:	1a21      	subs	r1, r4, r0
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 fcb4 	bl	8004d40 <_sbrk_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d1f2      	bne.n	80043c2 <sbrk_aligned+0x22>
 80043dc:	e7ef      	b.n	80043be <sbrk_aligned+0x1e>
 80043de:	bf00      	nop
 80043e0:	20000388 	.word	0x20000388

080043e4 <_malloc_r>:
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	1ccd      	adds	r5, r1, #3
 80043ea:	f025 0503 	bic.w	r5, r5, #3
 80043ee:	3508      	adds	r5, #8
 80043f0:	2d0c      	cmp	r5, #12
 80043f2:	bf38      	it	cc
 80043f4:	250c      	movcc	r5, #12
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	4606      	mov	r6, r0
 80043fa:	db01      	blt.n	8004400 <_malloc_r+0x1c>
 80043fc:	42a9      	cmp	r1, r5
 80043fe:	d904      	bls.n	800440a <_malloc_r+0x26>
 8004400:	230c      	movs	r3, #12
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	2000      	movs	r0, #0
 8004406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044e0 <_malloc_r+0xfc>
 800440e:	f000 f869 	bl	80044e4 <__malloc_lock>
 8004412:	f8d8 3000 	ldr.w	r3, [r8]
 8004416:	461c      	mov	r4, r3
 8004418:	bb44      	cbnz	r4, 800446c <_malloc_r+0x88>
 800441a:	4629      	mov	r1, r5
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff ffbf 	bl	80043a0 <sbrk_aligned>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	4604      	mov	r4, r0
 8004426:	d158      	bne.n	80044da <_malloc_r+0xf6>
 8004428:	f8d8 4000 	ldr.w	r4, [r8]
 800442c:	4627      	mov	r7, r4
 800442e:	2f00      	cmp	r7, #0
 8004430:	d143      	bne.n	80044ba <_malloc_r+0xd6>
 8004432:	2c00      	cmp	r4, #0
 8004434:	d04b      	beq.n	80044ce <_malloc_r+0xea>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	4639      	mov	r1, r7
 800443a:	4630      	mov	r0, r6
 800443c:	eb04 0903 	add.w	r9, r4, r3
 8004440:	f000 fc7e 	bl	8004d40 <_sbrk_r>
 8004444:	4581      	cmp	r9, r0
 8004446:	d142      	bne.n	80044ce <_malloc_r+0xea>
 8004448:	6821      	ldr	r1, [r4, #0]
 800444a:	4630      	mov	r0, r6
 800444c:	1a6d      	subs	r5, r5, r1
 800444e:	4629      	mov	r1, r5
 8004450:	f7ff ffa6 	bl	80043a0 <sbrk_aligned>
 8004454:	3001      	adds	r0, #1
 8004456:	d03a      	beq.n	80044ce <_malloc_r+0xea>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	442b      	add	r3, r5
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	f8d8 3000 	ldr.w	r3, [r8]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	bb62      	cbnz	r2, 80044c0 <_malloc_r+0xdc>
 8004466:	f8c8 7000 	str.w	r7, [r8]
 800446a:	e00f      	b.n	800448c <_malloc_r+0xa8>
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	1b52      	subs	r2, r2, r5
 8004470:	d420      	bmi.n	80044b4 <_malloc_r+0xd0>
 8004472:	2a0b      	cmp	r2, #11
 8004474:	d917      	bls.n	80044a6 <_malloc_r+0xc2>
 8004476:	1961      	adds	r1, r4, r5
 8004478:	42a3      	cmp	r3, r4
 800447a:	6025      	str	r5, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	6059      	strne	r1, [r3, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	bf08      	it	eq
 8004484:	f8c8 1000 	streq.w	r1, [r8]
 8004488:	5162      	str	r2, [r4, r5]
 800448a:	604b      	str	r3, [r1, #4]
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f82f 	bl	80044f0 <__malloc_unlock>
 8004492:	f104 000b 	add.w	r0, r4, #11
 8004496:	1d23      	adds	r3, r4, #4
 8004498:	f020 0007 	bic.w	r0, r0, #7
 800449c:	1ac2      	subs	r2, r0, r3
 800449e:	bf1c      	itt	ne
 80044a0:	1a1b      	subne	r3, r3, r0
 80044a2:	50a3      	strne	r3, [r4, r2]
 80044a4:	e7af      	b.n	8004406 <_malloc_r+0x22>
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	bf0c      	ite	eq
 80044ac:	f8c8 2000 	streq.w	r2, [r8]
 80044b0:	605a      	strne	r2, [r3, #4]
 80044b2:	e7eb      	b.n	800448c <_malloc_r+0xa8>
 80044b4:	4623      	mov	r3, r4
 80044b6:	6864      	ldr	r4, [r4, #4]
 80044b8:	e7ae      	b.n	8004418 <_malloc_r+0x34>
 80044ba:	463c      	mov	r4, r7
 80044bc:	687f      	ldr	r7, [r7, #4]
 80044be:	e7b6      	b.n	800442e <_malloc_r+0x4a>
 80044c0:	461a      	mov	r2, r3
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d1fb      	bne.n	80044c0 <_malloc_r+0xdc>
 80044c8:	2300      	movs	r3, #0
 80044ca:	6053      	str	r3, [r2, #4]
 80044cc:	e7de      	b.n	800448c <_malloc_r+0xa8>
 80044ce:	230c      	movs	r3, #12
 80044d0:	4630      	mov	r0, r6
 80044d2:	6033      	str	r3, [r6, #0]
 80044d4:	f000 f80c 	bl	80044f0 <__malloc_unlock>
 80044d8:	e794      	b.n	8004404 <_malloc_r+0x20>
 80044da:	6005      	str	r5, [r0, #0]
 80044dc:	e7d6      	b.n	800448c <_malloc_r+0xa8>
 80044de:	bf00      	nop
 80044e0:	2000038c 	.word	0x2000038c

080044e4 <__malloc_lock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	@ (80044ec <__malloc_lock+0x8>)
 80044e6:	f7ff b89c 	b.w	8003622 <__retarget_lock_acquire_recursive>
 80044ea:	bf00      	nop
 80044ec:	20000384 	.word	0x20000384

080044f0 <__malloc_unlock>:
 80044f0:	4801      	ldr	r0, [pc, #4]	@ (80044f8 <__malloc_unlock+0x8>)
 80044f2:	f7ff b897 	b.w	8003624 <__retarget_lock_release_recursive>
 80044f6:	bf00      	nop
 80044f8:	20000384 	.word	0x20000384

080044fc <_Balloc>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	69c6      	ldr	r6, [r0, #28]
 8004500:	4604      	mov	r4, r0
 8004502:	460d      	mov	r5, r1
 8004504:	b976      	cbnz	r6, 8004524 <_Balloc+0x28>
 8004506:	2010      	movs	r0, #16
 8004508:	f7ff ff42 	bl	8004390 <malloc>
 800450c:	4602      	mov	r2, r0
 800450e:	61e0      	str	r0, [r4, #28]
 8004510:	b920      	cbnz	r0, 800451c <_Balloc+0x20>
 8004512:	216b      	movs	r1, #107	@ 0x6b
 8004514:	4b17      	ldr	r3, [pc, #92]	@ (8004574 <_Balloc+0x78>)
 8004516:	4818      	ldr	r0, [pc, #96]	@ (8004578 <_Balloc+0x7c>)
 8004518:	f000 fc30 	bl	8004d7c <__assert_func>
 800451c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004520:	6006      	str	r6, [r0, #0]
 8004522:	60c6      	str	r6, [r0, #12]
 8004524:	69e6      	ldr	r6, [r4, #28]
 8004526:	68f3      	ldr	r3, [r6, #12]
 8004528:	b183      	cbz	r3, 800454c <_Balloc+0x50>
 800452a:	69e3      	ldr	r3, [r4, #28]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004532:	b9b8      	cbnz	r0, 8004564 <_Balloc+0x68>
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f605 	lsl.w	r6, r1, r5
 800453a:	1d72      	adds	r2, r6, #5
 800453c:	4620      	mov	r0, r4
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	f000 fc3a 	bl	8004db8 <_calloc_r>
 8004544:	b160      	cbz	r0, 8004560 <_Balloc+0x64>
 8004546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800454a:	e00e      	b.n	800456a <_Balloc+0x6e>
 800454c:	2221      	movs	r2, #33	@ 0x21
 800454e:	2104      	movs	r1, #4
 8004550:	4620      	mov	r0, r4
 8004552:	f000 fc31 	bl	8004db8 <_calloc_r>
 8004556:	69e3      	ldr	r3, [r4, #28]
 8004558:	60f0      	str	r0, [r6, #12]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e4      	bne.n	800452a <_Balloc+0x2e>
 8004560:	2000      	movs	r0, #0
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	6802      	ldr	r2, [r0, #0]
 8004566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800456a:	2300      	movs	r3, #0
 800456c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004570:	e7f7      	b.n	8004562 <_Balloc+0x66>
 8004572:	bf00      	nop
 8004574:	0800540b 	.word	0x0800540b
 8004578:	0800548b 	.word	0x0800548b

0800457c <_Bfree>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	69c6      	ldr	r6, [r0, #28]
 8004580:	4605      	mov	r5, r0
 8004582:	460c      	mov	r4, r1
 8004584:	b976      	cbnz	r6, 80045a4 <_Bfree+0x28>
 8004586:	2010      	movs	r0, #16
 8004588:	f7ff ff02 	bl	8004390 <malloc>
 800458c:	4602      	mov	r2, r0
 800458e:	61e8      	str	r0, [r5, #28]
 8004590:	b920      	cbnz	r0, 800459c <_Bfree+0x20>
 8004592:	218f      	movs	r1, #143	@ 0x8f
 8004594:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <_Bfree+0x3c>)
 8004596:	4809      	ldr	r0, [pc, #36]	@ (80045bc <_Bfree+0x40>)
 8004598:	f000 fbf0 	bl	8004d7c <__assert_func>
 800459c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045a0:	6006      	str	r6, [r0, #0]
 80045a2:	60c6      	str	r6, [r0, #12]
 80045a4:	b13c      	cbz	r4, 80045b6 <_Bfree+0x3a>
 80045a6:	69eb      	ldr	r3, [r5, #28]
 80045a8:	6862      	ldr	r2, [r4, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045b0:	6021      	str	r1, [r4, #0]
 80045b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045b6:	bd70      	pop	{r4, r5, r6, pc}
 80045b8:	0800540b 	.word	0x0800540b
 80045bc:	0800548b 	.word	0x0800548b

080045c0 <__multadd>:
 80045c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c4:	4607      	mov	r7, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	461e      	mov	r6, r3
 80045ca:	2000      	movs	r0, #0
 80045cc:	690d      	ldr	r5, [r1, #16]
 80045ce:	f101 0c14 	add.w	ip, r1, #20
 80045d2:	f8dc 3000 	ldr.w	r3, [ip]
 80045d6:	3001      	adds	r0, #1
 80045d8:	b299      	uxth	r1, r3
 80045da:	fb02 6101 	mla	r1, r2, r1, r6
 80045de:	0c1e      	lsrs	r6, r3, #16
 80045e0:	0c0b      	lsrs	r3, r1, #16
 80045e2:	fb02 3306 	mla	r3, r2, r6, r3
 80045e6:	b289      	uxth	r1, r1
 80045e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80045ec:	4285      	cmp	r5, r0
 80045ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80045f2:	f84c 1b04 	str.w	r1, [ip], #4
 80045f6:	dcec      	bgt.n	80045d2 <__multadd+0x12>
 80045f8:	b30e      	cbz	r6, 800463e <__multadd+0x7e>
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc19      	bgt.n	8004634 <__multadd+0x74>
 8004600:	6861      	ldr	r1, [r4, #4]
 8004602:	4638      	mov	r0, r7
 8004604:	3101      	adds	r1, #1
 8004606:	f7ff ff79 	bl	80044fc <_Balloc>
 800460a:	4680      	mov	r8, r0
 800460c:	b928      	cbnz	r0, 800461a <__multadd+0x5a>
 800460e:	4602      	mov	r2, r0
 8004610:	21ba      	movs	r1, #186	@ 0xba
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <__multadd+0x84>)
 8004614:	480c      	ldr	r0, [pc, #48]	@ (8004648 <__multadd+0x88>)
 8004616:	f000 fbb1 	bl	8004d7c <__assert_func>
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	f104 010c 	add.w	r1, r4, #12
 8004620:	3202      	adds	r2, #2
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	300c      	adds	r0, #12
 8004626:	f000 fb9b 	bl	8004d60 <memcpy>
 800462a:	4621      	mov	r1, r4
 800462c:	4638      	mov	r0, r7
 800462e:	f7ff ffa5 	bl	800457c <_Bfree>
 8004632:	4644      	mov	r4, r8
 8004634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004638:	3501      	adds	r5, #1
 800463a:	615e      	str	r6, [r3, #20]
 800463c:	6125      	str	r5, [r4, #16]
 800463e:	4620      	mov	r0, r4
 8004640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004644:	0800547a 	.word	0x0800547a
 8004648:	0800548b 	.word	0x0800548b

0800464c <__hi0bits>:
 800464c:	4603      	mov	r3, r0
 800464e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004652:	bf3a      	itte	cc
 8004654:	0403      	lslcc	r3, r0, #16
 8004656:	2010      	movcc	r0, #16
 8004658:	2000      	movcs	r0, #0
 800465a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800465e:	bf3c      	itt	cc
 8004660:	021b      	lslcc	r3, r3, #8
 8004662:	3008      	addcc	r0, #8
 8004664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004668:	bf3c      	itt	cc
 800466a:	011b      	lslcc	r3, r3, #4
 800466c:	3004      	addcc	r0, #4
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	bf3c      	itt	cc
 8004674:	009b      	lslcc	r3, r3, #2
 8004676:	3002      	addcc	r0, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	db05      	blt.n	8004688 <__hi0bits+0x3c>
 800467c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004680:	f100 0001 	add.w	r0, r0, #1
 8004684:	bf08      	it	eq
 8004686:	2020      	moveq	r0, #32
 8004688:	4770      	bx	lr

0800468a <__lo0bits>:
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	4602      	mov	r2, r0
 800468e:	f013 0007 	ands.w	r0, r3, #7
 8004692:	d00b      	beq.n	80046ac <__lo0bits+0x22>
 8004694:	07d9      	lsls	r1, r3, #31
 8004696:	d421      	bmi.n	80046dc <__lo0bits+0x52>
 8004698:	0798      	lsls	r0, r3, #30
 800469a:	bf49      	itett	mi
 800469c:	085b      	lsrmi	r3, r3, #1
 800469e:	089b      	lsrpl	r3, r3, #2
 80046a0:	2001      	movmi	r0, #1
 80046a2:	6013      	strmi	r3, [r2, #0]
 80046a4:	bf5c      	itt	pl
 80046a6:	2002      	movpl	r0, #2
 80046a8:	6013      	strpl	r3, [r2, #0]
 80046aa:	4770      	bx	lr
 80046ac:	b299      	uxth	r1, r3
 80046ae:	b909      	cbnz	r1, 80046b4 <__lo0bits+0x2a>
 80046b0:	2010      	movs	r0, #16
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2d9      	uxtb	r1, r3
 80046b6:	b909      	cbnz	r1, 80046bc <__lo0bits+0x32>
 80046b8:	3008      	adds	r0, #8
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	0719      	lsls	r1, r3, #28
 80046be:	bf04      	itt	eq
 80046c0:	091b      	lsreq	r3, r3, #4
 80046c2:	3004      	addeq	r0, #4
 80046c4:	0799      	lsls	r1, r3, #30
 80046c6:	bf04      	itt	eq
 80046c8:	089b      	lsreq	r3, r3, #2
 80046ca:	3002      	addeq	r0, #2
 80046cc:	07d9      	lsls	r1, r3, #31
 80046ce:	d403      	bmi.n	80046d8 <__lo0bits+0x4e>
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	f100 0001 	add.w	r0, r0, #1
 80046d6:	d003      	beq.n	80046e0 <__lo0bits+0x56>
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4770      	bx	lr
 80046dc:	2000      	movs	r0, #0
 80046de:	4770      	bx	lr
 80046e0:	2020      	movs	r0, #32
 80046e2:	4770      	bx	lr

080046e4 <__i2b>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	2101      	movs	r1, #1
 80046ea:	f7ff ff07 	bl	80044fc <_Balloc>
 80046ee:	4602      	mov	r2, r0
 80046f0:	b928      	cbnz	r0, 80046fe <__i2b+0x1a>
 80046f2:	f240 1145 	movw	r1, #325	@ 0x145
 80046f6:	4b04      	ldr	r3, [pc, #16]	@ (8004708 <__i2b+0x24>)
 80046f8:	4804      	ldr	r0, [pc, #16]	@ (800470c <__i2b+0x28>)
 80046fa:	f000 fb3f 	bl	8004d7c <__assert_func>
 80046fe:	2301      	movs	r3, #1
 8004700:	6144      	str	r4, [r0, #20]
 8004702:	6103      	str	r3, [r0, #16]
 8004704:	bd10      	pop	{r4, pc}
 8004706:	bf00      	nop
 8004708:	0800547a 	.word	0x0800547a
 800470c:	0800548b 	.word	0x0800548b

08004710 <__multiply>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4617      	mov	r7, r2
 8004716:	690a      	ldr	r2, [r1, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4689      	mov	r9, r1
 800471c:	429a      	cmp	r2, r3
 800471e:	bfa2      	ittt	ge
 8004720:	463b      	movge	r3, r7
 8004722:	460f      	movge	r7, r1
 8004724:	4699      	movge	r9, r3
 8004726:	693d      	ldr	r5, [r7, #16]
 8004728:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	eb05 060a 	add.w	r6, r5, sl
 8004734:	42b3      	cmp	r3, r6
 8004736:	b085      	sub	sp, #20
 8004738:	bfb8      	it	lt
 800473a:	3101      	addlt	r1, #1
 800473c:	f7ff fede 	bl	80044fc <_Balloc>
 8004740:	b930      	cbnz	r0, 8004750 <__multiply+0x40>
 8004742:	4602      	mov	r2, r0
 8004744:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004748:	4b40      	ldr	r3, [pc, #256]	@ (800484c <__multiply+0x13c>)
 800474a:	4841      	ldr	r0, [pc, #260]	@ (8004850 <__multiply+0x140>)
 800474c:	f000 fb16 	bl	8004d7c <__assert_func>
 8004750:	f100 0414 	add.w	r4, r0, #20
 8004754:	4623      	mov	r3, r4
 8004756:	2200      	movs	r2, #0
 8004758:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800475c:	4573      	cmp	r3, lr
 800475e:	d320      	bcc.n	80047a2 <__multiply+0x92>
 8004760:	f107 0814 	add.w	r8, r7, #20
 8004764:	f109 0114 	add.w	r1, r9, #20
 8004768:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800476c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	1beb      	subs	r3, r5, r7
 8004774:	3b15      	subs	r3, #21
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	3304      	adds	r3, #4
 800477c:	3715      	adds	r7, #21
 800477e:	42bd      	cmp	r5, r7
 8004780:	bf38      	it	cc
 8004782:	2304      	movcc	r3, #4
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	9103      	str	r1, [sp, #12]
 800478a:	428b      	cmp	r3, r1
 800478c:	d80c      	bhi.n	80047a8 <__multiply+0x98>
 800478e:	2e00      	cmp	r6, #0
 8004790:	dd03      	ble.n	800479a <__multiply+0x8a>
 8004792:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004796:	2b00      	cmp	r3, #0
 8004798:	d055      	beq.n	8004846 <__multiply+0x136>
 800479a:	6106      	str	r6, [r0, #16]
 800479c:	b005      	add	sp, #20
 800479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a2:	f843 2b04 	str.w	r2, [r3], #4
 80047a6:	e7d9      	b.n	800475c <__multiply+0x4c>
 80047a8:	f8b1 a000 	ldrh.w	sl, [r1]
 80047ac:	f1ba 0f00 	cmp.w	sl, #0
 80047b0:	d01f      	beq.n	80047f2 <__multiply+0xe2>
 80047b2:	46c4      	mov	ip, r8
 80047b4:	46a1      	mov	r9, r4
 80047b6:	2700      	movs	r7, #0
 80047b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80047bc:	f8d9 3000 	ldr.w	r3, [r9]
 80047c0:	fa1f fb82 	uxth.w	fp, r2
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	fb0a 330b 	mla	r3, sl, fp, r3
 80047ca:	443b      	add	r3, r7
 80047cc:	f8d9 7000 	ldr.w	r7, [r9]
 80047d0:	0c12      	lsrs	r2, r2, #16
 80047d2:	0c3f      	lsrs	r7, r7, #16
 80047d4:	fb0a 7202 	mla	r2, sl, r2, r7
 80047d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80047dc:	b29b      	uxth	r3, r3
 80047de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e2:	4565      	cmp	r5, ip
 80047e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80047e8:	f849 3b04 	str.w	r3, [r9], #4
 80047ec:	d8e4      	bhi.n	80047b8 <__multiply+0xa8>
 80047ee:	9b01      	ldr	r3, [sp, #4]
 80047f0:	50e7      	str	r7, [r4, r3]
 80047f2:	9b03      	ldr	r3, [sp, #12]
 80047f4:	3104      	adds	r1, #4
 80047f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	d020      	beq.n	8004842 <__multiply+0x132>
 8004800:	4647      	mov	r7, r8
 8004802:	46a4      	mov	ip, r4
 8004804:	f04f 0a00 	mov.w	sl, #0
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f8b7 b000 	ldrh.w	fp, [r7]
 800480e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004812:	b29b      	uxth	r3, r3
 8004814:	fb09 220b 	mla	r2, r9, fp, r2
 8004818:	4452      	add	r2, sl
 800481a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800481e:	f84c 3b04 	str.w	r3, [ip], #4
 8004822:	f857 3b04 	ldr.w	r3, [r7], #4
 8004826:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800482a:	f8bc 3000 	ldrh.w	r3, [ip]
 800482e:	42bd      	cmp	r5, r7
 8004830:	fb09 330a 	mla	r3, r9, sl, r3
 8004834:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800483c:	d8e5      	bhi.n	800480a <__multiply+0xfa>
 800483e:	9a01      	ldr	r2, [sp, #4]
 8004840:	50a3      	str	r3, [r4, r2]
 8004842:	3404      	adds	r4, #4
 8004844:	e79f      	b.n	8004786 <__multiply+0x76>
 8004846:	3e01      	subs	r6, #1
 8004848:	e7a1      	b.n	800478e <__multiply+0x7e>
 800484a:	bf00      	nop
 800484c:	0800547a 	.word	0x0800547a
 8004850:	0800548b 	.word	0x0800548b

08004854 <__pow5mult>:
 8004854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004858:	4615      	mov	r5, r2
 800485a:	f012 0203 	ands.w	r2, r2, #3
 800485e:	4607      	mov	r7, r0
 8004860:	460e      	mov	r6, r1
 8004862:	d007      	beq.n	8004874 <__pow5mult+0x20>
 8004864:	4c25      	ldr	r4, [pc, #148]	@ (80048fc <__pow5mult+0xa8>)
 8004866:	3a01      	subs	r2, #1
 8004868:	2300      	movs	r3, #0
 800486a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800486e:	f7ff fea7 	bl	80045c0 <__multadd>
 8004872:	4606      	mov	r6, r0
 8004874:	10ad      	asrs	r5, r5, #2
 8004876:	d03d      	beq.n	80048f4 <__pow5mult+0xa0>
 8004878:	69fc      	ldr	r4, [r7, #28]
 800487a:	b97c      	cbnz	r4, 800489c <__pow5mult+0x48>
 800487c:	2010      	movs	r0, #16
 800487e:	f7ff fd87 	bl	8004390 <malloc>
 8004882:	4602      	mov	r2, r0
 8004884:	61f8      	str	r0, [r7, #28]
 8004886:	b928      	cbnz	r0, 8004894 <__pow5mult+0x40>
 8004888:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800488c:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <__pow5mult+0xac>)
 800488e:	481d      	ldr	r0, [pc, #116]	@ (8004904 <__pow5mult+0xb0>)
 8004890:	f000 fa74 	bl	8004d7c <__assert_func>
 8004894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004898:	6004      	str	r4, [r0, #0]
 800489a:	60c4      	str	r4, [r0, #12]
 800489c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80048a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048a4:	b94c      	cbnz	r4, 80048ba <__pow5mult+0x66>
 80048a6:	f240 2171 	movw	r1, #625	@ 0x271
 80048aa:	4638      	mov	r0, r7
 80048ac:	f7ff ff1a 	bl	80046e4 <__i2b>
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80048b8:	6003      	str	r3, [r0, #0]
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	07eb      	lsls	r3, r5, #31
 80048c0:	d50a      	bpl.n	80048d8 <__pow5mult+0x84>
 80048c2:	4631      	mov	r1, r6
 80048c4:	4622      	mov	r2, r4
 80048c6:	4638      	mov	r0, r7
 80048c8:	f7ff ff22 	bl	8004710 <__multiply>
 80048cc:	4680      	mov	r8, r0
 80048ce:	4631      	mov	r1, r6
 80048d0:	4638      	mov	r0, r7
 80048d2:	f7ff fe53 	bl	800457c <_Bfree>
 80048d6:	4646      	mov	r6, r8
 80048d8:	106d      	asrs	r5, r5, #1
 80048da:	d00b      	beq.n	80048f4 <__pow5mult+0xa0>
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	b938      	cbnz	r0, 80048f0 <__pow5mult+0x9c>
 80048e0:	4622      	mov	r2, r4
 80048e2:	4621      	mov	r1, r4
 80048e4:	4638      	mov	r0, r7
 80048e6:	f7ff ff13 	bl	8004710 <__multiply>
 80048ea:	6020      	str	r0, [r4, #0]
 80048ec:	f8c0 9000 	str.w	r9, [r0]
 80048f0:	4604      	mov	r4, r0
 80048f2:	e7e4      	b.n	80048be <__pow5mult+0x6a>
 80048f4:	4630      	mov	r0, r6
 80048f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fa:	bf00      	nop
 80048fc:	0800553c 	.word	0x0800553c
 8004900:	0800540b 	.word	0x0800540b
 8004904:	0800548b 	.word	0x0800548b

08004908 <__lshift>:
 8004908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490c:	460c      	mov	r4, r1
 800490e:	4607      	mov	r7, r0
 8004910:	4691      	mov	r9, r2
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	6849      	ldr	r1, [r1, #4]
 8004916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800491a:	68a3      	ldr	r3, [r4, #8]
 800491c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004920:	f108 0601 	add.w	r6, r8, #1
 8004924:	42b3      	cmp	r3, r6
 8004926:	db0b      	blt.n	8004940 <__lshift+0x38>
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff fde7 	bl	80044fc <_Balloc>
 800492e:	4605      	mov	r5, r0
 8004930:	b948      	cbnz	r0, 8004946 <__lshift+0x3e>
 8004932:	4602      	mov	r2, r0
 8004934:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004938:	4b27      	ldr	r3, [pc, #156]	@ (80049d8 <__lshift+0xd0>)
 800493a:	4828      	ldr	r0, [pc, #160]	@ (80049dc <__lshift+0xd4>)
 800493c:	f000 fa1e 	bl	8004d7c <__assert_func>
 8004940:	3101      	adds	r1, #1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	e7ee      	b.n	8004924 <__lshift+0x1c>
 8004946:	2300      	movs	r3, #0
 8004948:	f100 0114 	add.w	r1, r0, #20
 800494c:	f100 0210 	add.w	r2, r0, #16
 8004950:	4618      	mov	r0, r3
 8004952:	4553      	cmp	r3, sl
 8004954:	db33      	blt.n	80049be <__lshift+0xb6>
 8004956:	6920      	ldr	r0, [r4, #16]
 8004958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800495c:	f104 0314 	add.w	r3, r4, #20
 8004960:	f019 091f 	ands.w	r9, r9, #31
 8004964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004968:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800496c:	d02b      	beq.n	80049c6 <__lshift+0xbe>
 800496e:	468a      	mov	sl, r1
 8004970:	2200      	movs	r2, #0
 8004972:	f1c9 0e20 	rsb	lr, r9, #32
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	fa00 f009 	lsl.w	r0, r0, r9
 800497c:	4310      	orrs	r0, r2
 800497e:	f84a 0b04 	str.w	r0, [sl], #4
 8004982:	f853 2b04 	ldr.w	r2, [r3], #4
 8004986:	459c      	cmp	ip, r3
 8004988:	fa22 f20e 	lsr.w	r2, r2, lr
 800498c:	d8f3      	bhi.n	8004976 <__lshift+0x6e>
 800498e:	ebac 0304 	sub.w	r3, ip, r4
 8004992:	3b15      	subs	r3, #21
 8004994:	f023 0303 	bic.w	r3, r3, #3
 8004998:	3304      	adds	r3, #4
 800499a:	f104 0015 	add.w	r0, r4, #21
 800499e:	4560      	cmp	r0, ip
 80049a0:	bf88      	it	hi
 80049a2:	2304      	movhi	r3, #4
 80049a4:	50ca      	str	r2, [r1, r3]
 80049a6:	b10a      	cbz	r2, 80049ac <__lshift+0xa4>
 80049a8:	f108 0602 	add.w	r6, r8, #2
 80049ac:	3e01      	subs	r6, #1
 80049ae:	4638      	mov	r0, r7
 80049b0:	4621      	mov	r1, r4
 80049b2:	612e      	str	r6, [r5, #16]
 80049b4:	f7ff fde2 	bl	800457c <_Bfree>
 80049b8:	4628      	mov	r0, r5
 80049ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049be:	f842 0f04 	str.w	r0, [r2, #4]!
 80049c2:	3301      	adds	r3, #1
 80049c4:	e7c5      	b.n	8004952 <__lshift+0x4a>
 80049c6:	3904      	subs	r1, #4
 80049c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049cc:	459c      	cmp	ip, r3
 80049ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80049d2:	d8f9      	bhi.n	80049c8 <__lshift+0xc0>
 80049d4:	e7ea      	b.n	80049ac <__lshift+0xa4>
 80049d6:	bf00      	nop
 80049d8:	0800547a 	.word	0x0800547a
 80049dc:	0800548b 	.word	0x0800548b

080049e0 <__mcmp>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	690a      	ldr	r2, [r1, #16]
 80049e4:	6900      	ldr	r0, [r0, #16]
 80049e6:	b530      	push	{r4, r5, lr}
 80049e8:	1a80      	subs	r0, r0, r2
 80049ea:	d10e      	bne.n	8004a0a <__mcmp+0x2a>
 80049ec:	3314      	adds	r3, #20
 80049ee:	3114      	adds	r1, #20
 80049f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80049f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80049f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80049fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a00:	4295      	cmp	r5, r2
 8004a02:	d003      	beq.n	8004a0c <__mcmp+0x2c>
 8004a04:	d205      	bcs.n	8004a12 <__mcmp+0x32>
 8004a06:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0a:	bd30      	pop	{r4, r5, pc}
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	d3f3      	bcc.n	80049f8 <__mcmp+0x18>
 8004a10:	e7fb      	b.n	8004a0a <__mcmp+0x2a>
 8004a12:	2001      	movs	r0, #1
 8004a14:	e7f9      	b.n	8004a0a <__mcmp+0x2a>
	...

08004a18 <__mdiff>:
 8004a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1c:	4689      	mov	r9, r1
 8004a1e:	4606      	mov	r6, r0
 8004a20:	4611      	mov	r1, r2
 8004a22:	4648      	mov	r0, r9
 8004a24:	4614      	mov	r4, r2
 8004a26:	f7ff ffdb 	bl	80049e0 <__mcmp>
 8004a2a:	1e05      	subs	r5, r0, #0
 8004a2c:	d112      	bne.n	8004a54 <__mdiff+0x3c>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7ff fd63 	bl	80044fc <_Balloc>
 8004a36:	4602      	mov	r2, r0
 8004a38:	b928      	cbnz	r0, 8004a46 <__mdiff+0x2e>
 8004a3a:	f240 2137 	movw	r1, #567	@ 0x237
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <__mdiff+0x120>)
 8004a40:	483e      	ldr	r0, [pc, #248]	@ (8004b3c <__mdiff+0x124>)
 8004a42:	f000 f99b 	bl	8004d7c <__assert_func>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	b003      	add	sp, #12
 8004a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a54:	bfbc      	itt	lt
 8004a56:	464b      	movlt	r3, r9
 8004a58:	46a1      	movlt	r9, r4
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a60:	bfba      	itte	lt
 8004a62:	461c      	movlt	r4, r3
 8004a64:	2501      	movlt	r5, #1
 8004a66:	2500      	movge	r5, #0
 8004a68:	f7ff fd48 	bl	80044fc <_Balloc>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	b918      	cbnz	r0, 8004a78 <__mdiff+0x60>
 8004a70:	f240 2145 	movw	r1, #581	@ 0x245
 8004a74:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <__mdiff+0x120>)
 8004a76:	e7e3      	b.n	8004a40 <__mdiff+0x28>
 8004a78:	f100 0b14 	add.w	fp, r0, #20
 8004a7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004a80:	f109 0310 	add.w	r3, r9, #16
 8004a84:	60c5      	str	r5, [r0, #12]
 8004a86:	f04f 0c00 	mov.w	ip, #0
 8004a8a:	f109 0514 	add.w	r5, r9, #20
 8004a8e:	46d9      	mov	r9, fp
 8004a90:	6926      	ldr	r6, [r4, #16]
 8004a92:	f104 0e14 	add.w	lr, r4, #20
 8004a96:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004a9a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	9b01      	ldr	r3, [sp, #4]
 8004aa2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004aa6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004aaa:	b281      	uxth	r1, r0
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	fa1f f38a 	uxth.w	r3, sl
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	0c00      	lsrs	r0, r0, #16
 8004ab6:	4463      	add	r3, ip
 8004ab8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004abc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ac6:	4576      	cmp	r6, lr
 8004ac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004acc:	f849 3b04 	str.w	r3, [r9], #4
 8004ad0:	d8e6      	bhi.n	8004aa0 <__mdiff+0x88>
 8004ad2:	1b33      	subs	r3, r6, r4
 8004ad4:	3b15      	subs	r3, #21
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	3415      	adds	r4, #21
 8004adc:	3304      	adds	r3, #4
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	bf38      	it	cc
 8004ae2:	2304      	movcc	r3, #4
 8004ae4:	441d      	add	r5, r3
 8004ae6:	445b      	add	r3, fp
 8004ae8:	461e      	mov	r6, r3
 8004aea:	462c      	mov	r4, r5
 8004aec:	4544      	cmp	r4, r8
 8004aee:	d30e      	bcc.n	8004b0e <__mdiff+0xf6>
 8004af0:	f108 0103 	add.w	r1, r8, #3
 8004af4:	1b49      	subs	r1, r1, r5
 8004af6:	f021 0103 	bic.w	r1, r1, #3
 8004afa:	3d03      	subs	r5, #3
 8004afc:	45a8      	cmp	r8, r5
 8004afe:	bf38      	it	cc
 8004b00:	2100      	movcc	r1, #0
 8004b02:	440b      	add	r3, r1
 8004b04:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004b08:	b199      	cbz	r1, 8004b32 <__mdiff+0x11a>
 8004b0a:	6117      	str	r7, [r2, #16]
 8004b0c:	e79e      	b.n	8004a4c <__mdiff+0x34>
 8004b0e:	46e6      	mov	lr, ip
 8004b10:	f854 1b04 	ldr.w	r1, [r4], #4
 8004b14:	fa1f fc81 	uxth.w	ip, r1
 8004b18:	44f4      	add	ip, lr
 8004b1a:	0c08      	lsrs	r0, r1, #16
 8004b1c:	4471      	add	r1, lr
 8004b1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004b22:	b289      	uxth	r1, r1
 8004b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b2c:	f846 1b04 	str.w	r1, [r6], #4
 8004b30:	e7dc      	b.n	8004aec <__mdiff+0xd4>
 8004b32:	3f01      	subs	r7, #1
 8004b34:	e7e6      	b.n	8004b04 <__mdiff+0xec>
 8004b36:	bf00      	nop
 8004b38:	0800547a 	.word	0x0800547a
 8004b3c:	0800548b 	.word	0x0800548b

08004b40 <__d2b>:
 8004b40:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004b44:	2101      	movs	r1, #1
 8004b46:	4690      	mov	r8, r2
 8004b48:	4699      	mov	r9, r3
 8004b4a:	9e08      	ldr	r6, [sp, #32]
 8004b4c:	f7ff fcd6 	bl	80044fc <_Balloc>
 8004b50:	4604      	mov	r4, r0
 8004b52:	b930      	cbnz	r0, 8004b62 <__d2b+0x22>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f240 310f 	movw	r1, #783	@ 0x30f
 8004b5a:	4b23      	ldr	r3, [pc, #140]	@ (8004be8 <__d2b+0xa8>)
 8004b5c:	4823      	ldr	r0, [pc, #140]	@ (8004bec <__d2b+0xac>)
 8004b5e:	f000 f90d 	bl	8004d7c <__assert_func>
 8004b62:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b6a:	b10d      	cbz	r5, 8004b70 <__d2b+0x30>
 8004b6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	f1b8 0300 	subs.w	r3, r8, #0
 8004b76:	d024      	beq.n	8004bc2 <__d2b+0x82>
 8004b78:	4668      	mov	r0, sp
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	f7ff fd85 	bl	800468a <__lo0bits>
 8004b80:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004b84:	b1d8      	cbz	r0, 8004bbe <__d2b+0x7e>
 8004b86:	f1c0 0320 	rsb	r3, r0, #32
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	40c2      	lsrs	r2, r0
 8004b92:	6163      	str	r3, [r4, #20]
 8004b94:	9201      	str	r2, [sp, #4]
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2201      	moveq	r2, #1
 8004b9e:	2202      	movne	r2, #2
 8004ba0:	61a3      	str	r3, [r4, #24]
 8004ba2:	6122      	str	r2, [r4, #16]
 8004ba4:	b1ad      	cbz	r5, 8004bd2 <__d2b+0x92>
 8004ba6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004baa:	4405      	add	r5, r0
 8004bac:	6035      	str	r5, [r6, #0]
 8004bae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb4:	6018      	str	r0, [r3, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	b002      	add	sp, #8
 8004bba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004bbe:	6161      	str	r1, [r4, #20]
 8004bc0:	e7e9      	b.n	8004b96 <__d2b+0x56>
 8004bc2:	a801      	add	r0, sp, #4
 8004bc4:	f7ff fd61 	bl	800468a <__lo0bits>
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	6163      	str	r3, [r4, #20]
 8004bce:	3020      	adds	r0, #32
 8004bd0:	e7e7      	b.n	8004ba2 <__d2b+0x62>
 8004bd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004bda:	6030      	str	r0, [r6, #0]
 8004bdc:	6918      	ldr	r0, [r3, #16]
 8004bde:	f7ff fd35 	bl	800464c <__hi0bits>
 8004be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004be6:	e7e4      	b.n	8004bb2 <__d2b+0x72>
 8004be8:	0800547a 	.word	0x0800547a
 8004bec:	0800548b 	.word	0x0800548b

08004bf0 <__sflush_r>:
 8004bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	0716      	lsls	r6, r2, #28
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	d454      	bmi.n	8004ca8 <__sflush_r+0xb8>
 8004bfe:	684b      	ldr	r3, [r1, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc02      	bgt.n	8004c0a <__sflush_r+0x1a>
 8004c04:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	dd48      	ble.n	8004c9c <__sflush_r+0xac>
 8004c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c0c:	2e00      	cmp	r6, #0
 8004c0e:	d045      	beq.n	8004c9c <__sflush_r+0xac>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c16:	682f      	ldr	r7, [r5, #0]
 8004c18:	6a21      	ldr	r1, [r4, #32]
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	d030      	beq.n	8004c80 <__sflush_r+0x90>
 8004c1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	0759      	lsls	r1, r3, #29
 8004c24:	d505      	bpl.n	8004c32 <__sflush_r+0x42>
 8004c26:	6863      	ldr	r3, [r4, #4]
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c2c:	b10b      	cbz	r3, 8004c32 <__sflush_r+0x42>
 8004c2e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c30:	1ad2      	subs	r2, r2, r3
 8004c32:	2300      	movs	r3, #0
 8004c34:	4628      	mov	r0, r5
 8004c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c38:	6a21      	ldr	r1, [r4, #32]
 8004c3a:	47b0      	blx	r6
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	d106      	bne.n	8004c50 <__sflush_r+0x60>
 8004c42:	6829      	ldr	r1, [r5, #0]
 8004c44:	291d      	cmp	r1, #29
 8004c46:	d82b      	bhi.n	8004ca0 <__sflush_r+0xb0>
 8004c48:	4a28      	ldr	r2, [pc, #160]	@ (8004cec <__sflush_r+0xfc>)
 8004c4a:	40ca      	lsrs	r2, r1
 8004c4c:	07d6      	lsls	r6, r2, #31
 8004c4e:	d527      	bpl.n	8004ca0 <__sflush_r+0xb0>
 8004c50:	2200      	movs	r2, #0
 8004c52:	6062      	str	r2, [r4, #4]
 8004c54:	6922      	ldr	r2, [r4, #16]
 8004c56:	04d9      	lsls	r1, r3, #19
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	d504      	bpl.n	8004c66 <__sflush_r+0x76>
 8004c5c:	1c42      	adds	r2, r0, #1
 8004c5e:	d101      	bne.n	8004c64 <__sflush_r+0x74>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b903      	cbnz	r3, 8004c66 <__sflush_r+0x76>
 8004c64:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c66:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c68:	602f      	str	r7, [r5, #0]
 8004c6a:	b1b9      	cbz	r1, 8004c9c <__sflush_r+0xac>
 8004c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c70:	4299      	cmp	r1, r3
 8004c72:	d002      	beq.n	8004c7a <__sflush_r+0x8a>
 8004c74:	4628      	mov	r0, r5
 8004c76:	f7ff fb43 	bl	8004300 <_free_r>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c7e:	e00d      	b.n	8004c9c <__sflush_r+0xac>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	4602      	mov	r2, r0
 8004c88:	1c50      	adds	r0, r2, #1
 8004c8a:	d1c9      	bne.n	8004c20 <__sflush_r+0x30>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0c6      	beq.n	8004c20 <__sflush_r+0x30>
 8004c92:	2b1d      	cmp	r3, #29
 8004c94:	d001      	beq.n	8004c9a <__sflush_r+0xaa>
 8004c96:	2b16      	cmp	r3, #22
 8004c98:	d11d      	bne.n	8004cd6 <__sflush_r+0xe6>
 8004c9a:	602f      	str	r7, [r5, #0]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e021      	b.n	8004ce4 <__sflush_r+0xf4>
 8004ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	e01a      	b.n	8004cde <__sflush_r+0xee>
 8004ca8:	690f      	ldr	r7, [r1, #16]
 8004caa:	2f00      	cmp	r7, #0
 8004cac:	d0f6      	beq.n	8004c9c <__sflush_r+0xac>
 8004cae:	0793      	lsls	r3, r2, #30
 8004cb0:	bf18      	it	ne
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	680e      	ldr	r6, [r1, #0]
 8004cb6:	bf08      	it	eq
 8004cb8:	694b      	ldreq	r3, [r1, #20]
 8004cba:	1bf6      	subs	r6, r6, r7
 8004cbc:	600f      	str	r7, [r1, #0]
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	ddeb      	ble.n	8004c9c <__sflush_r+0xac>
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	463a      	mov	r2, r7
 8004cc8:	4628      	mov	r0, r5
 8004cca:	6a21      	ldr	r1, [r4, #32]
 8004ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004cd0:	47e0      	blx	ip
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	dc07      	bgt.n	8004ce6 <__sflush_r+0xf6>
 8004cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce6:	4407      	add	r7, r0
 8004ce8:	1a36      	subs	r6, r6, r0
 8004cea:	e7e9      	b.n	8004cc0 <__sflush_r+0xd0>
 8004cec:	20400001 	.word	0x20400001

08004cf0 <_fflush_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b913      	cbnz	r3, 8004d00 <_fflush_r+0x10>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	b118      	cbz	r0, 8004d0a <_fflush_r+0x1a>
 8004d02:	6a03      	ldr	r3, [r0, #32]
 8004d04:	b90b      	cbnz	r3, 8004d0a <_fflush_r+0x1a>
 8004d06:	f7fe fb95 	bl	8003434 <__sinit>
 8004d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f3      	beq.n	8004cfa <_fflush_r+0xa>
 8004d12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d14:	07d0      	lsls	r0, r2, #31
 8004d16:	d404      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d18:	0599      	lsls	r1, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d1e:	f7fe fc80 	bl	8003622 <__retarget_lock_acquire_recursive>
 8004d22:	4628      	mov	r0, r5
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7ff ff63 	bl	8004bf0 <__sflush_r>
 8004d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d4e4      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	d4e1      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d3a:	f7fe fc73 	bl	8003624 <__retarget_lock_release_recursive>
 8004d3e:	e7dd      	b.n	8004cfc <_fflush_r+0xc>

08004d40 <_sbrk_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	2300      	movs	r3, #0
 8004d44:	4d05      	ldr	r5, [pc, #20]	@ (8004d5c <_sbrk_r+0x1c>)
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	f7fc f8d4 	bl	8000ef8 <_sbrk>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_sbrk_r+0x1a>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_sbrk_r+0x1a>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	20000380 	.word	0x20000380

08004d60 <memcpy>:
 8004d60:	440a      	add	r2, r1
 8004d62:	4291      	cmp	r1, r2
 8004d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d68:	d100      	bne.n	8004d6c <memcpy+0xc>
 8004d6a:	4770      	bx	lr
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d78:	d1f9      	bne.n	8004d6e <memcpy+0xe>
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <__assert_func>:
 8004d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d7e:	4614      	mov	r4, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <__assert_func+0x2c>)
 8004d84:	4605      	mov	r5, r0
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68d8      	ldr	r0, [r3, #12]
 8004d8a:	b14c      	cbz	r4, 8004da0 <__assert_func+0x24>
 8004d8c:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <__assert_func+0x30>)
 8004d8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d92:	9100      	str	r1, [sp, #0]
 8004d94:	462b      	mov	r3, r5
 8004d96:	4906      	ldr	r1, [pc, #24]	@ (8004db0 <__assert_func+0x34>)
 8004d98:	f000 f842 	bl	8004e20 <fiprintf>
 8004d9c:	f000 f852 	bl	8004e44 <abort>
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <__assert_func+0x38>)
 8004da2:	461c      	mov	r4, r3
 8004da4:	e7f3      	b.n	8004d8e <__assert_func+0x12>
 8004da6:	bf00      	nop
 8004da8:	20000018 	.word	0x20000018
 8004dac:	080054ee 	.word	0x080054ee
 8004db0:	080054fb 	.word	0x080054fb
 8004db4:	08005529 	.word	0x08005529

08004db8 <_calloc_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	fba1 5402 	umull	r5, r4, r1, r2
 8004dbe:	b934      	cbnz	r4, 8004dce <_calloc_r+0x16>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7ff fb0f 	bl	80043e4 <_malloc_r>
 8004dc6:	4606      	mov	r6, r0
 8004dc8:	b928      	cbnz	r0, 8004dd6 <_calloc_r+0x1e>
 8004dca:	4630      	mov	r0, r6
 8004dcc:	bd70      	pop	{r4, r5, r6, pc}
 8004dce:	220c      	movs	r2, #12
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	6002      	str	r2, [r0, #0]
 8004dd4:	e7f9      	b.n	8004dca <_calloc_r+0x12>
 8004dd6:	462a      	mov	r2, r5
 8004dd8:	4621      	mov	r1, r4
 8004dda:	f7fe fba4 	bl	8003526 <memset>
 8004dde:	e7f4      	b.n	8004dca <_calloc_r+0x12>

08004de0 <__ascii_mbtowc>:
 8004de0:	b082      	sub	sp, #8
 8004de2:	b901      	cbnz	r1, 8004de6 <__ascii_mbtowc+0x6>
 8004de4:	a901      	add	r1, sp, #4
 8004de6:	b142      	cbz	r2, 8004dfa <__ascii_mbtowc+0x1a>
 8004de8:	b14b      	cbz	r3, 8004dfe <__ascii_mbtowc+0x1e>
 8004dea:	7813      	ldrb	r3, [r2, #0]
 8004dec:	600b      	str	r3, [r1, #0]
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	1e10      	subs	r0, r2, #0
 8004df2:	bf18      	it	ne
 8004df4:	2001      	movne	r0, #1
 8004df6:	b002      	add	sp, #8
 8004df8:	4770      	bx	lr
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	e7fb      	b.n	8004df6 <__ascii_mbtowc+0x16>
 8004dfe:	f06f 0001 	mvn.w	r0, #1
 8004e02:	e7f8      	b.n	8004df6 <__ascii_mbtowc+0x16>

08004e04 <__ascii_wctomb>:
 8004e04:	4603      	mov	r3, r0
 8004e06:	4608      	mov	r0, r1
 8004e08:	b141      	cbz	r1, 8004e1c <__ascii_wctomb+0x18>
 8004e0a:	2aff      	cmp	r2, #255	@ 0xff
 8004e0c:	d904      	bls.n	8004e18 <__ascii_wctomb+0x14>
 8004e0e:	228a      	movs	r2, #138	@ 0x8a
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	4770      	bx	lr
 8004e18:	2001      	movs	r0, #1
 8004e1a:	700a      	strb	r2, [r1, #0]
 8004e1c:	4770      	bx	lr
	...

08004e20 <fiprintf>:
 8004e20:	b40e      	push	{r1, r2, r3}
 8004e22:	b503      	push	{r0, r1, lr}
 8004e24:	4601      	mov	r1, r0
 8004e26:	ab03      	add	r3, sp, #12
 8004e28:	4805      	ldr	r0, [pc, #20]	@ (8004e40 <fiprintf+0x20>)
 8004e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e2e:	6800      	ldr	r0, [r0, #0]
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	f000 f835 	bl	8004ea0 <_vfiprintf_r>
 8004e36:	b002      	add	sp, #8
 8004e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e3c:	b003      	add	sp, #12
 8004e3e:	4770      	bx	lr
 8004e40:	20000018 	.word	0x20000018

08004e44 <abort>:
 8004e44:	2006      	movs	r0, #6
 8004e46:	b508      	push	{r3, lr}
 8004e48:	f000 f9fe 	bl	8005248 <raise>
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f7fb ffde 	bl	8000e0e <_exit>

08004e52 <__sfputc_r>:
 8004e52:	6893      	ldr	r3, [r2, #8]
 8004e54:	b410      	push	{r4}
 8004e56:	3b01      	subs	r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	6093      	str	r3, [r2, #8]
 8004e5c:	da07      	bge.n	8004e6e <__sfputc_r+0x1c>
 8004e5e:	6994      	ldr	r4, [r2, #24]
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	db01      	blt.n	8004e68 <__sfputc_r+0x16>
 8004e64:	290a      	cmp	r1, #10
 8004e66:	d102      	bne.n	8004e6e <__sfputc_r+0x1c>
 8004e68:	bc10      	pop	{r4}
 8004e6a:	f000 b931 	b.w	80050d0 <__swbuf_r>
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	1c58      	adds	r0, r3, #1
 8004e72:	6010      	str	r0, [r2, #0]
 8004e74:	7019      	strb	r1, [r3, #0]
 8004e76:	4608      	mov	r0, r1
 8004e78:	bc10      	pop	{r4}
 8004e7a:	4770      	bx	lr

08004e7c <__sfputs_r>:
 8004e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7e:	4606      	mov	r6, r0
 8004e80:	460f      	mov	r7, r1
 8004e82:	4614      	mov	r4, r2
 8004e84:	18d5      	adds	r5, r2, r3
 8004e86:	42ac      	cmp	r4, r5
 8004e88:	d101      	bne.n	8004e8e <__sfputs_r+0x12>
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	e007      	b.n	8004e9e <__sfputs_r+0x22>
 8004e8e:	463a      	mov	r2, r7
 8004e90:	4630      	mov	r0, r6
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	f7ff ffdc 	bl	8004e52 <__sfputc_r>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d1f3      	bne.n	8004e86 <__sfputs_r+0xa>
 8004e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ea0 <_vfiprintf_r>:
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	4698      	mov	r8, r3
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b09d      	sub	sp, #116	@ 0x74
 8004eae:	b118      	cbz	r0, 8004eb8 <_vfiprintf_r+0x18>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <_vfiprintf_r+0x18>
 8004eb4:	f7fe fabe 	bl	8003434 <__sinit>
 8004eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eba:	07d9      	lsls	r1, r3, #31
 8004ebc:	d405      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	059a      	lsls	r2, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_vfiprintf_r+0x2a>
 8004ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ec6:	f7fe fbac 	bl	8003622 <__retarget_lock_acquire_recursive>
 8004eca:	89ab      	ldrh	r3, [r5, #12]
 8004ecc:	071b      	lsls	r3, r3, #28
 8004ece:	d501      	bpl.n	8004ed4 <_vfiprintf_r+0x34>
 8004ed0:	692b      	ldr	r3, [r5, #16]
 8004ed2:	b99b      	cbnz	r3, 8004efc <_vfiprintf_r+0x5c>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f938 	bl	800514c <__swsetup_r>
 8004edc:	b170      	cbz	r0, 8004efc <_vfiprintf_r+0x5c>
 8004ede:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ee0:	07dc      	lsls	r4, r3, #31
 8004ee2:	d504      	bpl.n	8004eee <_vfiprintf_r+0x4e>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	b01d      	add	sp, #116	@ 0x74
 8004eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	0598      	lsls	r0, r3, #22
 8004ef2:	d4f7      	bmi.n	8004ee4 <_vfiprintf_r+0x44>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ef6:	f7fe fb95 	bl	8003624 <__retarget_lock_release_recursive>
 8004efa:	e7f3      	b.n	8004ee4 <_vfiprintf_r+0x44>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f00:	2320      	movs	r3, #32
 8004f02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f06:	2330      	movs	r3, #48	@ 0x30
 8004f08:	f04f 0901 	mov.w	r9, #1
 8004f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f10:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80050bc <_vfiprintf_r+0x21c>
 8004f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f18:	4623      	mov	r3, r4
 8004f1a:	469a      	mov	sl, r3
 8004f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f20:	b10a      	cbz	r2, 8004f26 <_vfiprintf_r+0x86>
 8004f22:	2a25      	cmp	r2, #37	@ 0x25
 8004f24:	d1f9      	bne.n	8004f1a <_vfiprintf_r+0x7a>
 8004f26:	ebba 0b04 	subs.w	fp, sl, r4
 8004f2a:	d00b      	beq.n	8004f44 <_vfiprintf_r+0xa4>
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ffa2 	bl	8004e7c <__sfputs_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f000 80a7 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f40:	445a      	add	r2, fp
 8004f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f44:	f89a 3000 	ldrb.w	r3, [sl]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 809f 	beq.w	800508c <_vfiprintf_r+0x1ec>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f58:	f10a 0a01 	add.w	sl, sl, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	9307      	str	r3, [sp, #28]
 8004f60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f64:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f66:	4654      	mov	r4, sl
 8004f68:	2205      	movs	r2, #5
 8004f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6e:	4853      	ldr	r0, [pc, #332]	@ (80050bc <_vfiprintf_r+0x21c>)
 8004f70:	f7fe fb59 	bl	8003626 <memchr>
 8004f74:	9a04      	ldr	r2, [sp, #16]
 8004f76:	b9d8      	cbnz	r0, 8004fb0 <_vfiprintf_r+0x110>
 8004f78:	06d1      	lsls	r1, r2, #27
 8004f7a:	bf44      	itt	mi
 8004f7c:	2320      	movmi	r3, #32
 8004f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f82:	0713      	lsls	r3, r2, #28
 8004f84:	bf44      	itt	mi
 8004f86:	232b      	movmi	r3, #43	@ 0x2b
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f92:	d015      	beq.n	8004fc0 <_vfiprintf_r+0x120>
 8004f94:	4654      	mov	r4, sl
 8004f96:	2000      	movs	r0, #0
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	9a07      	ldr	r2, [sp, #28]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa4:	3b30      	subs	r3, #48	@ 0x30
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d94b      	bls.n	8005042 <_vfiprintf_r+0x1a2>
 8004faa:	b1b0      	cbz	r0, 8004fda <_vfiprintf_r+0x13a>
 8004fac:	9207      	str	r2, [sp, #28]
 8004fae:	e014      	b.n	8004fda <_vfiprintf_r+0x13a>
 8004fb0:	eba0 0308 	sub.w	r3, r0, r8
 8004fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	46a2      	mov	sl, r4
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	e7d2      	b.n	8004f66 <_vfiprintf_r+0xc6>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9103      	str	r1, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfbb      	ittet	lt
 8004fcc:	425b      	neglt	r3, r3
 8004fce:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd2:	9307      	strge	r3, [sp, #28]
 8004fd4:	9307      	strlt	r3, [sp, #28]
 8004fd6:	bfb8      	it	lt
 8004fd8:	9204      	strlt	r2, [sp, #16]
 8004fda:	7823      	ldrb	r3, [r4, #0]
 8004fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fde:	d10a      	bne.n	8004ff6 <_vfiprintf_r+0x156>
 8004fe0:	7863      	ldrb	r3, [r4, #1]
 8004fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe4:	d132      	bne.n	800504c <_vfiprintf_r+0x1ac>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	3402      	adds	r4, #2
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9203      	str	r2, [sp, #12]
 8004ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80050c0 <_vfiprintf_r+0x220>
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	7821      	ldrb	r1, [r4, #0]
 8005000:	f7fe fb11 	bl	8003626 <memchr>
 8005004:	b138      	cbz	r0, 8005016 <_vfiprintf_r+0x176>
 8005006:	2240      	movs	r2, #64	@ 0x40
 8005008:	9b04      	ldr	r3, [sp, #16]
 800500a:	eba0 000a 	sub.w	r0, r0, sl
 800500e:	4082      	lsls	r2, r0
 8005010:	4313      	orrs	r3, r2
 8005012:	3401      	adds	r4, #1
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501a:	2206      	movs	r2, #6
 800501c:	4829      	ldr	r0, [pc, #164]	@ (80050c4 <_vfiprintf_r+0x224>)
 800501e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005022:	f7fe fb00 	bl	8003626 <memchr>
 8005026:	2800      	cmp	r0, #0
 8005028:	d03f      	beq.n	80050aa <_vfiprintf_r+0x20a>
 800502a:	4b27      	ldr	r3, [pc, #156]	@ (80050c8 <_vfiprintf_r+0x228>)
 800502c:	bb1b      	cbnz	r3, 8005076 <_vfiprintf_r+0x1d6>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	3308      	adds	r3, #8
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800503c:	443b      	add	r3, r7
 800503e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005040:	e76a      	b.n	8004f18 <_vfiprintf_r+0x78>
 8005042:	460c      	mov	r4, r1
 8005044:	2001      	movs	r0, #1
 8005046:	fb0c 3202 	mla	r2, ip, r2, r3
 800504a:	e7a8      	b.n	8004f9e <_vfiprintf_r+0xfe>
 800504c:	2300      	movs	r3, #0
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4619      	mov	r1, r3
 8005054:	3401      	adds	r4, #1
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	4620      	mov	r0, r4
 800505a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505e:	3a30      	subs	r2, #48	@ 0x30
 8005060:	2a09      	cmp	r2, #9
 8005062:	d903      	bls.n	800506c <_vfiprintf_r+0x1cc>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0c6      	beq.n	8004ff6 <_vfiprintf_r+0x156>
 8005068:	9105      	str	r1, [sp, #20]
 800506a:	e7c4      	b.n	8004ff6 <_vfiprintf_r+0x156>
 800506c:	4604      	mov	r4, r0
 800506e:	2301      	movs	r3, #1
 8005070:	fb0c 2101 	mla	r1, ip, r1, r2
 8005074:	e7f0      	b.n	8005058 <_vfiprintf_r+0x1b8>
 8005076:	ab03      	add	r3, sp, #12
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	462a      	mov	r2, r5
 800507c:	4630      	mov	r0, r6
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <_vfiprintf_r+0x22c>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	f7fd fd8f 	bl	8002ba4 <_printf_float>
 8005086:	4607      	mov	r7, r0
 8005088:	1c78      	adds	r0, r7, #1
 800508a:	d1d6      	bne.n	800503a <_vfiprintf_r+0x19a>
 800508c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800508e:	07d9      	lsls	r1, r3, #31
 8005090:	d405      	bmi.n	800509e <_vfiprintf_r+0x1fe>
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	059a      	lsls	r2, r3, #22
 8005096:	d402      	bmi.n	800509e <_vfiprintf_r+0x1fe>
 8005098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800509a:	f7fe fac3 	bl	8003624 <__retarget_lock_release_recursive>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	065b      	lsls	r3, r3, #25
 80050a2:	f53f af1f 	bmi.w	8004ee4 <_vfiprintf_r+0x44>
 80050a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050a8:	e71e      	b.n	8004ee8 <_vfiprintf_r+0x48>
 80050aa:	ab03      	add	r3, sp, #12
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	462a      	mov	r2, r5
 80050b0:	4630      	mov	r0, r6
 80050b2:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <_vfiprintf_r+0x22c>)
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	f7fe f813 	bl	80030e0 <_printf_i>
 80050ba:	e7e4      	b.n	8005086 <_vfiprintf_r+0x1e6>
 80050bc:	0800552a 	.word	0x0800552a
 80050c0:	08005530 	.word	0x08005530
 80050c4:	08005534 	.word	0x08005534
 80050c8:	08002ba5 	.word	0x08002ba5
 80050cc:	08004e7d 	.word	0x08004e7d

080050d0 <__swbuf_r>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	460e      	mov	r6, r1
 80050d4:	4614      	mov	r4, r2
 80050d6:	4605      	mov	r5, r0
 80050d8:	b118      	cbz	r0, 80050e2 <__swbuf_r+0x12>
 80050da:	6a03      	ldr	r3, [r0, #32]
 80050dc:	b90b      	cbnz	r3, 80050e2 <__swbuf_r+0x12>
 80050de:	f7fe f9a9 	bl	8003434 <__sinit>
 80050e2:	69a3      	ldr	r3, [r4, #24]
 80050e4:	60a3      	str	r3, [r4, #8]
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	071a      	lsls	r2, r3, #28
 80050ea:	d501      	bpl.n	80050f0 <__swbuf_r+0x20>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	b943      	cbnz	r3, 8005102 <__swbuf_r+0x32>
 80050f0:	4621      	mov	r1, r4
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 f82a 	bl	800514c <__swsetup_r>
 80050f8:	b118      	cbz	r0, 8005102 <__swbuf_r+0x32>
 80050fa:	f04f 37ff 	mov.w	r7, #4294967295
 80050fe:	4638      	mov	r0, r7
 8005100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	6922      	ldr	r2, [r4, #16]
 8005106:	b2f6      	uxtb	r6, r6
 8005108:	1a98      	subs	r0, r3, r2
 800510a:	6963      	ldr	r3, [r4, #20]
 800510c:	4637      	mov	r7, r6
 800510e:	4283      	cmp	r3, r0
 8005110:	dc05      	bgt.n	800511e <__swbuf_r+0x4e>
 8005112:	4621      	mov	r1, r4
 8005114:	4628      	mov	r0, r5
 8005116:	f7ff fdeb 	bl	8004cf0 <_fflush_r>
 800511a:	2800      	cmp	r0, #0
 800511c:	d1ed      	bne.n	80050fa <__swbuf_r+0x2a>
 800511e:	68a3      	ldr	r3, [r4, #8]
 8005120:	3b01      	subs	r3, #1
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	6022      	str	r2, [r4, #0]
 800512a:	701e      	strb	r6, [r3, #0]
 800512c:	6962      	ldr	r2, [r4, #20]
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	429a      	cmp	r2, r3
 8005132:	d004      	beq.n	800513e <__swbuf_r+0x6e>
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	07db      	lsls	r3, r3, #31
 8005138:	d5e1      	bpl.n	80050fe <__swbuf_r+0x2e>
 800513a:	2e0a      	cmp	r6, #10
 800513c:	d1df      	bne.n	80050fe <__swbuf_r+0x2e>
 800513e:	4621      	mov	r1, r4
 8005140:	4628      	mov	r0, r5
 8005142:	f7ff fdd5 	bl	8004cf0 <_fflush_r>
 8005146:	2800      	cmp	r0, #0
 8005148:	d0d9      	beq.n	80050fe <__swbuf_r+0x2e>
 800514a:	e7d6      	b.n	80050fa <__swbuf_r+0x2a>

0800514c <__swsetup_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4b29      	ldr	r3, [pc, #164]	@ (80051f4 <__swsetup_r+0xa8>)
 8005150:	4605      	mov	r5, r0
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	460c      	mov	r4, r1
 8005156:	b118      	cbz	r0, 8005160 <__swsetup_r+0x14>
 8005158:	6a03      	ldr	r3, [r0, #32]
 800515a:	b90b      	cbnz	r3, 8005160 <__swsetup_r+0x14>
 800515c:	f7fe f96a 	bl	8003434 <__sinit>
 8005160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005164:	0719      	lsls	r1, r3, #28
 8005166:	d422      	bmi.n	80051ae <__swsetup_r+0x62>
 8005168:	06da      	lsls	r2, r3, #27
 800516a:	d407      	bmi.n	800517c <__swsetup_r+0x30>
 800516c:	2209      	movs	r2, #9
 800516e:	602a      	str	r2, [r5, #0]
 8005170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	e033      	b.n	80051e4 <__swsetup_r+0x98>
 800517c:	0758      	lsls	r0, r3, #29
 800517e:	d512      	bpl.n	80051a6 <__swsetup_r+0x5a>
 8005180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005182:	b141      	cbz	r1, 8005196 <__swsetup_r+0x4a>
 8005184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005188:	4299      	cmp	r1, r3
 800518a:	d002      	beq.n	8005192 <__swsetup_r+0x46>
 800518c:	4628      	mov	r0, r5
 800518e:	f7ff f8b7 	bl	8004300 <_free_r>
 8005192:	2300      	movs	r3, #0
 8005194:	6363      	str	r3, [r4, #52]	@ 0x34
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800519c:	81a3      	strh	r3, [r4, #12]
 800519e:	2300      	movs	r3, #0
 80051a0:	6063      	str	r3, [r4, #4]
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f043 0308 	orr.w	r3, r3, #8
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	b94b      	cbnz	r3, 80051c6 <__swsetup_r+0x7a>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051bc:	d003      	beq.n	80051c6 <__swsetup_r+0x7a>
 80051be:	4621      	mov	r1, r4
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 f882 	bl	80052ca <__smakebuf_r>
 80051c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ca:	f013 0201 	ands.w	r2, r3, #1
 80051ce:	d00a      	beq.n	80051e6 <__swsetup_r+0x9a>
 80051d0:	2200      	movs	r2, #0
 80051d2:	60a2      	str	r2, [r4, #8]
 80051d4:	6962      	ldr	r2, [r4, #20]
 80051d6:	4252      	negs	r2, r2
 80051d8:	61a2      	str	r2, [r4, #24]
 80051da:	6922      	ldr	r2, [r4, #16]
 80051dc:	b942      	cbnz	r2, 80051f0 <__swsetup_r+0xa4>
 80051de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051e2:	d1c5      	bne.n	8005170 <__swsetup_r+0x24>
 80051e4:	bd38      	pop	{r3, r4, r5, pc}
 80051e6:	0799      	lsls	r1, r3, #30
 80051e8:	bf58      	it	pl
 80051ea:	6962      	ldrpl	r2, [r4, #20]
 80051ec:	60a2      	str	r2, [r4, #8]
 80051ee:	e7f4      	b.n	80051da <__swsetup_r+0x8e>
 80051f0:	2000      	movs	r0, #0
 80051f2:	e7f7      	b.n	80051e4 <__swsetup_r+0x98>
 80051f4:	20000018 	.word	0x20000018

080051f8 <_raise_r>:
 80051f8:	291f      	cmp	r1, #31
 80051fa:	b538      	push	{r3, r4, r5, lr}
 80051fc:	4605      	mov	r5, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	d904      	bls.n	800520c <_raise_r+0x14>
 8005202:	2316      	movs	r3, #22
 8005204:	6003      	str	r3, [r0, #0]
 8005206:	f04f 30ff 	mov.w	r0, #4294967295
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800520e:	b112      	cbz	r2, 8005216 <_raise_r+0x1e>
 8005210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005214:	b94b      	cbnz	r3, 800522a <_raise_r+0x32>
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f830 	bl	800527c <_getpid_r>
 800521c:	4622      	mov	r2, r4
 800521e:	4601      	mov	r1, r0
 8005220:	4628      	mov	r0, r5
 8005222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005226:	f000 b817 	b.w	8005258 <_kill_r>
 800522a:	2b01      	cmp	r3, #1
 800522c:	d00a      	beq.n	8005244 <_raise_r+0x4c>
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	d103      	bne.n	800523a <_raise_r+0x42>
 8005232:	2316      	movs	r3, #22
 8005234:	6003      	str	r3, [r0, #0]
 8005236:	2001      	movs	r0, #1
 8005238:	e7e7      	b.n	800520a <_raise_r+0x12>
 800523a:	2100      	movs	r1, #0
 800523c:	4620      	mov	r0, r4
 800523e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005242:	4798      	blx	r3
 8005244:	2000      	movs	r0, #0
 8005246:	e7e0      	b.n	800520a <_raise_r+0x12>

08005248 <raise>:
 8005248:	4b02      	ldr	r3, [pc, #8]	@ (8005254 <raise+0xc>)
 800524a:	4601      	mov	r1, r0
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	f7ff bfd3 	b.w	80051f8 <_raise_r>
 8005252:	bf00      	nop
 8005254:	20000018 	.word	0x20000018

08005258 <_kill_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	2300      	movs	r3, #0
 800525c:	4d06      	ldr	r5, [pc, #24]	@ (8005278 <_kill_r+0x20>)
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	f7fb fdc2 	bl	8000dee <_kill>
 800526a:	1c43      	adds	r3, r0, #1
 800526c:	d102      	bne.n	8005274 <_kill_r+0x1c>
 800526e:	682b      	ldr	r3, [r5, #0]
 8005270:	b103      	cbz	r3, 8005274 <_kill_r+0x1c>
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	20000380 	.word	0x20000380

0800527c <_getpid_r>:
 800527c:	f7fb bdb0 	b.w	8000de0 <_getpid>

08005280 <__swhatbuf_r>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	460c      	mov	r4, r1
 8005284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005288:	4615      	mov	r5, r2
 800528a:	2900      	cmp	r1, #0
 800528c:	461e      	mov	r6, r3
 800528e:	b096      	sub	sp, #88	@ 0x58
 8005290:	da0c      	bge.n	80052ac <__swhatbuf_r+0x2c>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	2100      	movs	r1, #0
 8005296:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800529a:	bf14      	ite	ne
 800529c:	2340      	movne	r3, #64	@ 0x40
 800529e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052a2:	2000      	movs	r0, #0
 80052a4:	6031      	str	r1, [r6, #0]
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	b016      	add	sp, #88	@ 0x58
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	466a      	mov	r2, sp
 80052ae:	f000 f849 	bl	8005344 <_fstat_r>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	dbed      	blt.n	8005292 <__swhatbuf_r+0x12>
 80052b6:	9901      	ldr	r1, [sp, #4]
 80052b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052c0:	4259      	negs	r1, r3
 80052c2:	4159      	adcs	r1, r3
 80052c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052c8:	e7eb      	b.n	80052a2 <__swhatbuf_r+0x22>

080052ca <__smakebuf_r>:
 80052ca:	898b      	ldrh	r3, [r1, #12]
 80052cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ce:	079d      	lsls	r5, r3, #30
 80052d0:	4606      	mov	r6, r0
 80052d2:	460c      	mov	r4, r1
 80052d4:	d507      	bpl.n	80052e6 <__smakebuf_r+0x1c>
 80052d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	2301      	movs	r3, #1
 80052e0:	6163      	str	r3, [r4, #20]
 80052e2:	b003      	add	sp, #12
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e6:	466a      	mov	r2, sp
 80052e8:	ab01      	add	r3, sp, #4
 80052ea:	f7ff ffc9 	bl	8005280 <__swhatbuf_r>
 80052ee:	9f00      	ldr	r7, [sp, #0]
 80052f0:	4605      	mov	r5, r0
 80052f2:	4639      	mov	r1, r7
 80052f4:	4630      	mov	r0, r6
 80052f6:	f7ff f875 	bl	80043e4 <_malloc_r>
 80052fa:	b948      	cbnz	r0, 8005310 <__smakebuf_r+0x46>
 80052fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005300:	059a      	lsls	r2, r3, #22
 8005302:	d4ee      	bmi.n	80052e2 <__smakebuf_r+0x18>
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	81a3      	strh	r3, [r4, #12]
 800530e:	e7e2      	b.n	80052d6 <__smakebuf_r+0xc>
 8005310:	89a3      	ldrh	r3, [r4, #12]
 8005312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	9b01      	ldr	r3, [sp, #4]
 800531e:	6020      	str	r0, [r4, #0]
 8005320:	b15b      	cbz	r3, 800533a <__smakebuf_r+0x70>
 8005322:	4630      	mov	r0, r6
 8005324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005328:	f000 f81e 	bl	8005368 <_isatty_r>
 800532c:	b128      	cbz	r0, 800533a <__smakebuf_r+0x70>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f023 0303 	bic.w	r3, r3, #3
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	431d      	orrs	r5, r3
 800533e:	81a5      	strh	r5, [r4, #12]
 8005340:	e7cf      	b.n	80052e2 <__smakebuf_r+0x18>
	...

08005344 <_fstat_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	2300      	movs	r3, #0
 8005348:	4d06      	ldr	r5, [pc, #24]	@ (8005364 <_fstat_r+0x20>)
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	f7fb fdab 	bl	8000eac <_fstat>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d102      	bne.n	8005360 <_fstat_r+0x1c>
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	b103      	cbz	r3, 8005360 <_fstat_r+0x1c>
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	20000380 	.word	0x20000380

08005368 <_isatty_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	2300      	movs	r3, #0
 800536c:	4d05      	ldr	r5, [pc, #20]	@ (8005384 <_isatty_r+0x1c>)
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fda9 	bl	8000eca <_isatty>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_isatty_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_isatty_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20000380 	.word	0x20000380

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	bf00      	nop
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
